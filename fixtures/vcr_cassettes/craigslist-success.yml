---
http_interactions:
- request:
    method: get
    uri: https://desmoines.craigslist.org/search/apa?hasPic=1&max_price=800
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - desmoines.craigslist.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Last-Modified:
      - Mon, 05 Jul 2021 03:18:31 GMT
      Cache-Control:
      - max-age=900, public
      Date:
      - Mon, 05 Jul 2021 03:18:30 GMT
      Vary:
      - Accept-Encoding
      Content-Length:
      - '33610'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Server:
      - Apache
      Expires:
      - Mon, 05 Jul 2021 03:33:31 GMT
      Set-Cookie:
      - cl_b=4|93dec649917cdcd5c702d2580451284972f95c02|1625455835vBSYY;path=/;domain=.craigslist.org;expires=Fri,
        01-Jan-2038 00:00:00 GMT
      Strict-Transport-Security:
      - max-age=63072000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html class="no-js">
<head>
    
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta property="og:site_name" content="craigslist">
	<meta name="twitter:card" content="preview">
	<meta property="og:title" content="des moines apartments / housing for rent - craigslist">
	<meta name="description" content="des moines apartments / housing for rent - craigslist">
	<meta property="og:description" content="des moines apartments / housing for rent - craigslist">
	<meta property="og:url" content="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800">
	<title>des moines apartments / housing for rent - craigslist</title>
	<link rel="canonical" href="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800">
	<link rel="next" href="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa?s=120&amp;hasPic=1&amp;max_price=800">

<script type="application/ld+json" id="ld_breadcrumb_data" >
    {"@context":"https://schema.org","itemListElement":[{"item":{"name":"desmoines.craigslist.org","@id":"https://desmoines.craigslist.org"},"position":1,"@type":"ListItem"},{"item":{"name":"housing","@id":"https://desmoines.craigslist.org/d/housing/search/hhh"},"position":2,"@type":"ListItem"},{"item":{"name":"apartments / housing for rent","@id":"https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa"},"position":3,"@type":"ListItem"}],"@type":"BreadcrumbList"}
</script>

    <style type="text/css">
        #no-js,
        #unsupported-browser,
        #unrecoverable-error
        {
            display:none;
        }

        #curtain {
            display:none;
            z-index: 10000;
            position:absolute;
            top:0;
            bottom:0;
            left:0;
            right:0;
            margin:0;
            border:0;
            background-color:white;
        }

        html.no-js #no-js,
        body.unsupported-browser #unsupported-browser,
        body.unrecoverable-error #unrecoverable-error
        {
            display:block;
            z-index: 10001;
            position:absolute;
            top:0;
            left:0;
            right:0;
            font-family: Sans-Serif;
            text-align: center;
            background-color: #FA8787;
            padding: 1em;
        }

        body.loading #curtain {
        	display:block;
        }
    </style>


    
     
     <script src="https://www.craigslist.org/static/www/482fb2bf6f66c3eb204748eb0940a3022405f1f5.js"></script>
     <script>
         window.cl.init(
             'https://www.craigslist.org/static/www/',
             '',
             'www',
             'browsePostings',
             {
areaCountry: "US",
areaID: "98",
areaRegion: "IA",
catAbb: "apa",
countOfTotalText: "image {count} of {total}",
currencySymbol: "&#x0024;",
defaultView: "grid",
expiredFavIDs: null,
imageConfig: {"1":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"4":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"0":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450"]},"3":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"2":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]}},
lessInfoText: "less info",
maptileBaseUrl: "//map{s}.craigslist.org/t09/{z}/{x}/{y}.png",
maxResults: 3000,
noImageText: "no image",
pID: null,
postalLat: null,
postalLon: null,
purveyorCategories: null,
searchDistance: null,
sectionAbb: "hhh",
sectionBase: "hhh",
showInfoText: "show info",
showMapTabs: 1,
showingBanished: 0,
showingFavorites: 0,
starHint: "save this post in your favorites list",
subarea: null,
zoomToPosting: null
},
             0
         );
     </script>
     
</head>
<body class="loading hide-on-global-error search has-map" >
    
    <iframe id="cl-local-storage" src="https://www.craigslist.org/static/www/localStorage-092e9f9e2f09450529e744902aa7cdb3a5cc868d.html" style="display:none;"></iframe>
    
    <div id="curtain"></div>

    <noscript id="no-js"><div>
    We've detected that JavaScript is not enabled in your browser.
    <br><br>
    You must enable JavaScript to use craigslist.
</div></noscript>
<div id="unsupported-browser">
    We've detected you are using a browser that is missing critical features.
    <br><br>
    Please visit craigslist from a modern browser.
</div>
<div id="unrecoverable-error">
    There was an error loading the page; please try to refresh the page.
</div>


    <section class="page-container" id="page-top" data-areaid="">
        <div class="bglogo"></div>
        <div class="tryapp">
    try the craigslist app &raquo;
    <a class="appstorebtn"
    href="https://play.google.com/store/apps/details?id=org.craigslist.CraigslistMobile">
        Android
    </a>
    <a class="appstorebtn"
    href="https://apps.apple.com/us/app/craigslist/id1336642410">
        iOS
    </a>
</div>
<header class="global-header wide">
   <a class="header-logo" name="logoLink" href="/">CL</a>

    <nav class="breadcrumbs-container">
<form id="breadcrumbform" class="breadcrumbs-form" method="get" action="/search/apa" data-action="/search/###/apa">
    <input type="hidden" name="max_price" value="800">
<input type="hidden" name="hasPic" value="1">

    <ul class="breadcrumbs ">
        <li class="crumb area">
            
            <span class="no-js">
                <a href="/">des moines</a>
            </span>
                <select name="areaAbb" id="areaAbb" class="js-only">
                    <option value="desmoines">des moines</option>
                        <option value="ames">ames, IA</option>
                        <option value="cedarrapids">cedar rapids</option>
                        <option value="columbiamo">columbia, MO</option>
                        <option value="dubuque">dubuque</option>
                        <option value="fortdodge">fort dodge</option>
                        <option value="iowacity">iowa city</option>
                        <option value="kansascity">kansas city</option>
                        <option value="kirksville">kirksville</option>
                        <option value="lacrosse">la crosse</option>
                        <option value="lawrence">lawrence</option>
                        <option value="lincoln">lincoln</option>
                        <option value="ksu">manhattan</option>
                        <option value="mankato">mankato</option>
                        <option value="masoncity">mason city</option>
                        <option value="omaha">omaha</option>
                        <option value="peoria">peoria</option>
                        <option value="quadcities">quad cities</option>
                        <option value="rmn">rochester, MN</option>
                        <option value="siouxcity">sioux city</option>
                        <option value="siouxfalls">sioux falls</option>
                        <option value="ottumwa">southeast IA</option>
                        <option value="marshall">southwest MN</option>
                        <option value="stjoseph">st joseph</option>
                        <option value="topeka">topeka</option>
                        <option value="waterloo">waterloo</option>
                        <option value="quincy">western IL</option>
                </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb section">
                    <select name="catAbb" id="catAbb">
                        <option value="ccc">community</option>
                        <option value="eee">events</option>
                        <option value="sss">for sale</option>
                        <option value="ggg">gigs</option>
                        <option value="hhh" selected>housing</option>
                        <option value="jjj">jobs</option>
                        <option value="rrr">resumes</option>
                        <option value="bbb">services</option>
                    </select>
                <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb category">
            <select id="subcatAbb" class="js-only">
                <option value="hhh">all</option>
                    <option value="apa" selected>apartments / housing for rent</option>
                    <option value="swp">housing swap</option>
                    <option value="off">office &amp; commercial</option>
                    <option value="prk">parking &amp; storage</option>
                    <option value="reb">real estate - by broker</option>
                    <option value="reo">real estate - by owner</option>
                    <option value="roo">rooms &amp; shares</option>
                    <option value="sub">sublets &amp; temporary</option>
                    <option value="vac">vacation rentals</option>
                    <option value="hou">wanted: apts</option>
                    <option value="rew">wanted: real estate</option>
                    <option value="sha">wanted: room/share</option>
                    <option value="sbw">wanted: sublet/temp</option>
            </select><span class="no-js">apartments / housing for rent</span>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb no-js">
            <input type="submit" value="go">
        </li>
    </ul>
</form>
    </nav>

<div class="userlinks">
    <ul class="user-actions">
        <li class="user post">
            <a href="https://post.craigslist.org/c/dsm">post</a>
        </li>
        <li class="user account">
            <a href="https://accounts.craigslist.org/login/home">account</a>
        </li>
    </ul>
    <ul class="user-favs-discards">
        <li class="user">
            <div class="favorites">
                <a href="#" class="favlink"><span class="icon icon-star fav" aria-hidden="true"></span><span class="fav-number">0</span><span class="fav-label"> favorites</span></a>
            </div>
        </li>
        <li class="user discards">
            <form class="unfavform js-only" method="GET" action="/favorites">
              <div class="to-banish-page">
                <input type="hidden" class="unfaves" name="fl">
                <input type="hidden" name="uf" value="1">
                <a href="#" class="to-banish-page-link">
                  <span class="icon icon-trash red" aria-hidden="true"></span>
                  <span class="banished_count">0</span>
                  <span class="discards-label"> hidden</span>
                </a>
              </div>
          </form>
        </li>
    </ul>
</div>

</header>
<header class="global-header narrow">
   <a class="header-logo" href="/">CL</a>
    <nav class="breadcrumbs-container">

<h1 class="breadcrumbs">

des moines            &gt;

apartments / housing for rent</h1>


    </nav>
    <span class="linklike show-wide-header">...</span>
</header>


        <form id="searchform" class="search-form" action="/d/apartments-housing-for-rent/search/apa" >
            <div class="querybox">
                <div class="form-tab js-only"><span class="search-open" title="hide search">&laquo;</span><span class="search-closed" title="show search">&raquo;</span></div>
                <input type="text" placeholder="search apartments / housing for rent" name="query"
                    id="query" value="" autocorrect="off" class="flatinput ui-autocomplete-input"
                    autocapitalize="off" autocomplete="off" data-autocomplete="search">

                <button type="submit" class="searchbtn">
                    <span class="icon icon-search" aria-hidden="true"></span>
                    <span class="screen-reader-text">press to search craigslist</span>
                </button>
                    <div class="savealert">
                        <a class="saveme" data-action="save"  href="https://accounts.craigslist.org/savesearch/save?URL=https%3A%2F%2Fdesmoines%2Ecraigslist%2Eorg%2Fd%2Fapartments%2Dhousing%2Dfor%2Drent%2Fsearch%2Fapa%3FhasPic%3D1%26max%5Fprice%3D800"  title="save this search" >save search</a>
                    </div>
            </div>

            <div class="search-options-container">
    <h1 class="cattitle">
            <a href="/d/apartments-housing-for-rent/search/apa" title="clear all search parameters" class="reset">apartments / housing for rent</a>
    </h1>
    <div class="search-options-header linklike">
        <div class="icon icon-toggle-gear" aria-hidden="true"></div>
        options<span class="options-close">close</span>
    </div>
    <input id="excats" type="hidden" name="excats">
    <div class="search-options">
        <div class="searchgroup categories">
        </div>
        <input type="hidden" name="userid" value="" />





        <div class="searchgroup" id="basic-bools">
            <ul>
    <li>
       <label class="srchType">
           <input type="checkbox" name="srchType" class="" value="T" >
           search titles only
       </label>
    </li>
    <li>
       <label class="hasPic">
           <input type="checkbox" name="hasPic" class="autosubmit" value="1"  checked>
           has image
       </label>
    </li>
    <li>
       <label class="postedToday">
           <input type="checkbox" name="postedToday" class="autosubmit" value="1" >
           posted today
       </label>
    </li>
    <li>
       <label class="bundleDuplicates">
           <input type="checkbox" name="bundleDuplicates" class="autosubmit" value="1" >
           bundle duplicates
       </label>
    </li>
    <li>
       <label class="searchNearby">
           <input type="checkbox" name="searchNearby" class="autosubmit" value="1" >
           include nearby areas
       </label>
    </li>
</ul>

                <ul class="js-only nearbyAreas ">
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_0"
                            value="445"
                            disabled="disabled"
                            />
                            ames, IA <small>(ame)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_35"
                            value="344"
                            disabled="disabled"
                            />
                            bloomington-normal <small>(bln)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_4"
                            value="340"
                            disabled="disabled"
                            />
                            cedar rapids, IA <small>(ced)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_40"
                            value="190"
                            disabled="disabled"
                            />
                            champaign urbana <small>(chm)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_44"
                            value="11"
                            disabled="disabled"
                            />
                            chicago <small>(chi)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_19"
                            value="222"
                            disabled="disabled"
                            />
                            columbia / jeff city <small>(cou)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_37"
                            value="569"
                            disabled="disabled"
                            />
                            decatur, IL <small>(dil)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_12"
                            value="362"
                            disabled="disabled"
                            />
                            dubuque <small>(dbq)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_32"
                            value="242"
                            disabled="disabled"
                            />
                            eau claire, WI <small>(eau)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_1"
                            value="693"
                            disabled="disabled"
                            />
                            fort dodge, IA <small>(ftd)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_34"
                            value="432"
                            disabled="disabled"
                            />
                            grand island, NE <small>(gil)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_5"
                            value="339"
                            disabled="disabled"
                            />
                            iowa city, IA <small>(iac)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_33"
                            value="553"
                            disabled="disabled"
                            />
                            janesville, WI <small>(jvl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_17"
                            value="30"
                            disabled="disabled"
                            />
                            kansas city, MO <small>(ksc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_42"
                            value="552"
                            disabled="disabled"
                            />
                            kenosha-racine <small>(rac)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_7"
                            value="696"
                            disabled="disabled"
                            />
                            kirksville, MO <small>(krk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_18"
                            value="363"
                            disabled="disabled"
                            />
                            la crosse, WI <small>(lse)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_27"
                            value="698"
                            disabled="disabled"
                            />
                            la salle co <small>(lsl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_30"
                            value="695"
                            disabled="disabled"
                            />
                            lake of the ozarks <small>(loz)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_20"
                            value="347"
                            disabled="disabled"
                            />
                            lawrence, KS <small>(lwr)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_14"
                            value="282"
                            disabled="disabled"
                            />
                            lincoln, NE <small>(lnk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_29"
                            value="165"
                            disabled="disabled"
                            />
                            madison, WI <small>(mad)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_25"
                            value="428"
                            disabled="disabled"
                            />
                            manhattan, KS <small>(mhk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_16"
                            value="421"
                            disabled="disabled"
                            />
                            mankato, MN <small>(mkt)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_6"
                            value="692"
                            disabled="disabled"
                            />
                            mason city, IA <small>(msc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_45"
                            value="47"
                            disabled="disabled"
                            />
                            milwaukee, WI <small>(mil)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_26"
                            value="19"
                            disabled="disabled"
                            />
                            minneapolis / st paul <small>(min)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_8"
                            value="55"
                            disabled="disabled"
                            />
                            omaha / council bluffs <small>(oma)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_23"
                            value="224"
                            disabled="disabled"
                            />
                            peoria, IL <small>(pia)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_10"
                            value="307"
                            disabled="disabled"
                            />
                            quad cities, IA/IL <small>(mli)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_15"
                            value="316"
                            disabled="disabled"
                            />
                            rochester, MN <small>(rmn)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_28"
                            value="223"
                            disabled="disabled"
                            />
                            rockford, IL <small>(rfd)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_39"
                            value="690"
                            disabled="disabled"
                            />
                            salina, KS <small>(sns)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_11"
                            value="341"
                            disabled="disabled"
                            />
                            sioux city, IA <small>(sux)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_21"
                            value="679"
                            disabled="disabled"
                            />
                            sioux falls / SE SD <small>(fsd)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_2"
                            value="691"
                            disabled="disabled"
                            />
                            southeast IA <small>(otu)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_24"
                            value="665"
                            disabled="disabled"
                            />
                            southwest MN <small>(mml)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_31"
                            value="225"
                            disabled="disabled"
                            />
                            springfield, IL <small>(spi)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_41"
                            value="221"
                            disabled="disabled"
                            />
                            springfield, MO <small>(sgf)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_38"
                            value="369"
                            disabled="disabled"
                            />
                            st cloud, MN <small>(stc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_9"
                            value="694"
                            disabled="disabled"
                            />
                            st joseph <small>(stj)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_36"
                            value="29"
                            disabled="disabled"
                            />
                            st louis, MO <small>(stl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_22"
                            value="280"
                            disabled="disabled"
                            />
                            topeka, KS <small>(tpk)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_3"
                            value="567"
                            disabled="disabled"
                            />
                            waterloo / cedar falls <small>(wlo)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_43"
                            value="458"
                            disabled="disabled"
                            />
                            wausau, WI <small>(wau)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_13"
                            value="697"
                            disabled="disabled"
                            />
                            western IL <small>(qcy)</small>
                        </label>
                        </li>

                        <li>
                        <span class="nextNearbyZone linklike" data-zone="1">
                            + show <span id="nearbyNumber">46</span> more...
                        </span>
                        </li>
                </ul>
        </div>

            <div class="searchgroup">
                <span class="searchfieldlabel">miles from zip</span>
                <input size="5" maxlength="5" inputmode="numeric"
                    class="flatinput searchInput search_distance" placeholder="miles"
                    name="search_distance"
                    value=""
                />
                <input type="text" class="flatinput searchInput postal" placeholder="from zip"
                    size="7" name="postal" value="">
                <span class="icon icon-locate"></span>
            </div>


    <div class="searchgroup minmax price" id="price">
<span class="searchfieldlabel">price</span>
    <input type="tel" name="min_price" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="max_price" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="800">
</div>


  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bedrooms</span>
    <select name="min_bedrooms" class="autosubmit">
      <option value="">min</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bedrooms" class="autosubmit">
      <option value="">max</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bathrooms</span>
    <select name="min_bathrooms" class="autosubmit">
      <option value="">min</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bathrooms" class="autosubmit">
      <option value="">max</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

    <div class="searchgroup minmax " id="">
<span class="searchfieldlabel">ft<sup>2</sup></span>
    <input type="tel" name="minSqft" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="maxSqft" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>

<div class="searchgroup">
  <span class="searchfieldlabel">availability</span>
  <select class="autosubmit" name="availabilityMode">
        <option value="0">all dates</option>
        <option value="1">within 30 days</option>
        <option value="2">beyond 30 days</option>
 </select>
</div>

<div class="searchgroup search-group-checkbox">
<label class="pets_cat">
        <input type="checkbox" name="pets_cat" value="1" class="autosubmit" />
    cats ok
</label><br>
<label class="pets_dog">
        <input type="checkbox" name="pets_dog" value="1" class="autosubmit" />
    dogs ok
</label><br>
<label class="is_furnished">
        <input type="checkbox" name="is_furnished" value="1" class="autosubmit" />
    furnished
</label><br>
<label class="no_smoking">
        <input type="checkbox" name="no_smoking" value="1" class="autosubmit" />
    no smoking
</label><br>
<label class="wheelchaccess">
        <input type="checkbox" name="wheelchaccess" value="1" class="autosubmit" />
    wheelchair access
</label><br>
<label class="airconditioning">
        <input type="checkbox" name="airconditioning" value="1" class="autosubmit" />
    air conditioning
</label><br>
<label class="ev_charging">
        <input type="checkbox" name="ev_charging" value="1" class="autosubmit" />
    EV charging
</label><br>
<label class="application_fee">
        <input type="checkbox" name="application_fee" value="1" class="autosubmit" />
    no application fee
</label><br>
<label class="broker_fee">
        <input type="checkbox" name="broker_fee" value="1" class="autosubmit" />
    no broker fee
</label><br>
</div>

<div class="searchgroup search-group-multi_checkbox">
<div class="search-attribute hide-list" data-attr="housing_type">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> housing type
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="housing_type_1" name="housing_type" class="multi_checkbox" value="1" type="checkbox"
                     />
                    apartment
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_2" name="housing_type" class="multi_checkbox" value="2" type="checkbox"
                     />
                    condo
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_3" name="housing_type" class="multi_checkbox" value="3" type="checkbox"
                     />
                    cottage/cabin
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_4" name="housing_type" class="multi_checkbox" value="4" type="checkbox"
                     />
                    duplex
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_5" name="housing_type" class="multi_checkbox" value="5" type="checkbox"
                     />
                    flat
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_6" name="housing_type" class="multi_checkbox" value="6" type="checkbox"
                     />
                    house
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_7" name="housing_type" class="multi_checkbox" value="7" type="checkbox"
                     />
                    in-law
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_8" name="housing_type" class="multi_checkbox" value="8" type="checkbox"
                     />
                    loft
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_9" name="housing_type" class="multi_checkbox" value="9" type="checkbox"
                     />
                    townhouse
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_10" name="housing_type" class="multi_checkbox" value="10" type="checkbox"
                     />
                    manufactured
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_11" name="housing_type" class="multi_checkbox" value="11" type="checkbox"
                     />
                    assisted living
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_12" name="housing_type" class="multi_checkbox" value="12" type="checkbox"
                     />
                    land
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="laundry">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> laundry
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="laundry_1" name="laundry" class="multi_checkbox" value="1" type="checkbox"
                     />
                    w/d in unit
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_4" name="laundry" class="multi_checkbox" value="4" type="checkbox"
                     />
                    w/d hookups
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_2" name="laundry" class="multi_checkbox" value="2" type="checkbox"
                     />
                    laundry in bldg
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_3" name="laundry" class="multi_checkbox" value="3" type="checkbox"
                     />
                    laundry on site
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_5" name="laundry" class="multi_checkbox" value="5" type="checkbox"
                     />
                    no laundry on site
                </label>
            </li>



    </ul>
</div>
<div class="search-attribute hide-list" data-attr="parking">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> parking
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="parking_1" name="parking" class="multi_checkbox" value="1" type="checkbox"
                     />
                    carport
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_2" name="parking" class="multi_checkbox" value="2" type="checkbox"
                     />
                    attached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_3" name="parking" class="multi_checkbox" value="3" type="checkbox"
                     />
                    detached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_4" name="parking" class="multi_checkbox" value="4" type="checkbox"
                     />
                    off-street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_5" name="parking" class="multi_checkbox" value="5" type="checkbox"
                     />
                    street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_6" name="parking" class="multi_checkbox" value="6" type="checkbox"
                     />
                    valet parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_7" name="parking" class="multi_checkbox" value="7" type="checkbox"
                     />
                    no parking
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="rent_period">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> rent period
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="rent_period_1" name="rent_period" class="multi_checkbox" value="1" type="checkbox"
                     />
                    daily
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_2" name="rent_period" class="multi_checkbox" value="2" type="checkbox"
                     />
                    weekly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_3" name="rent_period" class="multi_checkbox" value="3" type="checkbox"
                     />
                    monthly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_4" name="rent_period" class="multi_checkbox" value="4" type="checkbox"
                     />
                    yearly
                </label>
            </li>



    </ul>
</div>
</div>


            <div class="searchgroup">
                    <div class="searchfieldlabel">open house date</div>
                <select class="autosubmit" id="sale_date" name="sale_date">
                    <option>all dates</option>
                        <option value="2021-07-04">jul 4 - today</option>
                        <option value="2021-07-05">jul 5 - tomorrow</option>
                        <option value="2021-07-06">jul 6 - tuesday</option>
                        <option value="2021-07-07">jul 7 - wednesday</option>
                        <option value="2021-07-08">jul 8 - thursday</option>
                        <option value="2021-07-09">jul 9 - friday</option>
                        <option value="2021-07-10">jul 10 - saturday</option>
                        <option value="2021-07-11">jul 11 - sunday</option>
                        <option value="2021-07-12">jul 12 - monday</option>
                        <option value="2021-07-13">jul 13 - tuesday</option>
                        <option value="2021-07-14">jul 14 - wednesday</option>
                        <option value="2021-07-15">jul 15 - thursday</option>
                        <option value="2021-07-16">jul 16 - friday</option>
                        <option value="2021-07-17">jul 17 - saturday</option>
                        <option value="2021-07-18">jul 18 - sunday</option>
                        <option value="2021-07-19">jul 19 - monday</option>
                        <option value="2021-07-20">jul 20 - tuesday</option>
                        <option value="2021-07-21">jul 21 - wednesday</option>
                        <option value="2021-07-22">jul 22 - thursday</option>
                        <option value="2021-07-23">jul 23 - friday</option>
                        <option value="2021-07-24">jul 24 - saturday</option>
                        <option value="2021-07-25">jul 25 - sunday</option>
                        <option value="2021-07-26">jul 26 - monday</option>
                        <option value="2021-07-27">jul 27 - tuesday</option>
                        <option value="2021-07-28">jul 28 - wednesday</option>
                        <option value="2021-07-29">jul 29 - thursday</option>
                        <option value="2021-07-30">jul 30 - friday</option>
                        <option value="2021-07-31">jul 31 - saturday</option>
                </select>
            </div>
        <div class="searchgroup resetsearch">
            <a href="/d/apartments-housing-for-rent/search/apa" title="clear all search parameters" class="reset linklike">reset</a>
            <button type="submit" class="searchlink linklike">update search</button>
        </div>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>
    </div>
</div>


            <div class="search-legend">
<div class="search-view js-only">
    <div class="dropdown dropdown-icons dropdown-arrows dropdown-view" role="toolbar" aria-label="view options" aria-expanded="false">
        <ul class="dropdown-list">
            <li class="dropdown-item mode sel">
                <button title="show results in a list" data-selection="list" id="listview">
                    <span class="view-list icon"></span>list
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results in a list with thumbnail pictures"  data-selection="pic"  id="picview" >
                    <span class="view-thumb icon"></span>thumb
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results side-by-side with larger pictures" data-selection="grid" id="gridview">
                    <span class="view-gallery icon"></span>gallery
                </button>
                <span class="toggle-arrow"></span>
            </li>
                <li class="dropdown-item mode">
                    <button title="show results on a map"  data-selection="map"  id="mapview" >
                        <span class="view-map icon"></span>map
                    </button>
                    <span class="toggle-arrow"></span>
                </li>
        </ul>
    </div>
</div>
                <div class="search-sort" >
    <div class="dropdown dropdown-sort dropdown-arrows" data-default-sort="date" role="toolbar" aria-label="sort options" aria-expanded="false">
        <ul class="dropdown-list">

            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="upcoming" title="show upcoming open houses" href="/d/apartments-housing-for-rent/search/apa?sort=upcoming&amp;hasPic=1&amp;max_price=800">upcoming <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode sel" aria-selected="true">
                <a data-selection="date" title="show newest matches first" href="/d/apartments-housing-for-rent/search/apa?sort=date&amp;hasPic=1&amp;max_price=800">newest <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="priceasc" title="sort by price, lowest to highest" href="/d/apartments-housing-for-rent/search/apa?sort=priceasc&amp;hasPic=1&amp;max_price=800">price ↑ <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="pricedsc" title="sort by price, highest to lowest" href="/d/apartments-housing-for-rent/search/apa?sort=pricedsc&amp;hasPic=1&amp;max_price=800">price ↓ <span class="toggle-arrow"></span></a>
            </li>

        </ul>
    </div>
</div>

                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">702</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">702</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/apa?s=120&amp;hasPic=1&amp;max_price=800" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

                
            </div>
            <div class="content" id="sortable-results" >
                <section class="favlistsection">
                    <section class="favlistinfo">
                    </section>
                    <section class="banishlistinfo">
                    </section>
                </section>


                    


<div class="open-map-view-button">
    <span>see in map view</span>
</div>
<div id="mapcontainer" data-arealat="41.600601" data-arealon="-93.608902">
    <div id="noresult-overlay"></div>
    <div id="noresult-text">
        <span class="message">No mappable items found</span>
    </div>
    <div id="map" class="loading">
        <div class="close-full-screen-map-mode-button">close fullscreen</div>
    </div>
</div>

                <ul class="rows" id="search-results">
                             <li class="result-row" data-pid="7335144880">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-sweeping-skyline-views-from/7335144880.html" class="result-image gallery" data-ids="3:00a0a_dRws4Ed49mMz_0fa07Z,3:00G0G_5uICNuqc6shz_0fa07Z,3:00c0c_hYa5j2EQQy4z_0fa07Z,3:00404_35xH6gftSiFz_0fa07Z,3:00B0B_aFv3uhMuuMAz_0fa07Z,3:00404_cWuBZJAuYK4z_0fa07Z,3:00D0D_eCvPbyYnuiBz_0fa07Z,3:00e0e_d0Z0gg8PGWYz_0fa07Z,3:00c0c_cQEdxCRSkHoz_05E07m">
                <span class="result-price">$726</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-04 19:35" title="Sun 04 Jul 07:35:54 PM">Jul  4</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-sweeping-skyline-views-from/7335144880.html" data-id="7335144880" class="result-title hdrlnk" id="postid_7335144880" >Sweeping Skyline Views from Your Home, Dog Park, Custom Cabinetry</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$726</span>

                <span class="housing">
                    357ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7346106614">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-3500-36th-ct-bedroom/7346106614.html" class="result-image gallery" data-ids="3:00d0d_hln5pPhWxyTz_0co09i,3:00u0u_gjsfgiXuPWzz_06c04E,3:00l0l_dAzdz5N4CHXz_06c04E,3:01616_2h5Trbd9acXz_06c04E">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-04 11:20" title="Sun 04 Jul 11:20:33 AM">Jul  4</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-3500-36th-ct-bedroom/7346106614.html" data-id="7346106614" class="result-title hdrlnk" id="postid_7346106614" >3500 E 36th Ct, 2 bedroom 1bathroom 1,408 sqft</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    2br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7346096703">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-this-walkout-home-features/7346096703.html" class="result-image gallery" data-ids="3:00202_8dKUZ0PWrOwz_08C04o">
                <span class="result-price">$500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-04 10:41" title="Sun 04 Jul 10:41:28 AM">Jul  4</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-this-walkout-home-features/7346096703.html" data-id="7346096703" class="result-title hdrlnk" id="postid_7346096703" >This walkout home features 3 bedrooms and remodeled</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$500</span>

                <span class="housing">
                    4br -
                    1875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Merced St,Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345958886">

        <a href="https://desmoines.craigslist.org/apa/d/ottumwa-wow2-bedroom-bathroom-1020/7345958886.html" class="result-image gallery" data-ids="3:00202_358g879dY2Uz_09m06e,3:01111_6MHIpB7aPdVz_09m06e,3:00u0u_kU9M6xHEJXzz_09m06e,3:00505_gKdXRkFfjcDz_09m06e,3:00808_gVoWdQ023Mcz_09m06e,3:00G0G_9xIuxAzsWaez_09m06e">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 20:58" title="Sat 03 Jul 08:58:46 PM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ottumwa-wow2-bedroom-bathroom-1020/7345958886.html" data-id="7345958886" class="result-title hdrlnk" id="postid_7345958886" >~!~! WOW,,,2 Bedroom, 2 bathroom 1020 square foot apartment + a/c #</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    2br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343988182">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-adorable-br-ba-loaded/7343988182.html" class="result-image gallery" data-ids="3:00Q0Q_bEP5HdmmRSCz_06R094,3:00505_fd9rIlBEZ3az_0a0096,3:00g0g_a7rBHta0uKLz_06O093">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 17:17" title="Sat 03 Jul 05:17:48 PM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-adorable-br-ba-loaded/7343988182.html" data-id="7343988182" class="result-title hdrlnk" id="postid_7343988182" >Adorable - 1 Br / 1 Ba -Loaded w/Vintage Character</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345867460" data-repost-of="7315606561">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-high-quality-upgraded-home/7345867460.html" class="result-image gallery" data-ids="3:00000_4Ho1v1cOr7zz_0e7082,3:00i0i_t5ATgMb0Acz_0dd0fu,3:00E0E_1K3alJpsQR4z_0fu0aF,3:00w0w_kBZFYDlVwnGz_09Z0fu,3:00707_5eZoS0QxmQkz_0fu0ak,3:00000_jbC8olqPJp1z_0ak0fu">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 15:46" title="Sat 03 Jul 03:46:47 PM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-high-quality-upgraded-home/7345867460.html" data-id="7345867460" class="result-title hdrlnk" id="postid_7345867460" >HIGH QUALITY UPGRADED HOME, $705</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    700ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NE DSM)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344629986">

        <a href="https://desmoines.craigslist.org/apa/d/seattle-this-updated-two-story-stunner/7344629986.html" class="result-image gallery" data-ids="3:00p0p_bb83DFtD2Hlz_09G06b">
                <span class="result-price">$610</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 13:20" title="Sat 03 Jul 01:20:24 PM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/seattle-this-updated-two-story-stunner/7344629986.html" data-id="7344629986" class="result-title hdrlnk" id="postid_7344629986" >This updated two story stunner checks all the boxes.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$610</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (3413 SW 13TH ST)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345738984" data-repost-of="7005726838">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-now-leasing-riverview-oaks/7345738984.html" class="result-image gallery" data-ids="1:00E0E_3ojlehvS0cd,1:00000_gTTCRlZdD0C,1:01616_5wmsinZvtUF,1:00U0U_4bFhpXrILOS,1:00U0U_69DkO4OKmvy,1:00H0H_kpoOP35pUl5,1:00E0E_jlyTniwYNZl,1:00H0H_cgwSykS5D3g">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:46" title="Sat 03 Jul 11:46:27 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-now-leasing-riverview-oaks/7345738984.html" data-id="7345738984" class="result-title hdrlnk" id="postid_7345738984" >Now Leasing Riverview Oaks Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines Iowa)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345738832" data-repost-of="7005726838">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-now-leasing-riverview-oaks/7345738832.html" class="result-image gallery" data-ids="1:00E0E_3ojlehvS0cd,1:00000_gTTCRlZdD0C,3:00909_fsjcyw6orsf_03S05a,3:00b0b_dRsJolpJHMK_03S05a,3:00909_etlTt7wMIZL_03S05a,3:01717_8hAOmgCm9Up_03S05a,3:00K0K_aRATkCjOQKv_03S05a,3:00101_dURSgeB0HWB_03S05a,3:00f0f_eHHZACeiehR_03S05a,3:00Z0Z_d4LDbH7FUIq_03S05a,3:00m0m_gQyfEqvKIzW_03S05a,3:00g0g_b30Qg8e73Rs_03S05a,3:00202_fsms46UnAYp_03S05a,3:00808_jQbcsSjiAcK_03S05a,3:00O0O_9HEstjNuKW6_03S05a">
                <span class="result-price">$650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:46" title="Sat 03 Jul 11:46:12 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-now-leasing-riverview-oaks/7345738832.html" data-id="7345738832" class="result-title hdrlnk" id="postid_7345738832" >Now Leasing Riverview Oaks Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$650</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines Iowa)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345738709" data-repost-of="7005726838">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-now-leasing-riverview-oaks/7345738709.html" class="result-image gallery" data-ids="1:00E0E_3ojlehvS0cd,1:00000_gTTCRlZdD0C,3:00u0u_7MiAbrlIPIT_03S05a,3:00h0h_aWsUSuF3pww_03S05a,3:00000_3MFefZYSDJD_03S05a,3:00w0w_hNx242wxIWl_03S05a,3:00w0w_bYLvDfWN3Uk_03S05a">
                <span class="result-price">$595</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:45" title="Sat 03 Jul 11:45:58 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-now-leasing-riverview-oaks/7345738709.html" data-id="7345738709" class="result-title hdrlnk" id="postid_7345738709" >Now Leasing Riverview Oaks Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$595</span>


                <span class="result-hood"> (Des Moines Iowa)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345738362" data-repost-of="7013615198">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-arlington-apartments/7345738362.html" class="result-image gallery" data-ids="3:00x0x_hbLyoVEoceX_08g04m,3:00k0k_hVPzcv1uDyi_03S05a,3:00p0p_9Vc1Fu9Q4Fz_03S05a,3:00L0L_fK4rYscuHQC_03S05a,3:00m0m_dYASAYZeK8f_03S05a,3:00s0s_a8YLpg1C7nL_03S05a,3:00707_1aVBlwsFG8e_03S05a">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:45" title="Sat 03 Jul 11:45:22 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-arlington-apartments/7345738362.html" data-id="7345738362" class="result-title hdrlnk" id="postid_7345738362" >Arlington Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines Iowa)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345717016">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-home-sits-on-almost-acres-of/7345717016.html" class="result-image gallery" data-ids="3:00C0C_gt6CO9Zbkhaz_06C04q,3:00R0R_akqW9lJCHwXz_06C04p,3:01010_lGkIwicCGW0z_06C04p,3:00P0P_dlo36HwWyF3z_06C04q,3:00h0h_hcfS99U8nXXz_06C04p">
                <span class="result-price">$550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:18" title="Sat 03 Jul 11:18:01 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-home-sits-on-almost-acres-of/7345717016.html" data-id="7345717016" class="result-title hdrlnk" id="postid_7345717016" >HOME SITS ON ALMOST 3 ACRES OF LAND</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$550</span>

                <span class="housing">
                    3br -
                    1824ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA 50313)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345717442">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-park-like-acre-home-in-city/7345717442.html" class="result-image gallery" data-ids="3:00707_66fqdZWcGD1z_06C04Y,3:00i0i_j6Q4b7HEEEBz_06C04Y,3:00v0v_es6tu1do2Tlz_06C04Y,3:00r0r_d3pjzsvRDsxz_06C04Y,3:01212_c5GE3x0n0Psz_06C04Y,3:00Z0Z_fgl9booScXGz_06C04Y,3:00k0k_2r7GljUmEQVz_06C04Y">
                <span class="result-price">$550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:08" title="Sat 03 Jul 11:08:42 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-park-like-acre-home-in-city/7345717442.html" data-id="7345717442" class="result-title hdrlnk" id="postid_7345717442" >PARK LIKE, 2 ACRE HOME IN CITY LIMITS IS WAITING FOR YOU</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$550</span>

                <span class="housing">
                    4br -
                    1928ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA 50317)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345717004">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-beaverdale-story-has-so-much/7345717004.html" class="result-image gallery" data-ids="3:00J0J_7cB7a2N8WUXz_06C04p,3:00Q0Q_bUcpLqluP4rz_06C04p,3:00o0o_jUe7tas9mJ3z_06C04p,3:00404_fWv64zFnmvFz_06C04p,3:00S0S_ltwrObMNIcIz_06C04p,3:00H0H_kH9pSemmHumz_06C04p">
                <span class="result-price">$550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 11:08" title="Sat 03 Jul 11:08:00 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-beaverdale-story-has-so-much/7345717004.html" data-id="7345717004" class="result-title hdrlnk" id="postid_7345717004" >BEAVERDALE 2 STORY HAS SO MUCH POTENTIAL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$550</span>

                <span class="housing">
                    3br -
                    1409ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA 50311)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345710235">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-830-sq-ft-apartment/7345710235.html" class="result-image gallery" data-ids="3:00Z0Z_7dtsFj9BLRwz_04b038,3:00x0x_2nARhTUMYubz_04P02I,3:01414_eBjwxWSBnBqz_03D03D,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:00G0G_fbk6yOaCjBbz_04Q02I,3:00m0m_iXp4AZFANN4z_04Q02I,3:01717_eSwEeaQEYjJz_04b038">
                <span class="result-price">$789</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 10:55" title="Sat 03 Jul 10:55:42 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-830-sq-ft-apartment/7345710235.html" data-id="7345710235" class="result-title hdrlnk" id="postid_7345710235" >Gracious 830 Sq. Ft. apartment in Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$789</span>

                <span class="housing">
                    2br -
                    830ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345707816">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7345707816.html" class="result-image gallery" data-ids="3:01515_cYN764Xsg5xz_04b038,3:00a0a_dDbKIDzObvsz_04b038,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:01212_b7dXxbABqnzz_04b038,3:00t0t_5LTY4FOqgKrz_04r02X,3:00G0G_fbk6yOaCjBbz_04Q02I,3:00F0F_ZyEdHU4nABz_04s02X">
                <span class="result-price">$789</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 10:51" title="Sat 03 Jul 10:51:11 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7345707816.html" data-id="7345707816" class="result-title hdrlnk" id="postid_7345707816" >The living is easy ANYTIME &amp; the deals are great NOW.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$789</span>

                <span class="housing">
                    2br -
                    830ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345706952">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7345706952.html" class="result-image gallery" data-ids="3:00c0c_12vxiKfrorsz_04Q02I,3:00x0x_2nARhTUMYubz_04P02I,3:01414_eBjwxWSBnBqz_03D03D,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:00L0L_bC9xVeNwPi6z_04r02X,3:00G0G_fbk6yOaCjBbz_04Q02I,3:00m0m_iXp4AZFANN4z_04Q02I">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 10:49" title="Sat 03 Jul 10:49:34 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7345706952.html" data-id="7345706952" class="result-title hdrlnk" id="postid_7345706952" >Available Now! 2 Bedroom Apartments at Somerset</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    806ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343739152">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-grilling-picnic-ares-extra/7343739152.html" class="result-image gallery" data-ids="3:00F0F_8Ewdr4nTS7fz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 10:28" title="Sat 03 Jul 10:28:13 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-grilling-picnic-ares-extra/7343739152.html" data-id="7343739152" class="result-title hdrlnk" id="postid_7343739152" >Grilling &amp; Picnic Ares, Extra Storage Available, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334619135" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7334619135.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 09:13" title="Sat 03 Jul 09:13:43 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7334619135.html" data-id="7334619135" class="result-title hdrlnk" id="postid_7334619135" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345657389" data-repost-of="7165224379">

        <a href="https://desmoines.craigslist.org/apa/d/pleasant-hill-peterson-place-apts-in/7345657389.html" class="result-image gallery" data-ids="3:01010_9p05Za4wkJg_0zF0qm,3:00707_6mjWGd52YCl_0CI0t2,3:00K0K_iB4zIjItQdg_0CI0t2,3:00I0I_fNgp0nfNGJo_0CI0t2,3:00H0H_kYYG88ZUkAA_0CI0t2,3:00d0d_b7Wc3Mq4qjz_0CH0t2,3:01616_a3IK1asVD5S_0CI0lN,3:00V0V_knks2WESDW2_0lM0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 09:12" title="Sat 03 Jul 09:12:22 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/pleasant-hill-peterson-place-apts-in/7345657389.html" data-id="7345657389" class="result-title hdrlnk" id="postid_7345657389" >PETERSON PLACE APTS IN PLEASANT HILL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Pleasant Hill)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345657289" data-repost-of="7323890065">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-one-bedroom-available/7345657289.html" class="result-image gallery" data-ids="3:01616_afAykBF0dImz_0CH0t2,3:00f0f_bJlF67WY6BSz_0CI0t2,3:00F0F_ejnYp4sLj8ez_0CI0t2,3:00303_8VyrZTLguocz_0CI0t2,3:00X0X_gkkEC8WDGycz_0lM0t2,3:01111_5hwwWpWLgYOz_0As0rc,3:00101_8qEEa7uloU9z_0CI0t2">
                <span class="result-price">$700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-03 09:12" title="Sat 03 Jul 09:12:09 AM">Jul  3</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-one-bedroom-available/7345657289.html" data-id="7345657289" class="result-title hdrlnk" id="postid_7345657289" >ONE BEDROOM AVAILABLE AT BRIARWOOD GRAND + FREE CABLE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (West Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345510982">

        <a href="https://desmoines.craigslist.org/apa/d/winterset-rent-sublease/7345510982.html" class="result-image gallery" data-ids="3:00R0R_5vghgozQrwZz_0t20CI,3:00K0K_7scalO1QkRZz_0t20CI,3:01212_k1DrzPmarZvz_0t20CI,3:00z0z_hCsTxGhUtFBz_0t20CI,3:00o0o_e6yzrYhuAzez_0t20CI,3:00X0X_5Ido8TJB9AKz_0t20CI,3:00606_iZ0QkIn5dIJz_0t20CI,3:00z0z_ifp0eSvC4yGz_0t20CI,3:00606_80NzPOhoGrCz_0t20CI">
                <span class="result-price">$700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 19:55" title="Fri 02 Jul 07:55:16 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/winterset-rent-sublease/7345510982.html" data-id="7345510982" class="result-title hdrlnk" id="postid_7345510982" >Rent sublease</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$700</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Winterset)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7341947953">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-be-the-best-with-the-best/7341947953.html" class="result-image gallery" data-ids="3:00L0L_gK1OyR3gOoVz_0d40hq,3:00909_lKH3tVWzd8oz_0d40hq,3:01111_gTSOEna3x1Bz_0d40hq,3:00101_gbfssf4y0DQz_0d40hq,3:00d0d_hyg62zAbXxFz_0d40hq,3:00H0H_lq3aNVWE46jz_0d40hq,3:00v0v_igQLCjHp9tGz_0d40hq,3:00U0U_2yUmyOJ3vI9z_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 17:39" title="Fri 02 Jul 05:39:54 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-be-the-best-with-the-best/7341947953.html" data-id="7341947953" class="result-title hdrlnk" id="postid_7341947953" >BE THE BEST, WITH THE BEST!! CHECK US OUT!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345433694">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7345433694.html" class="result-image gallery" data-ids="3:00c0c_inCWVzre48lz_0r60i4,3:00J0J_g5NcgVVC97Xz_0CI0nm,3:00j0j_a8FedsrgMyGz_0t20lD,3:00b0b_hdCGdDV8ysvz_0pO0hA,3:00808_8kmd4ux6koIz_0pO0gM,3:00505_geH4AoSc2mlz_0pO0hf,3:00j0j_49HG7cZWaFpz_0pO0gJ,3:00U0U_1XpUkZzo2FKz_07K0ak,3:00B0B_dmsYVh8JVLSz_0lW0eO">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 17:07" title="Fri 02 Jul 05:07:59 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7345433694.html" data-id="7345433694" class="result-title hdrlnk" id="postid_7345433694" >Tax credit and section 8 waitlist now available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345445125">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-location-call-and/7345445125.html" class="result-image gallery" data-ids="3:00202_3GMi91Fi39pz_0d40hq,3:00J0J_itOm5ha1XBzz_0d40hq,3:00N0N_dsdemEfRlS2z_0d40hq,3:00A0A_gn2mblsladNz_0d40hq,3:00y0y_h2OdRdUuotmz_0d40hq,3:00J0J_hePQVvk3FRIz_0d40hq,3:00V0V_caTiytbDOT8z_0d40hq,3:00e0e_e4f2fiki4fOz_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 17:06" title="Fri 02 Jul 05:06:18 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-location-call-and/7345445125.html" data-id="7345445125" class="result-title hdrlnk" id="postid_7345445125" >Amazing location! Call and inquire today!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345443914">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-1st-months-rent/7345443914.html" class="result-image gallery" data-ids="3:00808_kaQaoysM1hhz_0d60hq,3:00w0w_9HfW9vIgGK5z_0d60hq,3:00t0t_jG1DsZH5Cc3z_0d60hq,3:00U0U_fj5LTPQJRdzz_0d60hq,3:00Q0Q_2BhWnrLu6Dez_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 17:03" title="Fri 02 Jul 05:03:50 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-1st-months-rent/7345443914.html" data-id="7345443914" class="result-title hdrlnk" id="postid_7345443914" >$500 off the 1st months rent!! *limited time*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344390577">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7344390577.html" class="result-image gallery" data-ids="3:00c0c_inCWVzre48lz_0r60i4,3:00J0J_g5NcgVVC97Xz_0CI0nm,3:00j0j_a8FedsrgMyGz_0t20lD,3:00b0b_hdCGdDV8ysvz_0pO0hA,3:00808_8kmd4ux6koIz_0pO0gM,3:00505_geH4AoSc2mlz_0pO0hf,3:00j0j_49HG7cZWaFpz_0pO0gJ,3:00U0U_1XpUkZzo2FKz_07K0ak,3:00B0B_dmsYVh8JVLSz_0lW0eO">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 16:34" title="Fri 02 Jul 04:34:12 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7344390577.html" data-id="7344390577" class="result-title hdrlnk" id="postid_7344390577" >Tax credit and section 8 waitlist now available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343731893">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7343731893.html" class="result-image gallery" data-ids="3:00c0c_inCWVzre48lz_0r60i4,3:00J0J_g5NcgVVC97Xz_0CI0nm,3:00j0j_a8FedsrgMyGz_0t20lD,3:00b0b_hdCGdDV8ysvz_0pO0hA,3:00808_8kmd4ux6koIz_0pO0gM,3:00505_geH4AoSc2mlz_0pO0hf,3:00j0j_49HG7cZWaFpz_0pO0gJ,3:00U0U_1XpUkZzo2FKz_07K0ak,3:00B0B_dmsYVh8JVLSz_0lW0eO">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 16:34" title="Fri 02 Jul 04:34:08 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7343731893.html" data-id="7343731893" class="result-title hdrlnk" id="postid_7343731893" >Tax credit and section 8 waitlist now available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345401641">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-maintenance/7345401641.html" class="result-image gallery" data-ids="3:00s0s_47NWsYXpA8hz_0d40hq,3:00X0X_fSUHRnfyC2xz_0d40hq,3:00A0A_6Qat0I5g6nQz_0d40hq,3:00t0t_i9QnYs9Iu72z_0d40hq,3:01515_gfOcky91JS1z_0d40hq,3:00606_1eTZsaSDU7ez_0d40hq,3:00000_lqbJAiJbLu2z_0d40hq,3:00A0A_ckeq0UzNIp4z_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 15:39" title="Fri 02 Jul 03:39:38 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-maintenance/7345401641.html" data-id="7345401641" class="result-title hdrlnk" id="postid_7345401641" >Amazing maintenance &amp; management team!! YOU want to live here!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345400454">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-we-have-what-youre-looking/7345400454.html" class="result-image gallery" data-ids="3:00L0L_kYA8FNGn5iaz_0d60hq,3:00p0p_9NEkyI4bpQYz_0d60hq,3:00F0F_gvr6rW9prRXz_0d60hq,3:00U0U_7ZysyQVLMiUz_0d60hq,3:00K0K_9LhOQYzYonz_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 15:37" title="Fri 02 Jul 03:37:25 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-we-have-what-youre-looking/7345400454.html" data-id="7345400454" class="result-title hdrlnk" id="postid_7345400454" >WE  have what you&#39;re looking for!! Call us!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345355988">

        <a href="https://desmoines.craigslist.org/apa/d/lake-city-convenient-location-pet-free/7345355988.html" class="result-image gallery" data-ids="3:00W0W_80UqzWGSLAnz_0aT0ew,3:00d0d_6CvUVya82mOz_0aT0ew,3:00f0f_46imjdvFVOQz_0aT0ew,3:00H0H_lGjVQs4cCJBz_0aT0ew,3:00909_61x8Sg2PcD6z_0aT0ew,3:00404_iL2CVzRwmVmz_0jm0ew,3:00s0s_23wfCCHJMPcz_0aT0ew,3:00o0o_jzZNM3m0O4Nz_0aT0ew,3:00808_9XvCIKfCykzz_0aT0ew,3:00404_elZDA0pQQ6vz_0jm0ew,3:00S0S_jZPsVtgiYloz_0jm0ew">
                <span class="result-price">$660</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 14:19" title="Fri 02 Jul 02:19:45 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/lake-city-convenient-location-pet-free/7345355988.html" data-id="7345355988" class="result-title hdrlnk" id="postid_7345355988" >Convenient Location, Pet Free Community, Anyone Over 18 Can Apply</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$660</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Lake City, Near Fort Dodge)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7331610901">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-new-ownership/7331610901.html" class="result-image gallery" data-ids="3:00v0v_3lAtWNZ4LbTz_0hq0hq">
                <span class="result-price">$740</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 14:12" title="Fri 02 Jul 02:12:32 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-new-ownership/7331610901.html" data-id="7331610901" class="result-title hdrlnk" id="postid_7331610901" >New Management, New Ownership, Courtyard Views</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$740</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345333669">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-july-23-studio/7345333669.html" class="result-image gallery" data-ids="3:00f0f_6AOvcylWKAYz_0CH0t2,3:01313_kUBkJe7zbUnz_0fa07Z,3:00505_hxBoZo584I8z_0fa07Z,3:00Y0Y_khIg4jaqeqEz_0fa07Z,3:00z0z_kv86C4P52Xhz_0fa07Z">
                <span class="result-price">$758</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 13:36" title="Fri 02 Jul 01:36:07 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-july-23-studio/7345333669.html" data-id="7345333669" class="result-title hdrlnk" id="postid_7345333669" >READY JULY 23: STUDIO APARTMENT W/ BALCONY, ADT SECURITY</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$758</span>

                <span class="housing">
                    563ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7336973772" data-repost-of="5590645016">

        <a href="https://desmoines.craigslist.org/apa/d/bed-student-apartments-next-to-dmacc-in/7336973772.html" class="result-image gallery" data-ids="1:00i0i_8v8ioc3ExgV,1:00A0A_8y40jWC8YPa,1:00E0E_gDFEkiqdxH1,1:00T0T_5oGG6dMAdHv,1:00e0e_4d91vWkx55a,1:00Z0Z_hvg2FEAgfab,1:00f0f_kJjskxhT9pJ,1:00u0u_aX9NHb0WDst,1:00606_8Ci99U9NZu,1:00C0C_ihW5poBEanR,1:00w0w_cxKnO1YWRzH,1:00g0g_3vPIRCc4rmW,1:00U0U_jIfOBQCJTk0,1:00909_1XT3iaUsYH0">
                <span class="result-price">$585</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 12:50" title="Fri 02 Jul 12:50:08 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/bed-student-apartments-next-to-dmacc-in/7336973772.html" data-id="7336973772" class="result-title hdrlnk" id="postid_7336973772" >4 Bed Student Apartments Next to DMACC in Ankeny</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$585</span>

                <span class="housing">
                    4br -
                    1504ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (1351 SW Prairie Trail Pkwy, Ankeny IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343279122">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-laundry-in/7343279122.html" class="result-image gallery" data-ids="3:00h0h_9ub3H8ii38Jz_0sD0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 12:03" title="Fri 02 Jul 12:03:32 PM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-laundry-in/7343279122.html" data-id="7343279122" class="result-title hdrlnk" id="postid_7343279122" >Garages Available, Laundry in Each Building, Courtyard Views</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344249245">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-want-to-move/7344249245.html" class="result-image gallery" data-ids="3:00d0d_eEaZWMKd31Zz_0hq0hq">
                <span class="result-price">$745</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 11:32" title="Fri 02 Jul 11:32:16 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-want-to-move/7344249245.html" data-id="7344249245" class="result-title hdrlnk" id="postid_7344249245" >Want to move?</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$745</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7330691761" data-repost-of="4337845154">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-duplex-with-full/7330691761.html" class="result-image gallery" data-ids="3:00h0h_gvSIEgXc2uEz_0CI0pE,3:00M0M_d3AiR0S69qRz_0CI0pO,3:00J0J_e7d3zr3BN8bz_0CI0pO,3:01313_3w1U0KfGUFfz_0jm0t2,3:01616_aP8kAxOo5Mpz_0CI0pO,3:00T0T_4E4lHaP33xwz_0CI0pO,3:00C0C_lIbgRH6eFwpz_0CI0pO,3:00505_bV9736wA2Onz_05m083,3:01717_3Yfccriw8WLz_08305m,3:00000_3KoXAOrFL0Bz_08305m">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 11:03" title="Fri 02 Jul 11:03:10 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-duplex-with-full/7330691761.html" data-id="7330691761" class="result-title hdrlnk" id="postid_7330691761" >2 bedroom Duplex with full basement</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    768ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (1013 Kenyon Ave.)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345229318">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-modern-fully-equipped-bdr-in/7345229318.html" class="result-image gallery" data-ids="3:01515_cYN764Xsg5xz_04b038,3:00x0x_2nARhTUMYubz_04P02I,3:01414_eBjwxWSBnBqz_03D03D,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:01212_b7dXxbABqnzz_04b038,3:00G0G_fbk6yOaCjBbz_04Q02I,3:01717_eSwEeaQEYjJz_04b038">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 10:40" title="Fri 02 Jul 10:40:38 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-modern-fully-equipped-bdr-in/7345229318.html" data-id="7345229318" class="result-title hdrlnk" id="postid_7345229318" >Modern, fully equipped 2 BDR in great neighborhood!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    806ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345220378">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-everything-you-need-all/7345220378.html" class="result-image gallery" data-ids="3:00c0c_12vxiKfrorsz_04Q02I,3:00a0a_dDbKIDzObvsz_04b038,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:01212_b7dXxbABqnzz_04b038,3:00t0t_5LTY4FOqgKrz_04r02X,3:00m0m_iXp4AZFANN4z_04Q02I,3:00G0G_fbk6yOaCjBbz_04Q02I">
                <span class="result-price">$789</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 10:25" title="Fri 02 Jul 10:25:40 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-everything-you-need-all/7345220378.html" data-id="7345220378" class="result-title hdrlnk" id="postid_7345220378" >▶ Everything You Need. All Right Here at Somerset ◀</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$789</span>

                <span class="housing">
                    2br -
                    830ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345219341">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-youre-here-youre-home-youre/7345219341.html" class="result-image gallery" data-ids="3:00Z0Z_7dtsFj9BLRwz_04b038,3:01414_eBjwxWSBnBqz_03D03D,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:00L0L_bC9xVeNwPi6z_04r02X,3:00m0m_iXp4AZFANN4z_04Q02I,3:00t0t_5LTY4FOqgKrz_04r02X,3:00G0G_fbk6yOaCjBbz_04Q02I">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 10:23" title="Fri 02 Jul 10:23:52 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-youre-here-youre-home-youre/7345219341.html" data-id="7345219341" class="result-title hdrlnk" id="postid_7345219341" >▶ You&#39;re Here. You&#39;re Home. You&#39;re Happy. All at Somerset ◀</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    806ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345189424">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-duplex-in-johnston/7345189424.html" class="result-image gallery" data-ids="3:00A0A_esshWmzwr4bz_084063">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 10:13" title="Fri 02 Jul 10:13:49 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-duplex-in-johnston/7345189424.html" data-id="7345189424" class="result-title hdrlnk" id="postid_7345189424" >Nice duplex in Johnston School District. Three bedrooms!!!~</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334558510">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-ownership-grilling/7334558510.html" class="result-image gallery" data-ids="3:00Z0Z_522XR7awJxbz_0sD0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 10:02" title="Fri 02 Jul 10:02:31 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-ownership-grilling/7334558510.html" data-id="7334558510" class="result-title hdrlnk" id="postid_7334558510" >New Ownership, Grilling &amp; Picnic Ares, Swimming Pool with Sundeck</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7338538918" data-repost-of="7165224379">

        <a href="https://desmoines.craigslist.org/apa/d/pleasant-hill-peterson-place-apts-in/7338538918.html" class="result-image gallery" data-ids="3:01010_9p05Za4wkJg_0zF0qm,3:00707_6mjWGd52YCl_0CI0t2,3:00K0K_iB4zIjItQdg_0CI0t2,3:00I0I_fNgp0nfNGJo_0CI0t2,3:00H0H_kYYG88ZUkAA_0CI0t2,3:00d0d_b7Wc3Mq4qjz_0CH0t2,3:01616_a3IK1asVD5S_0CI0lN,3:00V0V_knks2WESDW2_0lM0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 09:47" title="Fri 02 Jul 09:47:06 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/pleasant-hill-peterson-place-apts-in/7338538918.html" data-id="7338538918" class="result-title hdrlnk" id="postid_7338538918" >PETERSON PLACE APTS IN PLEASANT HILL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Pleasant Hill)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7333609348" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7333609348.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 09:46" title="Fri 02 Jul 09:46:58 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7333609348.html" data-id="7333609348" class="result-title hdrlnk" id="postid_7333609348" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345197723" data-repost-of="7323890065">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-one-bedroom-available/7345197723.html" class="result-image gallery" data-ids="3:01616_afAykBF0dImz_0CH0t2,3:00f0f_bJlF67WY6BSz_0CI0t2,3:00F0F_ejnYp4sLj8ez_0CI0t2,3:00303_8VyrZTLguocz_0CI0t2,3:00X0X_gkkEC8WDGycz_0lM0t2,3:01111_5hwwWpWLgYOz_0As0rc,3:00101_8qEEa7uloU9z_0CI0t2">
                <span class="result-price">$700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 09:45" title="Fri 02 Jul 09:45:48 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-one-bedroom-available/7345197723.html" data-id="7345197723" class="result-title hdrlnk" id="postid_7345197723" >ONE BEDROOM AVAILABLE AT BRIARWOOD GRAND + FREE CABLE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (West Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345187524" data-repost-of="4875768559">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-one-bedroom-on-west-side/7345187524.html" class="result-image gallery" data-ids="3:00s0s_inDbhMk9pZ5z_0CI0t2,3:00202_bKth10oUjmPz_0t20CI,3:00n0n_gHf2LlprJGz_0t20CI,3:00T0T_3nMbSyeObO2z_0t20CI">
                <span class="result-price">$610</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 09:32" title="Fri 02 Jul 09:32:02 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-one-bedroom-on-west-side/7345187524.html" data-id="7345187524" class="result-title hdrlnk" id="postid_7345187524" >Nice one bedroom on west side</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$610</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345189470">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-duplex-in-johnston/7345189470.html" class="result-image gallery" data-ids="3:00A0A_esshWmzwr4bz_084063">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 09:29" title="Fri 02 Jul 09:29:54 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-duplex-in-johnston/7345189470.html" data-id="7345189470" class="result-title hdrlnk" id="postid_7345189470" >Nice duplex in Johnston School District. Three bedrooms!!!~</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345182972" data-repost-of="4867515487">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-historic-one-bedroom-on/7345182972.html" class="result-image gallery" data-ids="3:00505_ax707OJuQJGz_0hm0t2,3:00N0N_1lQKQMbQiRz_0CI0n9,3:00H0H_jXUg2fbCsk8z_0hm0t2,3:00W0W_1We5BVtqn0Wz_0gj0t2">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 09:20" title="Fri 02 Jul 09:20:48 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-historic-one-bedroom-on/7345182972.html" data-id="7345182972" class="result-title hdrlnk" id="postid_7345182972" >Historic One Bedroom on Grand -heat &amp; water included</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (2925 Grand Ave)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345162770">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-courtyard/7345162770.html" class="result-image gallery" data-ids="3:00202_dy0HWO8nL4Cz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 08:36" title="Fri 02 Jul 08:36:20 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-courtyard/7345162770.html" data-id="7345162770" class="result-title hdrlnk" id="postid_7345162770" >On-Site Manager, Courtyard Views, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345162473">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7345162473.html" class="result-image gallery" data-ids="3:00B0B_36aWE2qJkKhz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 08:35" title="Fri 02 Jul 08:35:40 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7345162473.html" data-id="7345162473" class="result-title hdrlnk" id="postid_7345162473" >24 Hour Emergency Maintenance, Grilling &amp; Picnic Ares, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345153893">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-spacious/7345153893.html" class="result-image gallery" data-ids="3:00E0E_2fF1a3kGQfFz_0dC09V,3:00000_14NrlFSQnM8z_0oc0fM,3:00E0E_8Y8XI2UPV5Qz_0ak07K,3:00D0D_74Hqv8WzlmXz_0ak07K,3:00R0R_ex6j4c3a48tz_0ak07K,3:00j0j_ghJIERqKkIsz_0ak07K,3:00E0E_4cjAF8xgJc4z_0ak07K,3:00Z0Z_552pil5l1NDz_0ak07K,3:00404_3xbJZ7RGUeAz_0ak07K,3:00M0M_1rMzIva106kz_0ak07K,3:01515_foVBaNw7uy0z_0ak07K">
                <span class="result-price">$730</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 08:21" title="Fri 02 Jul 08:21:28 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-spacious/7345153893.html" data-id="7345153893" class="result-title hdrlnk" id="postid_7345153893" >Affordable, Spacious &amp; Unbeatable 2 Bedroom Apartment Home!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$730</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345114743" data-repost-of="7313759217">

        <a href="https://desmoines.craigslist.org/apa/d/altoona-very-sharp-2br-home-725/7345114743.html" class="result-image gallery" data-ids="3:01313_f9GH5wcgXrSz_04c04c,3:00g0g_48XENDcaMuWz_0fu0ak,3:00A0A_jkQEtJYcO9qz_0fu0ak,3:01010_8sTKwQe3kDez_01C01C,3:00J0J_b0s7mbBMsVVz_01C01C,3:00i0i_gsHrAxM4l7xz_0fu0ak,3:00M0M_6tzy49PEYlaz_01C01C,3:00H0H_4MrL8r4aZKMz_07503x">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-02 05:17" title="Fri 02 Jul 05:17:05 AM">Jul  2</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/altoona-very-sharp-2br-home-725/7345114743.html" data-id="7345114743" class="result-title hdrlnk" id="postid_7345114743" >VERY SHARP 2BR HOME,  $725</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    980ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (ALTOONA AREA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7345052134" data-repost-of="7046876875">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apt-for-rent-ankeny-785/7345052134.html" class="result-image gallery" data-ids="3:00c0c_jusA5qViYQPz_0gP0bv,3:00404_4ayvaKjLDMbz_0he0bG,3:00H0H_ldEZ1SKfbJZz_0hq0by,3:00f0f_1JScrbzMKvMz_0gD0by,3:01313_62i3xU50TE2z_0h70bF,3:00c0c_2V0kjwmJIkYz_0hq0bA">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 21:10" title="Thu 01 Jul 09:10:54 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apt-for-rent-ankeny-785/7345052134.html" data-id="7345052134" class="result-title hdrlnk" id="postid_7345052134" >2 BEDROOM APT FOR RENT ANKENY $785</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (ANKENY)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344973724">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-fabulous-updated-apartbuilt/7344973724.html" class="result-image gallery" data-ids="3:00303_arD7lDgVk0Zz_0bB08A,3:00M0M_h18LwEDB0DLz_0bW08P,3:00k0k_70NBm5eQKkvz_06O08E,3:00D0D_f7jlGTDs8wKz_06W08Y">
                <span class="result-price">$639</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 17:37" title="Thu 01 Jul 05:37:59 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-fabulous-updated-apartbuilt/7344973724.html" data-id="7344973724" class="result-title hdrlnk" id="postid_7344973724" >Fabulous updated apart*built in beautiful 1904 home</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$639</span>

                <span class="housing">
                    1br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344973740">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-west-facing-views-unit-2bd/7344973740.html" class="result-image gallery" data-ids="3:01111_5egjyDGE4Dcz_06X08U,3:00X0X_3yAqAsD31Z9z_09L06Y,3:00g0g_5QUfTqlhLOaz_07708Y,3:01414_dJHb7Zmtk18z_06U08R,3:00f0f_6mF2lHkgb8Fz_07108V,3:00Z0Z_hLMCTUpKPCHz_06R08Q">
                <span class="result-price">$720</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 17:37" title="Thu 01 Jul 05:37:01 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-west-facing-views-unit-2bd/7344973740.html" data-id="7344973740" class="result-title hdrlnk" id="postid_7344973740" >west facing views unit  ~ 2bd/1bth downtown des moines duplex</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$720</span>

                <span class="housing">
                    2br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344964115">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-look-lease-restrictions/7344964115.html" class="result-image gallery" data-ids="3:00m0m_fpRyO11xqntz_0d40hq,3:00R0R_5RlOiS2MhKMz_0d40hq,3:01717_5uHgAEOr9vHz_0d40hq,3:00W0W_krU8St7nKgtz_0d40hq,3:00W0W_7kzant7VwNhz_0d40hq,3:00s0s_iQWhAOUlqBaz_0d40hq,3:00707_87Emk0PQFmrz_0d40hq,3:00p0p_iaQe4mrEbDjz_0d40hq">
                <span class="result-price">$747</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 17:09" title="Thu 01 Jul 05:09:16 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-look-lease-restrictions/7344964115.html" data-id="7344964115" class="result-title hdrlnk" id="postid_7344964115" >LOOK &amp; LEASE!! *restrictions apply* waived application fee!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$747</span>

                <span class="housing">
                    2br -
                    693ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344963174">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-first-months/7344963174.html" class="result-image gallery" data-ids="3:01212_fPtrBFsIdxvz_0d40hq,3:00o0o_fJp8sGusohXz_0d40hq,3:00J0J_Z9h7An7ngIz_0d40hq,3:00L0L_lQ34aGMNH0Vz_0d40hq,3:00L0L_6MidQhLaFIEz_0d40hq,3:00t0t_eSpGwW6w3s9z_0d40hq,3:00m0m_gEaXBngG6fJz_0d40hq,3:00e0e_akp75O0MBJBz_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 17:07" title="Thu 01 Jul 05:07:19 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-first-months/7344963174.html" data-id="7344963174" class="result-title hdrlnk" id="postid_7344963174" >$500 off the first months</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344962568">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-come-live-with-the-best-call/7344962568.html" class="result-image gallery" data-ids="3:00101_2201P2x4qdcz_0d60hq,3:00j0j_drVasDiCNKOz_0d60hq,3:01111_bcdYayQeyTBz_0d60hq,3:00F0F_fSgN17rTnjWz_0d60hq,3:01616_b2FzszFlK9bz_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 17:06" title="Thu 01 Jul 05:06:07 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-come-live-with-the-best-call/7344962568.html" data-id="7344962568" class="result-title hdrlnk" id="postid_7344962568" >Come live with the BEST!! Call for details!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344959479">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-530-kenyon/7344959479.html" class="result-image gallery" data-ids="3:00F0F_5PEHCCwy8SKz_0CI0lN,3:00a0a_iaeK2l0ow16z_0lN0CI,3:00K0K_SWgUdDwYYGz_0lN0CI,3:00x0x_aSgN3SJOvLQz_0lN0CI,3:00T0T_hJARJTUQFoaz_0lN0CI,3:00707_hJsCC8U5WNiz_0CI0lN,3:00G0G_awue1vurBx7z_0lN0CI">
                <span class="result-price">$795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:59" title="Thu 01 Jul 04:59:25 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-530-kenyon/7344959479.html" data-id="7344959479" class="result-title hdrlnk" id="postid_7344959479" >530 E Kenyon</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$795</span>

                <span class="housing">
                    2br -
                    750ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344944793">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-221-mckinley-bed-15-bath/7344944793.html" class="result-image gallery" data-ids="3:01717_1AZTQES88G0z_0CI0lN,3:00D0D_5LvFOX2FSaez_0CI0lN,3:01111_2jwsdCoDE3Hz_0CI0lN,3:00E0E_7uByPrv2RVkz_0lN0CI,3:00000_jr5SeWEZbiSz_0CI0lN,3:00e0e_crRba3CAdcXz_0CI0lN,3:00s0s_fUNimOHBDC2z_0lN0CI,3:00q0q_1E78SiAlEQez_0lN0CI">
                <span class="result-price">$795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:28" title="Thu 01 Jul 04:28:59 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-221-mckinley-bed-15-bath/7344944793.html" data-id="7344944793" class="result-title hdrlnk" id="postid_7344944793" >221 E McKinley 2 bed 1.5 bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$795</span>

                <span class="housing">
                    2br -
                    750ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334621270">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-th-st-for-rent-1bedroom/7334621270.html" class="result-image gallery" data-ids="3:00m0m_2FIJxyb0L5Ez_0gl0t2,3:00y0y_e1uu3npAUZez_0wg0ia,3:00000_iyJ63b9b4A4z_0wg0ia,3:01717_3zWw8c2raJYz_0gl0t2,3:01111_8hUnD6T8Ay3z_0gl0t2,3:00I0I_1o4bzZR58ouz_0wg0ia,3:01313_lTuasA7l2eNz_0wg0ia,3:00v0v_3AmKEnPcDVmz_0gl0t2,3:00606_4pVyUTmBD8gz_0wg0ia,3:00m0m_geBiwMVEdN6z_0gl0t2,3:00C0C_bS3NPiqT38bz_0gl0t2">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:10" title="Thu 01 Jul 04:10:38 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-th-st-for-rent-1bedroom/7334621270.html" data-id="7334621270" class="result-title hdrlnk" id="postid_7334621270" >1141 26th St For Rent 1bedroom</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334695334">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-2200-stanton-bed-for-rent/7334695334.html" class="result-image gallery" data-ids="3:00b0b_4i48seF7ZqVz_0CI0t2,3:00k0k_19uNVkkT4Hlz_0CI0t2,3:00u0u_7wWRGXis9MQz_0lM0t2,3:00p0p_78v90jlE8wZz_0lM0t2,3:00b0b_5ftyDEtZf7Vz_0lM0t2,3:00m0m_CdhIfltHTMz_0lM0t2,3:00909_aHWQyLwHAIlz_0lM0t2,3:00i0i_dHyUjSAcsctz_0lM0t2,3:00m0m_d2jvbqxFWEPz_0lM0t2,3:00P0P_6Oz2JugOFixz_0lM0t2">
                <span class="result-price">$795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:10" title="Thu 01 Jul 04:10:35 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-2200-stanton-bed-for-rent/7334695334.html" data-id="7334695334" class="result-title hdrlnk" id="postid_7334695334" >2200 Stanton 1 Bed For Rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$795</span>

                <span class="housing">
                    1br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7337501674">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-2221-stanton-bed-bath/7337501674.html" class="result-image gallery" data-ids="3:00F0F_7U7KpNdaEkjz_0CI0t2,3:00b0b_hAPYVwBZDDGz_0CI0t2,3:00Z0Z_aUuRN6jKxOyz_0CI0t2,3:00Y0Y_6Gho5hxn8GBz_0CI0t2,3:00B0B_bC1EaIx5v8kz_0CI0t2,3:00o0o_1SxzsXsBZlfz_0CI0t2,3:01616_YKeBqMPk0Pz_0CI0t2,3:00T0T_6LDTke6zP7Vz_0CI0t2,3:01010_igWCONk6K7Hz_0CI0t2,3:00C0C_fEOnIjmgDRbz_0t20CI,3:00L0L_1SJ8aCde2Aqz_0t20CI,3:01010_dNdmAlwCvXqz_0t20CI,3:00u0u_hkcDxAjNTXZz_0t20CI,3:00f0f_8PnSIJpYSNVz_0t20CI,3:00B0B_lTxunjT4RVmz_0t20CI,3:00404_8V6oVD5MRxCz_0t20CI,3:01414_ciJuKq98d5Gz_0t20CI,3:01616_klo5ePSqm5zz_0CI0t2,3:00202_5ou1lpNujznz_0t20CI,3:00l0l_25ZB16d9Cjuz_0CI0t2">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:10" title="Thu 01 Jul 04:10:24 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-2221-stanton-bed-bath/7337501674.html" data-id="7337501674" class="result-title hdrlnk" id="postid_7337501674" >2221 Stanton 1 bed 1 bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7337496993">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-2917-grand-ave-studio-for/7337496993.html" class="result-image gallery" data-ids="3:00808_dMtyaPKlQtCz_0hm0d2,3:00R0R_9vKaygzMjUnz_0hn0f4,3:00Q0Q_fi1IxBha6Ngz_0hm0d6,3:00909_hoK2txKXW4cz_0hm0ne,3:00j0j_iV9EHygxmvSz_0hm0dk,3:00q0q_kZIH9KZWwm9z_0hm0c8">
                <span class="result-price">$625</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:10" title="Thu 01 Jul 04:10:19 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-2917-grand-ave-studio-for/7337496993.html" data-id="7337496993" class="result-title hdrlnk" id="postid_7337496993" >2917 Grand Ave Studio For Rent!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$625</span>


                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7337490032">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-1731-high-st-1bed-1bath/7337490032.html" class="result-image gallery" data-ids="3:01515_3YhIwgmNStpz_0hq0cD,3:00Z0Z_jDVfdER7o0pz_0hn0ne,3:00N0N_aXT2hmWHqC1z_0hn0ne,3:00l0l_bUvWLR8Ye91z_0hm0ne,3:00F0F_1Wit0rgs8Ihz_0ho0ne,3:01313_cbY9ro9ilROz_0hn0ne,3:00U0U_kROG3pJLBwGz_0hn0d4">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 16:10" title="Thu 01 Jul 04:10:01 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-1731-high-st-1bed-1bath/7337490032.html" data-id="7337490032" class="result-title hdrlnk" id="postid_7337490032" >1731 High St 1bed 1bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343737115">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-ample/7343737115.html" class="result-image gallery" data-ids="3:01414_dshajh4TQwlz_0hq0hq">
                <span class="result-price">$745</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 15:20" title="Thu 01 Jul 03:20:34 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-ample/7343737115.html" data-id="7343737115" class="result-title hdrlnk" id="postid_7343737115" >Courtyard Views, Ample Parking, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$745</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7340338735">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-laundry-in/7340338735.html" class="result-image gallery" data-ids="3:00f0f_9snB6dhyoJrz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 14:49" title="Thu 01 Jul 02:49:13 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-laundry-in/7340338735.html" data-id="7340338735" class="result-title hdrlnk" id="postid_7340338735" >On-Site Manager, Laundry in Each Building, Swimming Pool with Sundeck</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344855109">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-be-the-best-with-the-best/7344855109.html" class="result-image gallery" data-ids="3:00a0a_8liXrJDunm2z_0d40hq,3:00505_fEPDumik318z_0d40hq,3:00A0A_kPVREQOGaunz_0d40hq,3:01414_3ugtvI0uORcz_0d40hq,3:01616_lS60S1wu5KYz_0d40hq,3:00606_irJxcTPj1A5z_0d40hq,3:01111_58Y4r58pz4Cz_0d40hq,3:00Z0Z_5rHCHG3Ffttz_0d40hq">
                <span class="result-price">$747</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 13:43" title="Thu 01 Jul 01:43:33 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-be-the-best-with-the-best/7344855109.html" data-id="7344855109" class="result-title hdrlnk" id="postid_7344855109" >BE THE BEST, WITH THE BEST!! CHECK US OUT!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$747</span>

                <span class="housing">
                    2br -
                    693ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344854560">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-drake-neighborhood-close-to/7344854560.html" class="result-image gallery" data-ids="3:00i0i_4DfxeWdniFGz_0d40hq,3:00S0S_9D4M7e2JUX9z_0d40hq,3:01111_dadNrLugBx9z_0d40hq,3:00z0z_ikZvTKeRg8Sz_0d40hq,3:00i0i_blgU5ytS6b8z_0d40hq,3:00707_bXpTWLe4teFz_0d40hq,3:00101_hYXxwVWRfufz_0d40hq,3:00u0u_2FBNVUpYhcrz_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 13:42" title="Thu 01 Jul 01:42:35 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-drake-neighborhood-close-to/7344854560.html" data-id="7344854560" class="result-title hdrlnk" id="postid_7344854560" >Drake neighborhood!! Close to everything!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344819956">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-this-home-has-an-open-floor/7344819956.html" class="result-image gallery" data-ids="3:00b0b_3vfgIVBeAUz_08g05v,3:00g0g_giZj5uVKo0Qz_08g05v,3:00l0l_kuzOJRveHRgz_08g05v">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 13:33" title="Thu 01 Jul 01:33:35 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-this-home-has-an-open-floor/7344819956.html" data-id="7344819956" class="result-title hdrlnk" id="postid_7344819956" >This home has an open floor plan with an abundance of natural light sh</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    3br -
                    1250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344848967">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-first-months/7344848967.html" class="result-image gallery" data-ids="3:00B0B_857rDeNGrL5z_0d60hq,3:00S0S_2uEEO5H9zevz_0d60hq,3:00j0j_j2WKyY7qf6vz_0d60hq,3:00d0d_jVLX2pn0hGlz_0d60hq,3:00h0h_azK5c5HyHyGz_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 13:32" title="Thu 01 Jul 01:32:59 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-first-months/7344848967.html" data-id="7344848967" class="result-title hdrlnk" id="postid_7344848967" >$500 off the first months</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7340338332">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-swimming/7340338332.html" class="result-image gallery" data-ids="3:00G0G_cUeqz8w5Ruez_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 13:18" title="Thu 01 Jul 01:18:32 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-swimming/7340338332.html" data-id="7340338332" class="result-title hdrlnk" id="postid_7340338332" >Courtyard Views, Swimming Pool with Sundeck, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7341829576">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-new/7341829576.html" class="result-image gallery" data-ids="3:00y0y_5RLQIhJmstTz_0hq0hq">
                <span class="result-price">$745</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 12:44" title="Thu 01 Jul 12:44:12 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-new/7341829576.html" data-id="7341829576" class="result-title hdrlnk" id="postid_7341829576" >Extra Storage Available, New Management, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$745</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344806674">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-love-coming-home-love-living/7344806674.html" class="result-image gallery" data-ids="3:00D0D_74Hqv8WzlmXz_0ak07K,3:00000_14NrlFSQnM8z_0oc0fM,3:00E0E_8Y8XI2UPV5Qz_0ak07K,3:00E0E_4cjAF8xgJc4z_0ak07K,3:00Z0Z_552pil5l1NDz_0ak07K,3:00X0X_eDuqGdwcZr6z_0CI0m7,3:00404_3xbJZ7RGUeAz_0ak07K,3:00M0M_1rMzIva106kz_0ak07K,3:01515_foVBaNw7uy0z_0ak07K">
                <span class="result-price">$730</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 12:21" title="Thu 01 Jul 12:21:15 PM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-love-coming-home-love-living/7344806674.html" data-id="7344806674" class="result-title hdrlnk" id="postid_7344806674" >LOVE Coming Home, LOVE Living Here! Affordable 2 Bedroom Apt Home!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$730</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7341830876">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-garages/7341830876.html" class="result-image gallery" data-ids="3:00M0M_kRY2sPQtJtTz_0sD0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 10:43" title="Thu 01 Jul 10:43:14 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-garages/7341830876.html" data-id="7341830876" class="result-title hdrlnk" id="postid_7341830876" >Courtyard Views, Garages Available, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344731875">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-spacious-living-front-porch/7344731875.html" class="result-image gallery" data-ids="3:00I0I_lqBvLp3PKwAz_0cU08B,3:01212_lQYFugKTj9Wz_0ew09C,3:00W0W_dopFlM3s5OGz_0ev09G">
                <span class="result-price">$670</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 10:24" title="Thu 01 Jul 10:24:24 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-spacious-living-front-porch/7344731875.html" data-id="7344731875" class="result-title hdrlnk" id="postid_7344731875" >SPACIOUS LIVING FRONT PORCH INVITES YOU INTO THIS AND DINING WELCOMING</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$670</span>

                <span class="housing">
                    3br -
                    1211ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344728045">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-gracious-square-foot/7344728045.html" class="result-image gallery" data-ids="3:00404_fS32H7jbyq0z_0cU0cU,3:00L0L_1aL7ZnKXa7Rz_0CI0pO,3:00L0L_1aL7ZnKXa7Rz_0CI0pO,3:00K0K_5jdtCeTsdIAz_0CI0pO,3:00s0s_l8LiRaTqh9mz_0CI0pO,3:01010_bYdnEHR89dGz_0CI0pO,3:00v0v_hT6nEPJ0tyxz_0ak07K">
                <span class="result-price">$760</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 10:06" title="Thu 01 Jul 10:06:26 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-gracious-square-foot/7344728045.html" data-id="7344728045" class="result-title hdrlnk" id="postid_7344728045" >Gracious  square foot apartment in West Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$760</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (West Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344725802">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-modern-fully-equipped-bdr-in/7344725802.html" class="result-image gallery" data-ids="3:01414_hwf9DM4oy5Vz_0cU0cU,3:00a0a_eeJ0eZaZMtKz_0CI0q8,3:00p0p_2sXIJCB7IkBz_0CI0r7,3:00r0r_DrpTCjzC2Az_0CI0rH,3:00X0X_kenlmmrB31ez_0CI0qO,3:00x0x_fYGQoiLVHtjz_0CI0p6,3:00j0j_4v9ohhgIGqSz_0k00si">
                <span class="result-price">$760</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 10:02" title="Thu 01 Jul 10:02:49 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-modern-fully-equipped-bdr-in/7344725802.html" data-id="7344725802" class="result-title hdrlnk" id="postid_7344725802" >Modern, fully equipped 1 BDR in great neighborhood!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$760</span>

                <span class="housing">
                    1br -
                    623ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (West Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344724681">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-gracious-623-sq-ft-square/7344724681.html" class="result-image gallery" data-ids="3:00M0M_eG5gihyWwEMz_0hq0hq,3:00x0x_fYGQoiLVHtjz_0CI0p6,3:00r0r_DrpTCjzC2Az_0CI0rH,3:00r0r_DrpTCjzC2Az_0CI0rH,3:00p0p_2sXIJCB7IkBz_0CI0r7,3:00p0p_2sXIJCB7IkBz_0CI0r7,3:00X0X_kenlmmrB31ez_0CI0qO,3:01010_5Hs8pBJKnlcz_0kZ0t2,3:00M0M_5baSsB6aKraz_0CI0qr,3:00j0j_4v9ohhgIGqSz_0k00si">
                <span class="result-price">$760</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 10:00" title="Thu 01 Jul 10:00:40 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-gracious-623-sq-ft-square/7344724681.html" data-id="7344724681" class="result-title hdrlnk" id="postid_7344724681" >Gracious 623 Sq. Ft. square foot apartment in West Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$760</span>

                <span class="housing">
                    1br -
                    623ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (West Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344704261">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7344704261.html" class="result-image gallery" data-ids="3:00c0c_inCWVzre48lz_0r60i4,3:00J0J_g5NcgVVC97Xz_0CI0nm,3:00j0j_a8FedsrgMyGz_0t20lD,3:00b0b_hdCGdDV8ysvz_0pO0hA,3:00808_8kmd4ux6koIz_0pO0gM,3:00505_geH4AoSc2mlz_0pO0hf,3:00j0j_49HG7cZWaFpz_0pO0gJ,3:00U0U_1XpUkZzo2FKz_07K0ak,3:00B0B_dmsYVh8JVLSz_0lW0eO">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 10:00" title="Thu 01 Jul 10:00:24 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-tax-credit-and-section/7344704261.html" data-id="7344704261" class="result-title hdrlnk" id="postid_7344704261" >Tax credit and section 8 waitlist now available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344699089">

        <a href="https://desmoines.craigslist.org/apa/d/pleasant-hill-canterbury-park-apartments/7344699089.html" class="result-image gallery" data-ids="3:00O0O_2DJ1ItkBxjEz_0ak07K,3:00I0I_jHXHrlAZyHGz_0ak07K,3:00t0t_babxDxqLd2Xz_0ak07K,3:00j0j_e2CoKBRasQ4z_0ak07K,3:00m0m_csbhA5sfrWXz_0ak07K,3:00p0p_iliwNJBxpEOz_0ak07K,3:00101_ekVdgqsQF8Tz_0ak07K,3:00j0j_inOuUJY221az_0ak07K,3:00P0P_NDwDEF43Ytz_0ak07K,3:00L0L_kJkq4V1BCzBz_0ak07K,3:00I0I_eG3ejlOMYhfz_0ak07K,3:00404_5jWuRa6OtPsz_0ak07K,3:00101_cKfIY4FyClRz_0au07S,3:00O0O_b6bIkSp5vhbz_0ak07K">
                <span class="result-price">$780</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 09:11" title="Thu 01 Jul 09:11:17 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/pleasant-hill-canterbury-park-apartments/7344699089.html" data-id="7344699089" class="result-title hdrlnk" id="postid_7344699089" >Canterbury Park Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$780</span>

                <span class="housing">
                    2br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344685846" data-repost-of="7173323942">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-live-well-at-the-goldbriar/7344685846.html" class="result-image gallery" data-ids="3:00w0w_kjmR5yOIdakz_0ne0hq,3:00k0k_9Z9TG8ZcbgHz_0ne0hq,3:00J0J_b97RIGThM1sz_0qc0hq,3:00707_iuJnPDKHf6pz_0ne0hq,3:00k0k_e524XvmHz6oz_0ne0hq,3:00505_3hrA1OLAG7sz_0nR0hq">
                <span class="result-price">$625</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 08:42" title="Thu 01 Jul 08:42:27 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-live-well-at-the-goldbriar/7344685846.html" data-id="7344685846" class="result-title hdrlnk" id="postid_7344685846" >Live Well at the Goldbriar Chateau</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$625</span>

                <span class="housing">
                    1br -
                    510ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (5555 SW 9th St, Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7341831187">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7341831187.html" class="result-image gallery" data-ids="3:00L0L_fBT0Zur6Afsz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 08:39" title="Thu 01 Jul 08:39:13 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7341831187.html" data-id="7341831187" class="result-title hdrlnk" id="postid_7341831187" >Swimming Pool with Sundeck, Laundry in Each Building, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344677986">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-apt-located-near/7344677986.html" class="result-image gallery" data-ids="3:00E0E_2fF1a3kGQfFz_0dC09V,3:00R0R_ex6j4c3a48tz_0ak07K,3:00j0j_ghJIERqKkIsz_0ak07K,3:00000_14NrlFSQnM8z_0oc0fM,3:00E0E_4cjAF8xgJc4z_0ak07K,3:00H0H_6zjxejWwDvcz_0ak07K,3:00404_3xbJZ7RGUeAz_0ak07K,3:00M0M_1rMzIva106kz_0ak07K,3:01515_foVBaNw7uy0z_0ak07K">
                <span class="result-price">$730</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 08:22" title="Thu 01 Jul 08:22:35 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-apt-located-near/7344677986.html" data-id="7344677986" class="result-title hdrlnk" id="postid_7344677986" >2 Bedroom Apt Located Near Easter Lake Love Where You Live!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$730</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7332165453" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cableno/7332165453.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 07:25" title="Thu 01 Jul 07:25:42 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cableno/7332165453.html" data-id="7332165453" class="result-title hdrlnk" id="postid_7332165453" >MOVE IN SPECIAL- FREE CABLE~NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344658182" data-repost-of="7323890065">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-one-bedroom-available/7344658182.html" class="result-image gallery" data-ids="3:01616_afAykBF0dImz_0CH0t2,3:00f0f_bJlF67WY6BSz_0CI0t2,3:00F0F_ejnYp4sLj8ez_0CI0t2,3:00303_8VyrZTLguocz_0CI0t2,3:00X0X_gkkEC8WDGycz_0lM0t2,3:01111_5hwwWpWLgYOz_0As0rc,3:00101_8qEEa7uloU9z_0CI0t2">
                <span class="result-price">$700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-07-01 07:24" title="Thu 01 Jul 07:24:18 AM">Jul  1</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-one-bedroom-available/7344658182.html" data-id="7344658182" class="result-title hdrlnk" id="postid_7344658182" >ONE BEDROOM AVAILABLE AT BRIARWOOD GRAND + FREE CABLE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (West Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7342392317">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7342392317.html" class="result-image gallery" data-ids="3:00i0i_5OxlAT5nOeZz_0hq0hq">
                <span class="result-price">$745</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 17:56" title="Wed 30 Jun 05:56:33 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7342392317.html" data-id="7342392317" class="result-title hdrlnk" id="postid_7342392317" >Extra Storage Available, Laundry in Each Building, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$745</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344484428">

        <a href="https://desmoines.craigslist.org/apa/d/grinnell-spring-into-spaulding-lofts/7344484428.html" class="result-image gallery" data-ids="3:00000_8NV4e0p1h6kz_0ak07K,3:00x0x_exv9ffbkHROz_0ak07K,3:00G0G_81Sm6gvVFcZz_0ak07K,3:00s0s_aZ1homn5NfHz_0ak07K,3:00J0J_hPF8fppZzY7z_089084,3:00P0P_3GUQHNzgHw0z_0ak07K,3:00g0g_2e3qAcyTxpNz_0ak07K">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 17:03" title="Wed 30 Jun 05:03:57 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grinnell-spring-into-spaulding-lofts/7344484428.html" data-id="7344484428" class="result-title hdrlnk" id="postid_7344484428" >*Spring Into Spaulding Lofts</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    1br -
                    703ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Grinnell)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344483341" data-repost-of="7144001432">

        <a href="https://desmoines.craigslist.org/apa/d/grinnell-gracious-703-sf-apartment-in/7344483341.html" class="result-image gallery" data-ids="3:00T0T_2cxPrNtNeLz_0gw0gw,3:00P0P_3GUQHNzgHw0z_0ak07K,3:00E0E_h91myili0wkz_0ak07K,3:00808_fQCzRg7xwJPz_0ak07K,3:00i0i_8AKmeTYAqjJz_0ak07K,3:00d0d_9HxJkviTegdz_0ak07K">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 17:01" title="Wed 30 Jun 05:01:32 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grinnell-gracious-703-sf-apartment-in/7344483341.html" data-id="7344483341" class="result-title hdrlnk" id="postid_7344483341" >Gracious 703 sf apartment in Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    1br -
                    703ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344475377">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-july-23-fully-updated/7344475377.html" class="result-image gallery" data-ids="3:00f0f_6AOvcylWKAYz_0CH0t2,3:00505_hxBoZo584I8z_0fa07Z,3:00z0z_kv86C4P52Xhz_0fa07Z,3:00Y0Y_khIg4jaqeqEz_0fa07Z,3:01313_kUBkJe7zbUnz_0fa07Z">
                <span class="result-price">$761</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 16:44" title="Wed 30 Jun 04:44:31 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-july-23-fully-updated/7344475377.html" data-id="7344475377" class="result-title hdrlnk" id="postid_7344475377" >READY JULY 23: FULLY UPDATED STUDIO APARTMENT W/ BALCONY, ADT SECURITY</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$761</span>

                <span class="housing">
                    563ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344456375">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-drake-neighborhood-close-to/7344456375.html" class="result-image gallery" data-ids="3:00P0P_7LDrGBrtftwz_0d40hq,3:00606_jaGnDACHc77z_0d40hq,3:00e0e_ki2dTc4IMnQz_0d40hq,3:00C0C_eu9Qpj5dspUz_0d40hq,3:00S0S_ezCVlcwxGGGz_0d40hq,3:00R0R_c10ACZEwbHdz_0d40hq,3:00303_82Q6j31yXfCz_0d40hq,3:00505_2rHtGZMjJYCz_0d40hq">
                <span class="result-price">$747</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 16:05" title="Wed 30 Jun 04:05:48 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-drake-neighborhood-close-to/7344456375.html" data-id="7344456375" class="result-title hdrlnk" id="postid_7344456375" >Drake neighborhood!! Close to everything!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$747</span>

                <span class="housing">
                    2br -
                    693ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344455681">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-close-to-everything-amazing/7344455681.html" class="result-image gallery" data-ids="3:00d0d_2EQTHvFvXQGz_0d40hq,3:00V0V_iix0WiAXj8yz_0d40hq,3:00F0F_b4raSlzvvrEz_0d40hq,3:00M0M_jHpTqxY9CBfz_0d40hq,3:00C0C_lmQX0aTzJBsz_0d40hq,3:00l0l_fCZamz4SJ6Fz_0d40hq,3:00k0k_alTT7vIYd6ez_0d40hq,3:00H0H_hIbFYDjuE3Jz_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 16:04" title="Wed 30 Jun 04:04:37 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-close-to-everything-amazing/7344455681.html" data-id="7344455681" class="result-title hdrlnk" id="postid_7344455681" >Close to everything! Amazing move in special! Make us your next home!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344454372">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-location-call-and/7344454372.html" class="result-image gallery" data-ids="3:00u0u_iPNVNwNHzIqz_0d60hq,3:00Y0Y_1xT2rGsjeoNz_0d60hq,3:00r0r_1KXv80UrO76z_0d60hq,3:00A0A_gKjoMMHITOjz_0d60hq,3:00G0G_e5HyRI6dPkBz_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 16:02" title="Wed 30 Jun 04:02:00 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-location-call-and/7344454372.html" data-id="7344454372" class="result-title hdrlnk" id="postid_7344454372" >Amazing location! Call and inquire today!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7342392771">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-24/7342392771.html" class="result-image gallery" data-ids="3:01717_a2WzXYrot5Zz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 15:52" title="Wed 30 Jun 03:52:33 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-24/7342392771.html" data-id="7342392771" class="result-title hdrlnk" id="postid_7342392771" >Extra Storage Available, 24 Hour Emergency Maintenance, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344444980">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-available-now/7344444980.html" class="result-image gallery" data-ids="3:00P0P_baMagwp7mViz_0d40hq,3:00T0T_29VRllqoptQz_0d40hq,3:00b0b_6MzeH3E6lspz_0d40hq,3:00909_iMjzUzguEopz_0d40hq,3:00p0p_f0dfh2XZXxqz_0d40hq,3:00P0P_b7rw61CHeQcz_0d40hq,3:00q0q_14wYXA6yKYOz_0d40hq,3:00T0T_7A4ofkoWsDVz_0d40hq">
                <span class="result-price">$747</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 15:43" title="Wed 30 Jun 03:43:26 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-available-now/7344444980.html" data-id="7344444980" class="result-title hdrlnk" id="postid_7344444980" >2 bedroom available now!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$747</span>

                <span class="housing">
                    2br -
                    693ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344444435">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-1st-months-rent/7344444435.html" class="result-image gallery" data-ids="3:00N0N_d2LYKEjckXwz_0d40hq,3:00H0H_4E2KJ1fiRtPz_0d40hq,3:00H0H_45PQv1HFL8Yz_0d40hq,3:00909_bGUkFGMK4tGz_0d40hq,3:01515_dHpTB0ljNwVz_0d40hq,3:00k0k_c035nhFueLtz_0d40hq,3:00h0h_44ULHztvnsz_0d40hq,3:00g0g_aSS5FbgbOeXz_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 15:42" title="Wed 30 Jun 03:42:19 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-1st-months-rent/7344444435.html" data-id="7344444435" class="result-title hdrlnk" id="postid_7344444435" >$500 off the 1st months rent!! *limited time*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344443300">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-in-specials-call/7344443300.html" class="result-image gallery" data-ids="3:00808_fdMWbfDlkmgz_0d60hq,3:00909_hALTih4qDGbz_0d60hq,3:00l0l_ksLRQkIc0Mvz_0d60hq,3:01212_7UfaH8ZMoPKz_0d60hq,3:00w0w_koYEBfP38xJz_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 15:40" title="Wed 30 Jun 03:40:03 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-in-specials-call/7344443300.html" data-id="7344443300" class="result-title hdrlnk" id="postid_7344443300" >move in specials!! Call &amp; inquire today!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344428938">

        <a href="https://desmoines.craigslist.org/apa/d/grimes-weve-found-your-next-apartment/7344428938.html" class="result-image gallery" data-ids="3:00707_7lTSuwCO8nwz_0w40lo,3:00V0V_3LKMfF0zUmtz_0wg0lv,3:00T0T_krOgTvVx2kxz_0w40lo,3:00n0n_hDVxHnsWKRoz_0wg0lv,3:00Y0Y_eWsxNTqEZMBz_0w40lo,3:00T0T_bFk8qdJAuymz_0w40lo">
                <span class="result-price">$697</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 15:28" title="Wed 30 Jun 03:28:13 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grimes-weve-found-your-next-apartment/7344428938.html" data-id="7344428938" class="result-title hdrlnk" id="postid_7344428938" >We’ve found your next apartment, and it’s amazing!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$697</span>

                <span class="housing">
                    2br -
                    850ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Grimes)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343277329">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7343277329.html" class="result-image gallery" data-ids="3:00303_eeW8fqYV98Yz_0hq0hq">
                <span class="result-price">$745</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 14:28" title="Wed 30 Jun 02:28:14 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7343277329.html" data-id="7343277329" class="result-title hdrlnk" id="postid_7343277329" >Swimming Pool with Sundeck, Grilling &amp; Picnic Ares, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$745</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344388393">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-available/7344388393.html" class="result-image gallery" data-ids="3:00606_5JT0FcoH5L8z_0d40hq,3:00i0i_e7BRTeYFdBIz_0d40hq,3:00W0W_2HLLAjtASHzz_0d40hq,3:00w0w_fsLCuoGrde0z_0d40hq,3:00K0K_6KTx6Y9u0fjz_0d40hq,3:00J0J_hslim5gFrLNz_0d40hq,3:00x0x_hMx6oL8pc6xz_0d40hq,3:00X0X_1yRCwGP4FFsz_0d40hq">
                <span class="result-price">$747</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 14:01" title="Wed 30 Jun 02:01:37 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-available/7344388393.html" data-id="7344388393" class="result-title hdrlnk" id="postid_7344388393" >2 bedroom available!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$747</span>

                <span class="housing">
                    2br -
                    693ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344387857">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-first-months-rent/7344387857.html" class="result-image gallery" data-ids="3:00909_5CHAK4Xzjluz_0d40hq,3:01111_jN3EE0tOtN8z_0d40hq,3:01313_bUpZg282aFaz_0d40hq,3:00V0V_aN05e9PXzE7z_0d40hq,3:00h0h_5xCHNDbwLEWz_0d40hq,3:00s0s_9sEP2ufW9u0z_0d40hq,3:00c0c_eTiEvstJHJXz_0d40hq,3:00j0j_jlcNgbjwdczz_0d40hq">
                <span class="result-price">$716</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 14:00" title="Wed 30 Jun 02:00:40 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-first-months-rent/7344387857.html" data-id="7344387857" class="result-title hdrlnk" id="postid_7344387857" >$500 off the first months RENT!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$716</span>

                <span class="housing">
                    1br -
                    625ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344386785" data-repost-of="7339869700">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-watrous-apartments-now/7344386785.html" class="result-image gallery" data-ids="3:00G0G_6Qg3a5x2hqoz_0ha0dC,3:00t0t_1Lv602FYIz6z_0k00dl,3:00z0z_gPSMBnFI43Yz_0k00dl,3:00404_dyofIF6x81fz_0k00dl,3:00Q0Q_qYoRdC03HUz_0k00dl,3:00q0q_1IRqD1PWIlez_0k00dl">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 13:58" title="Wed 30 Jun 01:58:42 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-watrous-apartments-now/7344386785.html" data-id="7344386785" class="result-title hdrlnk" id="postid_7344386785" >Watrous Apartments Now Leasing! Move In Ready!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Watrous)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344386691">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-1st-months-rent/7344386691.html" class="result-image gallery" data-ids="3:00T0T_246jtAWYzxTz_0d60hq,3:00U0U_ijKl7GNqPDfz_0d60hq,3:01414_3YAVL2Xjk1Yz_0d60hq,3:00c0c_5AjOHpcjlZ0z_0d60hq,3:01313_2aR3T7QU69iz_0d60hq">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 13:58" title="Wed 30 Jun 01:58:32 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-500-off-the-1st-months-rent/7344386691.html" data-id="7344386691" class="result-title hdrlnk" id="postid_7344386691" >$500 off the 1st months rent!! *limited time*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    1br -
                    505ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344374867">

        <a href="https://desmoines.craigslist.org/apa/d/lake-city-well-managed-building-laundry/7344374867.html" class="result-image gallery" data-ids="3:00o0o_jzZNM3m0O4Nz_0aT0ew,3:00d0d_6CvUVya82mOz_0aT0ew,3:00808_9XvCIKfCykzz_0aT0ew,3:00H0H_lGjVQs4cCJBz_0aT0ew,3:00404_iL2CVzRwmVmz_0jm0ew,3:00909_61x8Sg2PcD6z_0aT0ew,3:00s0s_23wfCCHJMPcz_0aT0ew,3:00f0f_46imjdvFVOQz_0aT0ew,3:00W0W_80UqzWGSLAnz_0aT0ew,3:00404_elZDA0pQQ6vz_0jm0ew,3:00S0S_jZPsVtgiYloz_0jm0ew">
                <span class="result-price">$660</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 13:48" title="Wed 30 Jun 01:48:30 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/lake-city-well-managed-building-laundry/7344374867.html" data-id="7344374867" class="result-title hdrlnk" id="postid_7344374867" >Well Managed Building, Laundry Area On Site, Great Location</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$660</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Lake City, Near Fort Dodge)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344330894">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-opportunity-knocks-classic/7344330894.html" class="result-image gallery" data-ids="3:00a0a_gxI8Mnu2cPhz_08K04Q">
                <span class="result-price">$649</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 13:16" title="Wed 30 Jun 01:16:52 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-opportunity-knocks-classic/7344330894.html" data-id="7344330894" class="result-title hdrlnk" id="postid_7344330894" >OPPORTUNITY KNOCKS! CLASSIC 4 BEDROOM / 1.5 BATH HOME.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$649</span>

                <span class="housing">
                    4br -
                    1264ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (E Diehl Ave,Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344344276">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-location-community-quality/7344344276.html" class="result-image gallery" data-ids="3:00o0o_kqL4AziOyfoz_04m030,3:00909_1LllQOKcyzoz_04r02X,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:01717_eSwEeaQEYjJz_04b038,3:00m0m_iXp4AZFANN4z_04Q02I,3:00404_ezcebSX2QNOz_04r02X,3:00G0G_fbk6yOaCjBbz_04Q02I">
                <span class="result-price">$789</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:46" title="Wed 30 Jun 12:46:17 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-location-community-quality/7344344276.html" data-id="7344344276" class="result-title hdrlnk" id="postid_7344344276" >▶ Location, Community, Quality Living. It Starts Here at Somerset ! ◀</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$789</span>

                <span class="housing">
                    2br -
                    830ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344343208">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-rest-relax-recharge-do-it/7344343208.html" class="result-image gallery" data-ids="3:01515_cYN764Xsg5xz_04b038,3:00a0a_dDbKIDzObvsz_04b038,3:00Q0Q_aKEFwpokOcTz_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:01212_b7dXxbABqnzz_04b038,3:00t0t_5LTY4FOqgKrz_04r02X,3:00G0G_fbk6yOaCjBbz_04Q02I,3:00L0L_bC9xVeNwPi6z_04r02X">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:44" title="Wed 30 Jun 12:44:29 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-rest-relax-recharge-do-it/7344343208.html" data-id="7344343208" class="result-title hdrlnk" id="postid_7344343208" >▶ Rest. Relax. Recharge. Do it all in this 2 bed, 1 bath! ◀</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    806ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344341193" data-repost-of="7339880381">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-welcome-home-to-kenwood/7344341193.html" class="result-image gallery" data-ids="3:00a0a_iaq7eWwUsrfz_07J06c,3:00K0K_fnrxO6HGLOsz_0CI0im,3:00R0R_9IjV1X0v0Rxz_0CI0im,3:01717_kgGqIy5Qiwtz_0CI0im,3:00j0j_cII2CXsUVVpz_0CI0im">
                <span class="result-price">$795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:40" title="Wed 30 Jun 12:40:57 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-welcome-home-to-kenwood/7344341193.html" data-id="7344341193" class="result-title hdrlnk" id="postid_7344341193" >Welcome Home to Kenwood Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$795</span>

                <span class="housing">
                    2br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344339891" data-repost-of="7339869700">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-watrous-apartments-now/7344339891.html" class="result-image gallery" data-ids="3:00G0G_6Qg3a5x2hqoz_0ha0dC,3:00t0t_1Lv602FYIz6z_0k00dl,3:00z0z_gPSMBnFI43Yz_0k00dl,3:00404_dyofIF6x81fz_0k00dl,3:00Q0Q_qYoRdC03HUz_0k00dl,3:00q0q_1IRqD1PWIlez_0k00dl">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:38" title="Wed 30 Jun 12:38:47 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-watrous-apartments-now/7344339891.html" data-id="7344339891" class="result-title hdrlnk" id="postid_7344339891" >Watrous Apartments Now Leasing! Move In Ready!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Watrous)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344339768" data-repost-of="7339880381">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-welcome-home-to-kenwood/7344339768.html" class="result-image gallery" data-ids="3:00a0a_iaq7eWwUsrfz_07J06c,3:00K0K_fnrxO6HGLOsz_0CI0im,3:00R0R_9IjV1X0v0Rxz_0CI0im,3:01717_kgGqIy5Qiwtz_0CI0im,3:00j0j_cII2CXsUVVpz_0CI0im">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:38" title="Wed 30 Jun 12:38:34 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-welcome-home-to-kenwood/7344339768.html" data-id="7344339768" class="result-title hdrlnk" id="postid_7344339768" >Welcome Home to Kenwood Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344338594">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-come-see-your-dream/7344338594.html" class="result-image gallery" data-ids="3:00c0c_12vxiKfrorsz_04Q02I,3:01414_eBjwxWSBnBqz_03D03D,3:00Q0Q_aKEFwpokOcTz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:01717_eSwEeaQEYjJz_04b038,3:00m0m_iXp4AZFANN4z_04Q02I,3:01212_b7dXxbABqnzz_04b038,3:00G0G_fbk6yOaCjBbz_04Q02I,3:00F0F_ZyEdHU4nABz_04s02X">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:36" title="Wed 30 Jun 12:36:45 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-come-see-your-dream/7344338594.html" data-id="7344338594" class="result-title hdrlnk" id="postid_7344338594" >Come see your dream apartment at Somerset!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    786ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344331630">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-806-sq-ft-apartment/7344331630.html" class="result-image gallery" data-ids="3:00m0m_iXp4AZFANN4z_04Q02I,3:00a0a_dDbKIDzObvsz_04b038,3:00Q0Q_aKEFwpokOcTz_04b038,3:00d0d_1qDnXOsJvgZz_04b038,3:00C0C_iKV9aV5qdv0z_04b038,3:01717_eSwEeaQEYjJz_04b038,3:00G0G_fbk6yOaCjBbz_04Q02I,3:00L0L_bC9xVeNwPi6z_04r02X,3:00t0t_5LTY4FOqgKrz_04r02X">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:25" title="Wed 30 Jun 12:25:01 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-806-sq-ft-apartment/7344331630.html" data-id="7344331630" class="result-title hdrlnk" id="postid_7344331630" >Gracious 806 Sq. Ft. apartment in Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    806ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7343278225">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-grilling/7343278225.html" class="result-image gallery" data-ids="3:00U0U_c9hGNW7ZAIhz_0hq0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:09" title="Wed 30 Jun 12:09:55 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-grilling/7343278225.html" data-id="7343278225" class="result-title hdrlnk" id="postid_7343278225" >Ample Parking, Grilling &amp; Picnic Ares, Laundry in Each Building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>


                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344314067">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-reserve-your-beautiful/7344314067.html" class="result-image gallery" data-ids="3:00X0X_eDuqGdwcZr6z_0CI0m7,3:00404_3xbJZ7RGUeAz_0ak07K,3:00M0M_1rMzIva106kz_0ak07K,3:01515_foVBaNw7uy0z_0ak07K,3:00E0E_4cjAF8xgJc4z_0ak07K,3:00909_1Aip8stTfuhz_0ak07K,3:00R0R_ex6j4c3a48tz_0ak07K,3:00j0j_ghJIERqKkIsz_0ak07K,3:00000_14NrlFSQnM8z_0oc0fM">
                <span class="result-price">$730</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 12:07" title="Wed 30 Jun 12:07:13 PM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-reserve-your-beautiful/7344314067.html" data-id="7344314067" class="result-title hdrlnk" id="postid_7344314067" >Reserve Your Beautiful 2 Bedroom Apartment Home TODAY!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$730</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7344275157" data-repost-of="4857214778">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-ankeny-remodeled-large-1br/7344275157.html" class="result-image gallery" data-ids="3:00H0H_7zo9HDxpqPvz_0x20oM,3:00o0o_1TGMbju3aRVz_0x20oM,3:00d0d_fvwVPNSeZRXz_0x20oM,3:00K0K_jM67aU29qN2z_0x20oM,3:00V0V_jWzDjIQ3BEGz_0x20oM,3:00J0J_7fK7LAZByjEz_0x20oM,3:01717_2iQ8deGNfmBz_0x20oM,3:00Y0Y_6NLJimsyyUzz_0lM0t2,3:00X0X_fKGCOMvsErBz_0lM0t2,3:00H0H_74Cbsso6bpuz_0CI0t2">
                <span class="result-price">$735</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 10:52" title="Wed 30 Jun 10:52:33 AM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-ankeny-remodeled-large-1br/7344275157.html" data-id="7344275157" class="result-title hdrlnk" id="postid_7344275157" >Ankeny REMODELED large 1BR w/balcony - 800 sq ft - 2010 HL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$735</span>

                <span class="housing">
                    1br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334059131" data-repost-of="6417755253">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-heat-water-sewer-trash-paid/7334059131.html" class="result-image gallery" data-ids="3:00j0j_8hLfDyQZFO3_08405n,1:00n0n_kxIp7OmMLGW,1:00n0n_1C0aZDmFEEp,1:00h0h_4LpzXvn6OOR,1:01010_8HmQoGDt15m,1:00C0C_iMOvU0dEzfr,3:00000_kYLRhaKpycl_0ak07K,1:00C0C_48tbwW3zXhU,1:00G0G_dDJwGeXObmA,1:00n0n_1LmH01TQ2px,1:00j0j_7nKJejTtSfF,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 10:37" title="Wed 30 Jun 10:37:47 AM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-heat-water-sewer-trash-paid/7334059131.html" data-id="7334059131" class="result-title hdrlnk" id="postid_7334059131" >HEAT, WATER, SEWER &amp; TRASH  PAID @ PRAIRIE WOODS APTS!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334059340" data-repost-of="6415367826">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedrooms-available-prairie/7334059340.html" class="result-image gallery" data-ids="1:00000_aRR4bQFEieM,1:00W0W_8hLfDyQZFO3,1:00y0y_fP1eKBxvJVt,1:00T0T_4gqo6zDm4xW,1:00i0i_67YHzMrCsga,1:00n0n_eEwi84rufY0,1:00l0l_kkXEW79Ftt6,1:00707_kJSxcKz1Tmx,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak,3:00X0X_3QarcwSxtR3_0ak07L,3:00H0H_jON3N5sqWLn_0ak07L,3:00808_epuirnTMBg1_0ak07L">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 10:37" title="Wed 30 Jun 10:37:08 AM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedrooms-available-prairie/7334059340.html" data-id="7334059340" class="result-title hdrlnk" id="postid_7334059340" >2 Bedrooms Available @ Prairie Woods Apts***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334059583" data-repost-of="6442901288">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-br-cool-floor-plans-prairie/7334059583.html" class="result-image gallery" data-ids="1:00E0E_IfRrlhHvl9,1:00505_eQp1UZB3mDn,1:00000_3OfbDDT9bK9,1:00T0T_3WwsdLFsnZV,1:00b0b_hLa8LIEnqof,1:01717_iWcQ4Jqj6Tj,1:00x0x_4f6OJPgGiQu,1:00E0E_cSYtB0ES0QB,1:00G0G_9BUL60wkuDx,1:00q0q_cex3bPkzidt,1:00P0P_kTdPBgSgN6e,1:00Y0Y_6En5GST8U9D,1:00W0W_kujv1p0VlmC,1:00n0n_1C0aZDmFEEp,1:00k0k_cqHUu5tEhq9,1:00R0R_gfKZHk8rW7o,1:00z0z_eHuyv7pWe8y,1:00v0v_2bcrOrIPdlv,1:00S0S_9ttmVdr8Ji6,1:00S0S_cvhjuUeJp3N,1:00p0p_ecT7rrq8osW,1:00808_53HTtTlG9d0">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 10:30" title="Wed 30 Jun 10:30:39 AM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-br-cool-floor-plans-prairie/7334059583.html" data-id="7334059583" class="result-title hdrlnk" id="postid_7334059583" >2 BR-Cool Floor Plans @ Prairie Wood Apts**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334063914" data-repost-of="6413915658">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-available-prairie/7334063914.html" class="result-image gallery" data-ids="1:00V0V_ksFQ4Tili2,1:00707_bpwoAJPgLOJ,1:01414_8B1zX2Mh6Zt,1:00505_Uf5qwtVIFr,1:00P0P_g3RfD4R56O7,1:00J0J_jy7ede7llAJ,1:00e0e_bbUrAlsdbrQ,1:00G0G_9BUL60wkuDx,1:00O0O_fw6cckEHuVF,1:00000_cYObptyb9Wd,1:00c0c_hguTYbzJOqb,1:00D0D_kWpv7WjsM01,1:00N0N_17u6E0FRxba,3:00g0g_E9JpmeA4En_0ak07L,3:00C0C_lhgv9kl9q9U_0ak07K,3:00000_1vF6P2BCC6_07K05O,3:01111_hoIYnl12uda_05O07K,3:00i0i_7z8xGFyRZMF_09G0cU">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 10:30" title="Wed 30 Jun 10:30:23 AM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-available-prairie/7334063914.html" data-id="7334063914" class="result-title hdrlnk" id="postid_7334063914" >2-Bedroom Available @ Prairie Woods Apts**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7334063690" data-repost-of="6421297902">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-find-your-new-home-today/7334063690.html" class="result-image gallery" data-ids="1:00T0T_3WwsdLFsnZV,1:00V0V_mp1GAFPzJZ,1:00505_fc7q1Iz8Anb,1:00s0s_4a4SLnmuGFs,1:00b0b_48U5ZNkysZ6,1:00p0p_4nlDeaSpxzq,1:00y0y_iSUe0ST7VU0,1:00l0l_kkXEW79Ftt6,1:00b0b_adfBbQ8Bewh,1:00606_cvzffpg8rm0,1:00N0N_fH0GK8AmKU8,1:00U0U_5JzD1cGYYCB,1:00q0q_gCbzjG1wcRg,1:00z0z_8dyz6NnzeZZ,1:00m0m_84Wkco3od3s,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak,3:00g0g_E9JpmeA4En_0ak07L,3:00C0C_lhgv9kl9q9U_0ak07K">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-06-30 10:30" title="Wed 30 Jun 10:30:11 AM">Jun 30</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-find-your-new-home-today/7334063690.html" data-id="7334063690" class="result-title hdrlnk" id="postid_7334063690" >Find Your New Home Today @ Prairie Woods</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA)</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>

                    
                    
                </ul>
            </div>

            <div class="search-legend bottom">
                <div class="search-view">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="search-sort">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">702</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">702</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/apa?s=120&amp;hasPic=1&amp;max_price=800" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

            </div>

            <section class="blurbs">
                
            </section>

            <div id="floater">
                <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                <img class="payload" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
            </div>
        </form>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>

<div class="slidemessage">
    <span class="fave">
        <span class="star"></span>
        favorited
    </span>
    <span class="unfave">
        <span class="star"></span>
        no longer favorited
    </span>
    <span class="hide">
        <span class="trash"></span>
        hidden
    </span>
    <span class="unhide">
        <span class="trash"></span>
        no longer hidden
    </span>
</div>

<footer>
    <ul class="clfooter">
        <li>&copy; 2021 <span class="desktop">craigslist</span><span class="mobile">CL</span></li>
        <li><a href="https://www.craigslist.org/about/help/">help</a></li>
        <li><a href="https://www.craigslist.org/about/scams">safety</a></li>
        <li class="desktop"><a href="https://www.craigslist.org/about/privacy.policy">privacy</a><sup class="neu">new</sup></li>
        <li class="desktop"><a href="https://forums.craigslist.org/?forumID=8">feedback</a></li>
        <li><a href="https://www.craigslist.org/about/terms.of.use">terms</a></li>
        <li><a href="https://www.craigslist.org/about/">about</a></li>
        <li class="fsel desktop linklike" data-mode="mobile">mobile</li>
        <li class="fsel mobile linklike" data-mode="regular">desktop</li>
    </ul>
</footer>
    </section>

<template id="gallerycarousel">
    <div class="slider-info"></div><div class="slider-back arrow">&lt;</div><div class="slider-forward arrow">&gt;</div>
</template>

<script type="text/template" id="clustertemplate">
    <li class="posting {visited}" data-pid="{PostingID}">
        <img src="{ImageThumb}">
        <div class="housing_bubble_banner">
            <span class="{hasPrice}price">{currencySymbol}{price}</span>
            <span class="bedrooms">{BedroomsContent}</span>
            <span class="postingtitle"><a>{PostingTitle}</a></span>
            <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                <span class="banish">
                    <span class="icon icon-trash" role="button"></span>
                    <span class="screen-reader-text">hide this posting</span>
                </span>
                <span class="unbanish">
                    <span class="icon icon-trash red" role="button"></span>
                    unhide
                </span>
            </span>
        </div>
    </li>
</script>
<script type="text/template" id="postingtemplate">
    <div class="viewcontainer pics loading">
        <div class="backtolist">
            &laquo; back to posting list
        </div>
        <div class="title">
            <span class="icon icon-star" data-pid="{PostingID}" role="button">
                <span class="screen-reader-text">favorite this post</span>
            </span>
            <span class="postingtitle">
                <a href="{PostingURL}" target="_blank">{PostingTitle}</a>
            </span>
            <div>
                <span class="{hasPrice}price">{currencySymbol}{price}</span>
                <span class="bedrooms">{BedroomsContent}</span>
                <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                    <span class="banish">
                        <span class="icon icon-trash" role="button"></span>
                        <span class="screen-reader-text">hide this posting</span>
                    </span>
                    <span class="unbanish">
                        <span class="icon icon-trash red" role="button"></span>
                        <span class="screen-reader-text">unhide</span>
                        unhide
                    </span>
                </span>
            </div>
        </div>
        <hr style="clear:both">
        <div class="picscontainer gallery">
            <span class="slider-back arrow">&lt;</span><span class="slider-info"></span><span class="slider-forward arrow">&gt;</span>
            <div class="swipe">
                <div class="swipe-wrap">
                    <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                </div>
            </div>
        </div>
        <div class="infocontainer"></div>
        <hr style="clear:both">
        <div class="timecontainer"></div>
        <a class="viewpostinglink" href="{PostingURL}" target="_blank">view posting</a>
        <div class="contenttoggle">
            <a class="moreinfo">more info</a>
            <a class="showpics">show images</a>
        </div>
    </div>
</script>
<script type="text/template" id="popuptemplate">
    <div id="mapbubble" class="posting">
        <ul id="clusterbubble"></ul>
        <div id="postbubble"></div>
    </div>
</script>


</body>
</html>

  recorded_at: Mon, 05 Jul 2021 03:30:36 GMT
recorded_with: VCR 6.0.0
