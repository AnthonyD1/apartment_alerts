---
http_interactions:
- request:
    method: get
    uri: https://ipinfo.io/ip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - ipinfo.io
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Cloud-Trace-Context:
      - 75eb023b536e5a338711f035a780905a/11906427487081952129
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '13'
      Date:
      - Tue, 23 Nov 2021 04:09:44 GMT
      X-Envoy-Upstream-Service-Time:
      - '2'
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
    body:
      encoding: UTF-8
      string: 185.220.101.9
  recorded_at: Tue, 23 Nov 2021 04:09:44 GMT
- request:
    method: get
    uri: https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa?hasPic=1&max_price=800
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - desmoines.craigslist.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Last-Modified:
      - Tue, 23 Nov 2021 04:08:18 GMT
      Cache-Control:
      - max-age=900, public
      Date:
      - Tue, 23 Nov 2021 04:08:17 GMT
      Vary:
      - Accept-Encoding
      Content-Length:
      - '34889'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Server:
      - Apache
      Expires:
      - Tue, 23 Nov 2021 04:23:18 GMT
      Set-Cookie:
      - cl_b=4|2cab290445716e8abd6ab2ce9f68f19076a1d020|1637640586878po;path=/;domain=.craigslist.org;secure;expires=Fri,
        01-Jan-2038 00:00:00 GMT
      Strict-Transport-Security:
      - max-age=63072000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html>
<head>
    
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta property="og:site_name" content="craigslist">
	<meta name="twitter:card" content="preview">
	<meta property="og:title" content="des moines apartments / housing for rent - craigslist">
	<meta name="description" content="des moines apartments / housing for rent - craigslist">
	<meta property="og:description" content="des moines apartments / housing for rent - craigslist">
	<meta property="og:url" content="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa">
	<title>des moines apartments / housing for rent - craigslist</title>
	<link rel="canonical" href="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa">
	<link rel="next" href="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa?s=120&amp;hasPic=1&amp;max_price=800">



<script type="application/ld+json" id="ld_breadcrumb_data" >
    {"@context":"https://schema.org","itemListElement":[{"item":{"name":"desmoines.craigslist.org","@id":"https://desmoines.craigslist.org"},"position":1,"@type":"ListItem"},{"item":{"name":"housing","@id":"https://desmoines.craigslist.org/d/housing/search/hhh"},"position":2,"@type":"ListItem"},{"item":{"name":"apartments / housing for rent","@id":"https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa"},"position":3,"@type":"ListItem"}],"@type":"BreadcrumbList"}
</script>

    <style type="text/css">
        body {
            font-family: sans-serif;
        }

        #no-js,
        #unsupported-browser {
            position: fixed;
            z-index: 10000;

            top: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        #no-js p,
        #unsupported-browser p {
            color: black;
            background-color: #FA8787;
            opacity: 0.8;
            text-align: center;
            margin: 0;
            border: 0;
            padding: 1em;
        }

        #unsupported-browser {
            display: none;
        }

        .unsupported-browser #unsupported-browser {
            display: block;
        }

        .no-js header,
        .no-js form,
        .no-js .tryapp,
        .no-js .tsb,
        .unsupported-browser header,
        .unsupported-browser form,
        .unsupported-browser .tryapp,
        .unsupported-browser .tsb {
            display: none;
        }

        #curtain {
            display: none;
            position: fixed;
            z-index: 9000;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        .show-curtain #curtain {
            display: block;
        }

        #curtain .cover,
        #curtain .content {
            position: absolute;
            display: block;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
        }

        #curtain .cover {
            z-index: 1;
            background-color: white;
        }

        .show-curtain #curtain .cover {
            opacity: 0.5;
        }

        .show-curtain.clear #curtain .cover {
            opacity: 0;
        }

        .show-curtain.opaque #curtain .cover {
            opacity: 1;
        }

        #curtain .content {
            z-index: 2;
            background: transparent;
            color: #00E;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(359deg);
            }
        }

        .pacify #curtain .icom- {
            font-size: 3em;
            animation: rotate 2s infinite linear;
        }

        .pacify #curtain .icom-:after {
            content: "\eb23";
        }

        #curtain .text {
            display: none;
            font-size: 2em;
        }

        .loading #curtain .text.loading,
        .reading #curtain .text.reading,
        .writing #curtain .text.writing,
        .saving #curtain .text.saving,
        .searching #curtain .text.searching,
        .unrecoverable #curtain .text.unrecoverable,
        .message #curtain .text.message {
            display: block;
        }
    </style>


    
     
     <script src="https://www.craigslist.org/static/www/030feed3cf43bf94976c889a1a0ceb5cdd7ebafa.js"></script>
     <script>
         window.cl.init(
             'https://www.craigslist.org/static/www/',
             '',
             'www',
             'browsePostings',
             {
areaCountry: "US",
areaID: "98",
areaRegion: "IA",
catAbb: "apa",
countOfTotalText: "image {count} of {total}",
currencySymbol: "&#x0024;",
defaultLocale: "en_US",
defaultView: "grid",
expiredFavIDs: null,
imageConfig: {"1":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"4":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"0":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450"]},"3":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"2":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]}},
lessInfoText: "less info",
locString: "",
maptileBaseUrl: "//map{s}.craigslist.org/t09/{z}/{x}/{y}.png",
maxResults: 3000,
noImageText: "no image",
pID: null,
postalLat: null,
postalLon: null,
purveyorCategories: null,
searchDistance: null,
sectionAbb: "hhh",
sectionBase: "hhh",
showInfoText: "show info",
showMapTabs: 1,
showingBanished: 0,
showingFavorites: 0,
starHint: "save this post in your favorites list",
subarea: null,
zoomToPosting: null
},
             0
         );
     </script>
     
</head>
<body class="no-js show-curtain opaque search has-map" >
    
    <iframe id="cl-local-storage" src="https://www.craigslist.org/static/www/localStorage-092e9f9e2f09450529e744902aa7cdb3a5cc868d.html" style="display:none;"></iframe>
    

    <div id="curtain">
        <div class="cover"></div>
        <div class="content">
            <div class="icom-"></div>
            <div class="text loading">loading</div>
            <div class="text reading">reading</div>
            <div class="text writing">writing</div>
            <div class="text saving">saving</div>
            <div class="text searching">searching</div>
            <div class="text unrecoverable">
                There was an error loading the page; please try to
                <a id="cl-unrecoverable-hard-refresh" href="#" onclick="location.reload(true);">refresh the page.</a>
            </div>
            <div class="text message"></div>
        </div>
    </div>
    <noscript id="no-js"><div>
        <p>We've detected that JavaScript is not enabled in your browser.</p>
        <p>You must enable JavaScript to use craigslist.</p>
    </div></noscript>
    <div id="unsupported-browser">
        <p>We've detected you are using a browser that is missing critical features.</p>
        <p>Please visit craigslist from a modern browser.</p>
    </div>

    <section class="page-container" id="page-top" data-areaid="98">
        <div class="bglogo"></div>
        <div class="tryapp">
    try the craigslist app &raquo;
    <a class="appstorebtn"
    href="https://play.google.com/store/apps/details?id=org.craigslist.CraigslistMobile">
        Android
    </a>
    <a class="appstorebtn"
    href="https://apps.apple.com/us/app/craigslist/id1336642410">
        iOS
    </a>
</div>
<header class="global-header wide">
   <a class="header-logo" name="logoLink" href="https://desmoines.craigslist.org/">CL</a>

    <nav class="breadcrumbs-container">
<form id="breadcrumbform" class="breadcrumbs-form" method="get" action="/search/apa" data-action="/search/###/apa">
    <input type="hidden" name="max_price" value="800">
<input type="hidden" name="hasPic" value="1">

    <ul class="breadcrumbs ">
        <li class="crumb area">
            
            <span class="no-js">
                <a href="/">des moines</a>
            </span>
                <select name="areaAbb" id="areaAbb" class="js-only">
                    <option value="desmoines">des moines</option>
                        <option value="ames">ames, IA</option>
                        <option value="cedarrapids">cedar rapids</option>
                        <option value="columbiamo">columbia, MO</option>
                        <option value="dubuque">dubuque</option>
                        <option value="fortdodge">fort dodge</option>
                        <option value="iowacity">iowa city</option>
                        <option value="kansascity">kansas city</option>
                        <option value="kirksville">kirksville</option>
                        <option value="lacrosse">la crosse</option>
                        <option value="lawrence">lawrence</option>
                        <option value="lincoln">lincoln</option>
                        <option value="ksu">manhattan</option>
                        <option value="mankato">mankato</option>
                        <option value="masoncity">mason city</option>
                        <option value="omaha">omaha</option>
                        <option value="peoria">peoria</option>
                        <option value="quadcities">quad cities</option>
                        <option value="rmn">rochester, MN</option>
                        <option value="siouxcity">sioux city</option>
                        <option value="siouxfalls">sioux falls</option>
                        <option value="ottumwa">southeast IA</option>
                        <option value="marshall">southwest MN</option>
                        <option value="stjoseph">st joseph</option>
                        <option value="topeka">topeka</option>
                        <option value="waterloo">waterloo</option>
                        <option value="quincy">western IL</option>
                </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb section">
                    <select name="catAbb" id="catAbb">
                        <option value="ccc">community</option>
                        <option value="eee">events</option>
                        <option value="sss">for sale</option>
                        <option value="ggg">gigs</option>
                        <option value="hhh" selected>housing</option>
                        <option value="jjj">jobs</option>
                        <option value="rrr">resumes</option>
                        <option value="bbb">services</option>
                    </select>
                <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb category">
            <select id="subcatAbb" class="js-only">
                <option value="hhh">all</option>
                    <option value="apa" selected>apartments / housing for rent</option>
                    <option value="swp">housing swap</option>
                    <option value="off">office &amp; commercial</option>
                    <option value="prk">parking &amp; storage</option>
                    <option value="reb">real estate - by broker</option>
                    <option value="reo">real estate - by owner</option>
                    <option value="roo">rooms &amp; shares</option>
                    <option value="sub">sublets &amp; temporary</option>
                    <option value="vac">vacation rentals</option>
                    <option value="hou">wanted: apts</option>
                    <option value="rew">wanted: real estate</option>
                    <option value="sha">wanted: room/share</option>
                    <option value="sbw">wanted: sublet/temp</option>
            </select><span class="no-js">apartments / housing for rent</span>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb no-js">
            <input type="submit" value="go">
        </li>
    </ul>
</form>
    </nav>

<div class="userlinks">
    <ul class="user-actions">
        <li class="user post">
            <a href="https://post.craigslist.org/c/dsm">post</a>
        </li>
        <li class="user account">
            <a href="https://accounts.craigslist.org/login/home">account</a>
        </li>
    </ul>
    <ul class="user-favs-discards">
        <li class="user">
            <div class="favorites">
                <a href="#" class="favlink"><span class="icon icon-star fav" aria-hidden="true"></span><span class="fav-number">0</span><span class="fav-label"> favorites</span></a>
            </div>
        </li>
        <li class="user discards">
            <div class="to-banish-page">
                <a href="#" class="to-banish-page-link">
                    <span class="icon icon-trash red" aria-hidden="true"></span>
                    <span class="banished_count">0</span>
                    <span class="discards-label"> hidden</span>
                </a>
            </div>
        </li>
    </ul>
</div>

</header>
<header class="global-header narrow">
   <a class="header-logo" href="https://desmoines.craigslist.org/">CL</a>
    <nav class="breadcrumbs-container">

    <h1 class="breadcrumbs">

des moines            &gt;

apartments / housing for rent    </h1>


    </nav>
    <span class="linklike show-wide-header">...</span>
</header>


        <form id="searchform" class="search-form" action="/d/apartments-housing-for-rent/search/apa" >
            <div class="querybox">
                <div class="form-tab js-only"><span class="search-open" title="hide search">&laquo;</span><span class="search-closed" title="show search">&raquo;</span></div>
                <input type="text" placeholder="search apartments / housing for rent" name="query"
                    id="query" value="" autocorrect="off" class="flatinput ui-autocomplete-input"
                    autocapitalize="off" autocomplete="off" data-autocomplete="search">

                <button type="submit" class="searchbtn">
                    <span class="icon icon-search" aria-hidden="true"></span>
                    <span class="screen-reader-text">press to search craigslist</span>
                </button>
                    <div class="savealert">
                        <a class="saveme" data-action="save"  href="https://accounts.craigslist.org/savesearch/save?URL=https%3A%2F%2Fdesmoines%2Ecraigslist%2Eorg%2Fd%2Fapartments%2Dhousing%2Dfor%2Drent%2Fsearch%2Fapa%3FhasPic%3D1%26max%5Fprice%3D800"  title="save this search" >save search</a>
                    </div>
            </div>

            <div class="search-options-container">
    <h1 class="cattitle">
            <a href="/d/apartments-housing-for-rent/search/apa" title="clear all search parameters" class="reset">apartments / housing for rent</a>
    </h1>
    <div class="search-options-header linklike">
        <div class="icon icon-toggle-gear" aria-hidden="true"></div>
        options<span class="options-close">close</span>
    </div>
    <input id="excats" type="hidden" name="excats">
    <div class="search-options">
        <div class="searchgroup categories">
        </div>
        <input type="hidden" name="userid" value="" />





        <div class="searchgroup" id="basic-bools">
            <ul>
    <li>
       <label class="srchType">
           <input type="checkbox" name="srchType" class="" value="T" >
           search titles only
       </label>
    </li>
    <li>
       <label class="hasPic">
           <input type="checkbox" name="hasPic" class="autosubmit" value="1"  checked>
           has image
       </label>
    </li>
    <li>
       <label class="postedToday">
           <input type="checkbox" name="postedToday" class="autosubmit" value="1" >
           posted today
       </label>
    </li>
    <li>
       <label class="bundleDuplicates">
           <input type="checkbox" name="bundleDuplicates" class="autosubmit" value="1" >
           bundle duplicates
       </label>
    </li>
    <li>
       <label class="searchNearby">
           <input type="checkbox" name="searchNearby" class="autosubmit" value="1" >
           include nearby areas
       </label>
    </li>
</ul>

                <ul class="js-only nearbyAreas ">
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_0"
                            value="445"
                            disabled="disabled"
                            />
                            ames, IA <small>(ame)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_35"
                            value="344"
                            disabled="disabled"
                            />
                            bloomington-normal <small>(bln)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_4"
                            value="340"
                            disabled="disabled"
                            />
                            cedar rapids, IA <small>(ced)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_40"
                            value="190"
                            disabled="disabled"
                            />
                            champaign urbana <small>(chm)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_44"
                            value="11"
                            disabled="disabled"
                            />
                            chicago <small>(chi)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_19"
                            value="222"
                            disabled="disabled"
                            />
                            columbia / jeff city <small>(cou)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_37"
                            value="569"
                            disabled="disabled"
                            />
                            decatur, IL <small>(dil)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_12"
                            value="362"
                            disabled="disabled"
                            />
                            dubuque <small>(dbq)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_32"
                            value="242"
                            disabled="disabled"
                            />
                            eau claire, WI <small>(eau)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_1"
                            value="693"
                            disabled="disabled"
                            />
                            fort dodge, IA <small>(ftd)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_34"
                            value="432"
                            disabled="disabled"
                            />
                            grand island, NE <small>(gil)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_5"
                            value="339"
                            disabled="disabled"
                            />
                            iowa city, IA <small>(iac)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_33"
                            value="553"
                            disabled="disabled"
                            />
                            janesville, WI <small>(jvl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_17"
                            value="30"
                            disabled="disabled"
                            />
                            kansas city, MO <small>(ksc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_42"
                            value="552"
                            disabled="disabled"
                            />
                            kenosha-racine <small>(rac)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_7"
                            value="696"
                            disabled="disabled"
                            />
                            kirksville, MO <small>(krk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_18"
                            value="363"
                            disabled="disabled"
                            />
                            la crosse, WI <small>(lse)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_27"
                            value="698"
                            disabled="disabled"
                            />
                            la salle co <small>(lsl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_30"
                            value="695"
                            disabled="disabled"
                            />
                            lake of the ozarks <small>(loz)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_20"
                            value="347"
                            disabled="disabled"
                            />
                            lawrence, KS <small>(lwr)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_14"
                            value="282"
                            disabled="disabled"
                            />
                            lincoln, NE <small>(lnk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_29"
                            value="165"
                            disabled="disabled"
                            />
                            madison, WI <small>(mad)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_25"
                            value="428"
                            disabled="disabled"
                            />
                            manhattan, KS <small>(mhk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_16"
                            value="421"
                            disabled="disabled"
                            />
                            mankato, MN <small>(mkt)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_6"
                            value="692"
                            disabled="disabled"
                            />
                            mason city, IA <small>(msc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_45"
                            value="47"
                            disabled="disabled"
                            />
                            milwaukee, WI <small>(mil)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_26"
                            value="19"
                            disabled="disabled"
                            />
                            minneapolis / st paul <small>(min)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_8"
                            value="55"
                            disabled="disabled"
                            />
                            omaha / council bluffs <small>(oma)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_23"
                            value="224"
                            disabled="disabled"
                            />
                            peoria, IL <small>(pia)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_10"
                            value="307"
                            disabled="disabled"
                            />
                            quad cities, IA/IL <small>(mli)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_15"
                            value="316"
                            disabled="disabled"
                            />
                            rochester, MN <small>(rmn)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_28"
                            value="223"
                            disabled="disabled"
                            />
                            rockford, IL <small>(rfd)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_39"
                            value="690"
                            disabled="disabled"
                            />
                            salina, KS <small>(sns)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_11"
                            value="341"
                            disabled="disabled"
                            />
                            sioux city, IA <small>(sux)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_21"
                            value="679"
                            disabled="disabled"
                            />
                            sioux falls / SE SD <small>(fsd)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_2"
                            value="691"
                            disabled="disabled"
                            />
                            southeast IA <small>(otu)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_24"
                            value="665"
                            disabled="disabled"
                            />
                            southwest MN <small>(mml)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_31"
                            value="225"
                            disabled="disabled"
                            />
                            springfield, IL <small>(spi)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_41"
                            value="221"
                            disabled="disabled"
                            />
                            springfield, MO <small>(sgf)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_38"
                            value="369"
                            disabled="disabled"
                            />
                            st cloud, MN <small>(stc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_9"
                            value="694"
                            disabled="disabled"
                            />
                            st joseph <small>(stj)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_36"
                            value="29"
                            disabled="disabled"
                            />
                            st louis, MO <small>(stl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_22"
                            value="280"
                            disabled="disabled"
                            />
                            topeka, KS <small>(tpk)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_3"
                            value="567"
                            disabled="disabled"
                            />
                            waterloo / cedar falls <small>(wlo)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_43"
                            value="458"
                            disabled="disabled"
                            />
                            wausau, WI <small>(wau)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_13"
                            value="697"
                            disabled="disabled"
                            />
                            western IL <small>(qcy)</small>
                        </label>
                        </li>

                        <li>
                        <span class="nextNearbyZone linklike" data-zone="1">
                            + show <span id="nearbyNumber">46</span> more...
                        </span>
                        </li>
                </ul>
        </div>

            <div class="searchgroup">
                <span class="searchfieldlabel">miles from location</span>
                <input size="5" maxlength="5" inputmode="numeric"
                    class="flatinput searchInput search_distance" placeholder="miles"
                    name="search_distance"
                    value=""
                />
                <input type="text" class="flatinput searchInput postal" placeholder="from zip"
                    size="7" name="postal" value="">
                <span class="icon icon-locate"></span>
            </div>


    <div class="searchgroup minmax price" id="price">
<span class="searchfieldlabel">price</span>
    <input type="tel" name="min_price" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="max_price" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="800">
</div>


  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bedrooms</span>
    <select name="min_bedrooms" class="autosubmit">
      <option value="">min</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bedrooms" class="autosubmit">
      <option value="">max</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bathrooms</span>
    <select name="min_bathrooms" class="autosubmit">
      <option value="">min</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bathrooms" class="autosubmit">
      <option value="">max</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

    <div class="searchgroup minmax " id="">
<span class="searchfieldlabel">ft<sup>2</sup></span>
    <input type="tel" name="minSqft" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="maxSqft" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>

<div class="searchgroup">
  <span class="searchfieldlabel">availability</span>
  <select class="autosubmit" name="availabilityMode">
        <option value="0">all dates</option>
        <option value="1">within 30 days</option>
        <option value="2">beyond 30 days</option>
 </select>
</div>

<div class="searchgroup search-group-checkbox">
<label class="pets_cat">
        <input type="checkbox" name="pets_cat" value="1" class="autosubmit" />
    cats ok
</label><br>
<label class="pets_dog">
        <input type="checkbox" name="pets_dog" value="1" class="autosubmit" />
    dogs ok
</label><br>
<label class="is_furnished">
        <input type="checkbox" name="is_furnished" value="1" class="autosubmit" />
    furnished
</label><br>
<label class="no_smoking">
        <input type="checkbox" name="no_smoking" value="1" class="autosubmit" />
    no smoking
</label><br>
<label class="wheelchaccess">
        <input type="checkbox" name="wheelchaccess" value="1" class="autosubmit" />
    wheelchair access
</label><br>
<label class="airconditioning">
        <input type="checkbox" name="airconditioning" value="1" class="autosubmit" />
    air conditioning
</label><br>
<label class="ev_charging">
        <input type="checkbox" name="ev_charging" value="1" class="autosubmit" />
    EV charging
</label><br>
<label class="application_fee">
        <input type="checkbox" name="application_fee" value="1" class="autosubmit" />
    no application fee
</label><br>
<label class="broker_fee">
        <input type="checkbox" name="broker_fee" value="1" class="autosubmit" />
    no broker fee
</label><br>
</div>

<div class="searchgroup search-group-multi_checkbox">
<div class="search-attribute hide-list" data-attr="housing_type">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> housing type
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="housing_type_1" name="housing_type" class="multi_checkbox" value="1" type="checkbox"
                     />
                    apartment
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_2" name="housing_type" class="multi_checkbox" value="2" type="checkbox"
                     />
                    condo
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_3" name="housing_type" class="multi_checkbox" value="3" type="checkbox"
                     />
                    cottage/cabin
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_4" name="housing_type" class="multi_checkbox" value="4" type="checkbox"
                     />
                    duplex
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_5" name="housing_type" class="multi_checkbox" value="5" type="checkbox"
                     />
                    flat
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_6" name="housing_type" class="multi_checkbox" value="6" type="checkbox"
                     />
                    house
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_7" name="housing_type" class="multi_checkbox" value="7" type="checkbox"
                     />
                    in-law
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_8" name="housing_type" class="multi_checkbox" value="8" type="checkbox"
                     />
                    loft
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_9" name="housing_type" class="multi_checkbox" value="9" type="checkbox"
                     />
                    townhouse
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_10" name="housing_type" class="multi_checkbox" value="10" type="checkbox"
                     />
                    manufactured
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_11" name="housing_type" class="multi_checkbox" value="11" type="checkbox"
                     />
                    assisted living
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_12" name="housing_type" class="multi_checkbox" value="12" type="checkbox"
                     />
                    land
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="laundry">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> laundry
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="laundry_1" name="laundry" class="multi_checkbox" value="1" type="checkbox"
                     />
                    w/d in unit
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_4" name="laundry" class="multi_checkbox" value="4" type="checkbox"
                     />
                    w/d hookups
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_2" name="laundry" class="multi_checkbox" value="2" type="checkbox"
                     />
                    laundry in bldg
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_3" name="laundry" class="multi_checkbox" value="3" type="checkbox"
                     />
                    laundry on site
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_5" name="laundry" class="multi_checkbox" value="5" type="checkbox"
                     />
                    no laundry on site
                </label>
            </li>



    </ul>
</div>
<div class="search-attribute hide-list" data-attr="parking">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> parking
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="parking_1" name="parking" class="multi_checkbox" value="1" type="checkbox"
                     />
                    carport
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_2" name="parking" class="multi_checkbox" value="2" type="checkbox"
                     />
                    attached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_3" name="parking" class="multi_checkbox" value="3" type="checkbox"
                     />
                    detached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_4" name="parking" class="multi_checkbox" value="4" type="checkbox"
                     />
                    off-street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_5" name="parking" class="multi_checkbox" value="5" type="checkbox"
                     />
                    street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_6" name="parking" class="multi_checkbox" value="6" type="checkbox"
                     />
                    valet parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_7" name="parking" class="multi_checkbox" value="7" type="checkbox"
                     />
                    no parking
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="rent_period">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> rent period
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="rent_period_1" name="rent_period" class="multi_checkbox" value="1" type="checkbox"
                     />
                    daily
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_2" name="rent_period" class="multi_checkbox" value="2" type="checkbox"
                     />
                    weekly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_3" name="rent_period" class="multi_checkbox" value="3" type="checkbox"
                     />
                    monthly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_4" name="rent_period" class="multi_checkbox" value="4" type="checkbox"
                     />
                    yearly
                </label>
            </li>



    </ul>
</div>
</div>


            <div class="searchgroup">
                    <div class="searchfieldlabel">open house date</div>
                <select class="autosubmit" id="sale_date" name="sale_date">
                    <option>all dates</option>
                        <option value="2021-11-22">nov 22 - today</option>
                        <option value="2021-11-23">nov 23 - tomorrow</option>
                        <option value="2021-11-24">nov 24 - wednesday</option>
                        <option value="2021-11-25">nov 25 - thursday</option>
                        <option value="2021-11-26">nov 26 - friday</option>
                        <option value="2021-11-27">nov 27 - saturday</option>
                        <option value="2021-11-28">nov 28 - sunday</option>
                        <option value="2021-11-29">nov 29 - monday</option>
                        <option value="2021-11-30">nov 30 - tuesday</option>
                        <option value="2021-12-01">dec 1 - wednesday</option>
                        <option value="2021-12-02">dec 2 - thursday</option>
                        <option value="2021-12-03">dec 3 - friday</option>
                        <option value="2021-12-04">dec 4 - saturday</option>
                        <option value="2021-12-05">dec 5 - sunday</option>
                        <option value="2021-12-06">dec 6 - monday</option>
                        <option value="2021-12-07">dec 7 - tuesday</option>
                        <option value="2021-12-08">dec 8 - wednesday</option>
                        <option value="2021-12-09">dec 9 - thursday</option>
                        <option value="2021-12-10">dec 10 - friday</option>
                        <option value="2021-12-11">dec 11 - saturday</option>
                        <option value="2021-12-12">dec 12 - sunday</option>
                        <option value="2021-12-13">dec 13 - monday</option>
                        <option value="2021-12-14">dec 14 - tuesday</option>
                        <option value="2021-12-15">dec 15 - wednesday</option>
                        <option value="2021-12-16">dec 16 - thursday</option>
                        <option value="2021-12-17">dec 17 - friday</option>
                        <option value="2021-12-18">dec 18 - saturday</option>
                        <option value="2021-12-19">dec 19 - sunday</option>
                </select>
            </div>
        <div class="searchgroup resetsearch">
            <a href="/d/apartments-housing-for-rent/search/apa" title="clear all search parameters" class="reset linklike">reset</a>
            <button type="submit" class="searchlink linklike">update search</button>
        </div>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>
    </div>
</div>


            <div class="search-legend">
<div class="search-view js-only">
    <div class="dropdown dropdown-icons dropdown-arrows dropdown-view" role="toolbar" aria-label="view options" aria-expanded="false">
        <ul class="dropdown-list">
            <li class="dropdown-item mode sel">
                <button title="show results in a list" data-selection="list" id="listview">
                    <span class="view-list icon"></span>list
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results in a list with thumbnail pictures"  data-selection="pic"  id="picview" >
                    <span class="view-thumb icon"></span>thumb
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results side-by-side with larger pictures" data-selection="grid" id="gridview">
                    <span class="view-gallery icon"></span>gallery
                </button>
                <span class="toggle-arrow"></span>
            </li>
                <li class="dropdown-item mode">
                    <button title="show results on a map"  data-selection="map"  id="mapview" >
                        <span class="view-map icon"></span>map
                    </button>
                    <span class="toggle-arrow"></span>
                </li>
        </ul>
    </div>
</div>
                <div class="search-sort" >
    <div class="dropdown dropdown-sort dropdown-arrows" data-default-sort="date" role="toolbar" aria-label="sort options" aria-expanded="false">
        <ul class="dropdown-list">

            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="upcoming" title="show upcoming open houses" href="/d/apartments-housing-for-rent/search/apa?sort=upcoming&amp;hasPic=1&amp;max_price=800">upcoming <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode sel" aria-selected="true">
                <a data-selection="date" title="show newest matches first" href="/d/apartments-housing-for-rent/search/apa?sort=date&amp;hasPic=1&amp;max_price=800">newest <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="priceasc" title="sort by price, lowest to highest" href="/d/apartments-housing-for-rent/search/apa?sort=priceasc&amp;hasPic=1&amp;max_price=800">price ↑ <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="pricedsc" title="sort by price, highest to lowest" href="/d/apartments-housing-for-rent/search/apa?sort=pricedsc&amp;hasPic=1&amp;max_price=800">price ↓ <span class="toggle-arrow"></span></a>
            </li>

        </ul>
    </div>
</div>

                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">287</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">287</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/apa?s=120&amp;hasPic=1&amp;max_price=800" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

                
            </div>
            <div class="content" id="sortable-results" >
                <section class="favlistsection">
                    <section class="favlistinfo">
                    </section>
                    <section class="banishlistinfo">
                    </section>
                </section>


                    


<div class="open-map-view-button">
    <span>see in map view</span>
</div>
<div id="mapcontainer" data-arealat="41.600601" data-arealon="-93.608902">
    <div id="noresult-overlay"></div>
    <div id="noresult-text">
        <span class="message">No mappable items found</span>
    </div>
    <div id="map" class="loading">
        <div class="close-full-screen-map-mode-button">close fullscreen</div>
    </div>
</div>

                <ul class="rows" id="search-results">
                             <li class="result-row" data-pid="7406603453">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apt-for-rent-ankeny-785/7406603453.html" class="result-image gallery" data-ids="3:00c0c_jusA5qViYQPz_0gP0bv,3:00J0J_412oqFKMl30z_0gD0bG,3:00W0W_5mxrXbLkHyjz_0h20bF">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:08" title="Mon 22 Nov 08:08:55 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apt-for-rent-ankeny-785/7406603453.html" data-id="7406603453" class="result-title hdrlnk" id="postid_7406603453" >2 BEDROOM APT FOR RENT ANKENY $785</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400224412" data-repost-of="7378036293">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-for-rent-bed-bath/7400224412.html" class="result-image gallery" data-ids="3:00A0A_h9eDbI2ETwsz_0dy08Z">
                <span class="result-price">$575</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 17:29" title="Mon 22 Nov 05:29:42 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-for-rent-bed-bath/7400224412.html" data-id="7400224412" class="result-title hdrlnk" id="postid_7400224412" >Apartment for Rent - 1 Bed / 1 Bath, Parking, Stove and Fridge Include</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$575</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (3225 5th Ave., Unit #2; Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406119476">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-for-rent-bed-bath/7406119476.html" class="result-image gallery" data-ids="3:00e0e_fTS9S5nUJhVz_0ic0dF">
                <span class="result-price">$595</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 17:29" title="Mon 22 Nov 05:29:39 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-for-rent-bed-bath/7406119476.html" data-id="7406119476" class="result-title hdrlnk" id="postid_7406119476" >Apartment for Rent - 1 Bed / 1 Bath, Parking, Water Sewer Garbage Incl</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$595</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (2136 Lyon St., #2, Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410663485">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7410663485.html" class="result-image gallery" data-ids="3:01515_kOGjjbkGI8Yz_0aj0hq,3:00D0D_lhH3rC3Ecsyz_0kO0hq,3:00p0p_8ENlo9kTZDnz_0ox0hq,3:00q0q_j1taPFBNcQkz_0d40hq,3:00w0w_2ML8LtK8VE7z_0ne0hq,3:00U0U_1Z7IHrZfNlOz_0ne0hq,3:01515_kEpBAxUxnVkz_0cR0hq,3:00w0w_lBkH35PIj78z_0ne0hq">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 15:39" title="Mon 22 Nov 03:39:05 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7410663485.html" data-id="7410663485" class="result-title hdrlnk" id="postid_7410663485" >Swimming Pool with Sundeck, Extra Storage Available, On-Site Manager</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407409296">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7407409296.html" class="result-image gallery" data-ids="3:00H0H_2j01XIpVT5Xz_0bi07v,3:01515_3ngxarXJrdlz_0bi07v,3:00i0i_fFE74RS0mePz_0bi07v,3:00000_8jBciCvDhswz_0bi07v,3:00606_fLVYFaeRveQz_0bi07v,3:00C0C_hwT6GkJx2Rjz_0d40hq,3:00J0J_aheaGLo4wfEz_0bi07v,3:00505_h6rzNUxLepjz_0ne0hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 14:02" title="Mon 22 Nov 02:02:40 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7407409296.html" data-id="7407409296" class="result-title hdrlnk" id="postid_7407409296" >Swimming Pool with Sundeck, Laundry in Each Building, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7398902331">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7398902331.html" class="result-image gallery" data-ids="3:00808_1nTWq8rsFhYz_0bi07v,3:00h0h_gquRiYIuIT4z_0bi07v,3:00Q0Q_a99oO3iRXOZz_07g042,3:00S0S_lDZD8o3VUIPz_0bi07v,3:01717_dgwG3oyumrcz_0bi07v,3:00I0I_b2OiDUQbD5Tz_0bi07v,3:00D0D_96UIvynv5SUz_0bi07v,3:00c0c_16TrH29muHtz_0bi07v">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 13:22" title="Mon 22 Nov 01:22:04 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7398902331.html" data-id="7398902331" class="result-title hdrlnk" id="postid_7398902331" >24 Hour Emergency Maintenance, New Ownership, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402422205">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7402422205.html" class="result-image gallery" data-ids="3:00B0B_4Bb66NZXWF5z_0bi07v,3:00i0i_7nPyiJBpfXPz_0bi07v,3:00q0q_2fnjeIIfThvz_0bi07v,3:00a0a_bBp57pCMTNSz_0bi07v,3:00B0B_dFJfmXjo5CQz_0bi07v,3:01616_bHa0U5LGYEnz_0bi07v,3:00K0K_OTpDtytcGgz_0bi07v,3:00t0t_frZ0QRNpO1mz_0bi07v">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:49" title="Mon 22 Nov 11:49:40 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7402422205.html" data-id="7402422205" class="result-title hdrlnk" id="postid_7402422205" >Swimming Pool with Sundeck, On-Site Manager, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409707696" data-repost-of="7401170776">

        <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7409707696.html" class="result-image gallery" data-ids="3:00q0q_g7IpH2HxRf5z_09G07g">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:34" title="Mon 22 Nov 11:34:06 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7409707696.html" data-id="7409707696" class="result-title hdrlnk" id="postid_7409707696" >1240ft2 - Home for Rent !!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (des moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402649069" data-repost-of="7373747923">

        <a href="https://desmoines.craigslist.org/apa/d/marshalltown-marshalltown-senior/7402649069.html" class="result-image gallery" data-ids="3:00N0N_hXFBlNtTcPoz_0t20CI,3:00303_819zqzBwuKpz_0t20CI,3:01313_h9A94SiyqHrz_0t20CI,3:00k0k_eNdq9Z8Af48z_0CI0t2,3:00G0G_3Lj5taZN8zmz_0CI0t2,3:00z0z_71Zne2SktKNz_0cU08F,3:00101_eQrdF9t0OIpz_0cU08G">
                <span class="result-price">$650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:26" title="Mon 22 Nov 11:26:43 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/marshalltown-marshalltown-senior/7402649069.html" data-id="7402649069" class="result-title hdrlnk" id="postid_7402649069" >Marshalltown senior Residences</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$650</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403420213" data-repost-of="6415367826">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedrooms-available-prairie/7403420213.html" class="result-image gallery" data-ids="1:00000_aRR4bQFEieM,1:00W0W_8hLfDyQZFO3,1:00y0y_fP1eKBxvJVt,1:00T0T_4gqo6zDm4xW,1:00i0i_67YHzMrCsga,1:00n0n_eEwi84rufY0,1:00l0l_kkXEW79Ftt6,1:00707_kJSxcKz1Tmx,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak,3:00X0X_3QarcwSxtR3_0ak07L,3:00H0H_jON3N5sqWLn_0ak07L,3:00808_epuirnTMBg1_0ak07L">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:25" title="Mon 22 Nov 11:25:23 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedrooms-available-prairie/7403420213.html" data-id="7403420213" class="result-title hdrlnk" id="postid_7403420213" >2 Bedrooms Available @ Prairie Woods Apts*** MOVE IN DEALS, CALL NOW!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403418276" data-repost-of="6417755253">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-heat-water-sewer-trash-paid/7403418276.html" class="result-image gallery" data-ids="3:00j0j_8hLfDyQZFO3_08405n,1:00n0n_kxIp7OmMLGW,1:00n0n_1C0aZDmFEEp,1:00h0h_4LpzXvn6OOR,1:01010_8HmQoGDt15m,1:00C0C_iMOvU0dEzfr,3:00000_kYLRhaKpycl_0ak07K,1:00C0C_48tbwW3zXhU,1:00G0G_dDJwGeXObmA,1:00n0n_1LmH01TQ2px,1:00j0j_7nKJejTtSfF,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:25" title="Mon 22 Nov 11:25:18 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-heat-water-sewer-trash-paid/7403418276.html" data-id="7403418276" class="result-title hdrlnk" id="postid_7403418276" >HEAT, WATER, SEWER &amp; TRASH  PAID @ PRAIRIE WOODS APTS!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403417510" data-repost-of="6442901288">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-pets-welcome-prairie-woods/7403417510.html" class="result-image gallery" data-ids="1:00W0W_8hLfDyQZFO3,3:00i0i_7z8xGFyRZMF_09G0cU,3:00000_1vF6P2BCC6_07K05O,3:01111_hoIYnl12uda_05O07K,1:00000_aRR4bQFEieM,1:01616_cpuEATSw8dI,1:00T0T_4gqo6zDm4xW,1:00i0i_67YHzMrCsga,1:00505_foFE8Jrc0XU,1:00C0C_dfw1at3DEdI,1:00m0m_84Wkco3od3s,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak,3:00X0X_3QarcwSxtR3_0ak07L,3:00H0H_jON3N5sqWLn_0ak07L,3:00i0i_4j1Aqwa67E6_0ak07L">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:23" title="Mon 22 Nov 11:23:41 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-pets-welcome-prairie-woods/7403417510.html" data-id="7403417510" class="result-title hdrlnk" id="postid_7403417510" >***PETS WELCOME @ PRAIRIE WOODS APTS!***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403417109" data-repost-of="6257126149">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-pets-welcome-here-prairie/7403417109.html" class="result-image gallery" data-ids="1:00000_aRR4bQFEieM,1:01010_gWJ8hpothPP,1:00N0N_bVTkEYcOBI9,1:00404_eLlmKXeQHVn,1:00W0W_8hLfDyQZFO3,1:00E0E_H1aWXsWTQt,1:00e0e_6yNJsKugufL,1:00U0U_dP56gYoGXrb,1:00k0k_cqHUu5tEhq9,1:00505_foFE8Jrc0XU,1:00D0D_gHj3P4bLh6f,3:00000_1vF6P2BCC6_07K05O,3:01111_hoIYnl12uda_05O07K,3:00i0i_7z8xGFyRZMF_09G0cU">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:23" title="Mon 22 Nov 11:23:36 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-pets-welcome-here-prairie/7403417109.html" data-id="7403417109" class="result-title hdrlnk" id="postid_7403417109" >**Pets Welcome Here!! - Prairie Wood Apts**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403414703" data-repost-of="6421297902">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-find-your-new-home-today/7403414703.html" class="result-image gallery" data-ids="1:00T0T_3WwsdLFsnZV,1:00V0V_mp1GAFPzJZ,1:00505_fc7q1Iz8Anb,1:00s0s_4a4SLnmuGFs,1:00b0b_48U5ZNkysZ6,1:00p0p_4nlDeaSpxzq,1:00y0y_iSUe0ST7VU0,1:00l0l_kkXEW79Ftt6,1:00b0b_adfBbQ8Bewh,1:00606_cvzffpg8rm0,1:00N0N_fH0GK8AmKU8,1:00U0U_5JzD1cGYYCB,1:00q0q_gCbzjG1wcRg,1:00z0z_8dyz6NnzeZZ,1:00m0m_84Wkco3od3s,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak,3:00g0g_E9JpmeA4En_0ak07L,3:00C0C_lhgv9kl9q9U_0ak07K">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:23" title="Mon 22 Nov 11:23:31 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-find-your-new-home-today/7403414703.html" data-id="7403414703" class="result-title hdrlnk" id="postid_7403414703" >Find Your New Home Today @ Prairie Woods</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403414349" data-repost-of="6413915658">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-call-today-set-up-your/7403414349.html" class="result-image gallery" data-ids="1:00505_Uf5qwtVIFr,1:00V0V_ksFQ4Tili2,1:00707_bpwoAJPgLOJ,1:01414_8B1zX2Mh6Zt,1:00P0P_g3RfD4R56O7,1:00J0J_jy7ede7llAJ,1:00e0e_bbUrAlsdbrQ,1:00G0G_9BUL60wkuDx,1:00O0O_fw6cckEHuVF,1:00000_cYObptyb9Wd,1:00c0c_hguTYbzJOqb,1:00D0D_kWpv7WjsM01,1:00N0N_17u6E0FRxba,3:00a0a_b2lO3STacAw_0ak07K,3:00606_5OEyyQxI02V_07L0ak,3:00H0H_jON3N5sqWLn_0ak07L,3:00i0i_4j1Aqwa67E6_0ak07L">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:23" title="Mon 22 Nov 11:23:15 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-call-today-set-up-your/7403414349.html" data-id="7403414349" class="result-title hdrlnk" id="postid_7403414349" >Call Today &amp; Set Up Your Personal Tour @ Prairie Woods Apts**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403414133" data-repost-of="6442901288">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-br-cool-floor-plans-prairie/7403414133.html" class="result-image gallery" data-ids="1:00E0E_IfRrlhHvl9,1:00505_eQp1UZB3mDn,1:00000_3OfbDDT9bK9,1:00T0T_3WwsdLFsnZV,1:00b0b_hLa8LIEnqof,1:01717_iWcQ4Jqj6Tj,1:00x0x_4f6OJPgGiQu,1:00E0E_cSYtB0ES0QB,1:00G0G_9BUL60wkuDx,1:00q0q_cex3bPkzidt,1:00P0P_kTdPBgSgN6e,1:00Y0Y_6En5GST8U9D,1:00W0W_kujv1p0VlmC,1:00n0n_1C0aZDmFEEp,1:00k0k_cqHUu5tEhq9,1:00R0R_gfKZHk8rW7o,1:00z0z_eHuyv7pWe8y,1:00v0v_2bcrOrIPdlv,1:00S0S_9ttmVdr8Ji6,1:00S0S_cvhjuUeJp3N,1:00p0p_ecT7rrq8osW,1:00808_53HTtTlG9d0">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:23" title="Mon 22 Nov 11:23:11 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-br-cool-floor-plans-prairie/7403414133.html" data-id="7403414133" class="result-title hdrlnk" id="postid_7403414133" >2 BR-Cool Floor Plans @ Prairie Wood Apts**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    2br -
                    875ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409167098" data-repost-of="5781222686">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-availible-nowprairie-woods/7409167098.html" class="result-image gallery" data-ids="1:00W0W_8hLfDyQZFO3,1:00000_aRR4bQFEieM,1:00i0i_9Zm01UI7fbU,1:00h0h_dF3sZ4swQL8,1:00k0k_6xIfL00gWVH,1:00P0P_TmyqtPsLcc,1:00Y0Y_D3wiP2W6be,1:00606_gKNijxwOqlY,1:00909_9DPFIxgeSy1,1:00q0q_9cPMyZic2UL,1:00k0k_cqHUu5tEhq9">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:20" title="Mon 22 Nov 11:20:24 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-availible-nowprairie-woods/7409167098.html" data-id="7409167098" class="result-title hdrlnk" id="postid_7409167098" >►►AVAILIBLE NOW►►Prairie Woods Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    2br -
                    850ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409164694" data-repost-of="5781245186">

        <a href="https://desmoines.craigslist.org/apa/d/call-today-bedrooms-available-prairie/7409164694.html" class="result-image gallery" data-ids="1:00000_aRR4bQFEieM,1:00W0W_8hLfDyQZFO3,1:00r0r_9LvChqHBw5k,1:00i0i_9Zm01UI7fbU,1:00h0h_dF3sZ4swQL8,1:00P0P_TmyqtPsLcc,1:00i0i_67YHzMrCsga,1:00909_9DPFIxgeSy1,1:00q0q_9cPMyZic2UL,1:00k0k_cqHUu5tEhq9,1:00C0C_dfw1at3DEdI">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:16" title="Mon 22 Nov 11:16:11 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/call-today-bedrooms-available-prairie/7409164694.html" data-id="7409164694" class="result-title hdrlnk" id="postid_7409164694" >***CALL TODAY!-2 Bedrooms Available*** Prairie Woods Apts</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408693210">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-grilling/7408693210.html" class="result-image gallery" data-ids="3:00303_8rCJvCYDUdNz_0bi07v,3:00303_hn3wFms6XK2z_0bi07v,3:00e0e_i3b38ITC4Gmz_0ne0hq,3:00404_iT9He8XdwS8z_0bi07v,3:00000_7PwkBBNNx50z_0bi07v,3:00x0x_1kV5Y16Y1Lzz_0d40hq,3:00U0U_782eFAymjYNz_0bi07v,3:00N0N_cCJXYwk8IZBz_0bi07v">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:14" title="Mon 22 Nov 11:14:07 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-grilling/7408693210.html" data-id="7408693210" class="result-title hdrlnk" id="postid_7408693210" >Courtyard Views, Grilling &amp; Picnic Ares, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411332238">

        <a href="https://desmoines.craigslist.org/apa/d/winterset-efficiency-apartment-all/7411332238.html" class="result-image gallery" data-ids="3:00Z0Z_1Iw7tfWIpZLz_0cc0gg,3:00B0B_RSREQ0g4S2z_0c90fu,3:00x0x_aqngsc6xkaUz_08I0fu,3:00t0t_ijOl0Rl36dUz_0bw0fu,3:00n0n_bZLZbVtbE4Iz_0bw0fu,3:00q0q_5iQhjfE2427z_08E0fu,3:00m0m_8OwKvBURzdgz_0f20fu,3:00K0K_6oAdZdWcvRdz_08D0fu,3:00N0N_2gWf1IUQIgVz_08H0fu,3:00J0J_kmLWWYN828oz_0eZ0fu,3:00202_2v6ms9j4iTNz_0eo0fu,3:01212_kV4qoVf8UGIz_0fu0dQ">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:08" title="Mon 22 Nov 11:08:22 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/winterset-efficiency-apartment-all/7411332238.html" data-id="7411332238" class="result-title hdrlnk" id="postid_7411332238" >Efficiency Apartment - ALL UTILITIES INCLUDED</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    260ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Winterset  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411336410">

        <a href="https://desmoines.craigslist.org/apa/d/grinnell-urban-style-historic-details/7411336410.html" class="result-image gallery" data-ids="3:00F0F_jGNiv3FYKhAz_0CI0lM,3:00101_bfxvqpOsXtmz_0CI0lM,3:00P0P_batjrjYZOS0z_0CI0lM,3:00e0e_8H7FmHP5l5z_0jm0cU">
                <span class="result-price">$0</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:04" title="Mon 22 Nov 11:04:57 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grinnell-urban-style-historic-details/7411336410.html" data-id="7411336410" class="result-title hdrlnk" id="postid_7411336410" >urban style. historic details - Spaulding Lofts</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$0</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Grinnell  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405663928" data-repost-of="7398889161">

        <a href="https://desmoines.craigslist.org/apa/d/grinnell-urban-style-historic-details/7405663928.html" class="result-image gallery" data-ids="3:00J0J_icVFwlwYXJhz_0jm0cU">
                <span class="result-price">$671</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 11:00" title="Mon 22 Nov 11:00:15 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grinnell-urban-style-historic-details/7405663928.html" data-id="7405663928" class="result-title hdrlnk" id="postid_7405663928" >urban style. historic details - Spaulding Lofts</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$671</span>

                <span class="housing">
                    2br -
                    984ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Grinnell  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411324197">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-13-month-lease-promotion/7411324197.html" class="result-image gallery" data-ids="3:00S0S_1RCprmcmWz2z_0CI0t2,3:01010_bwyYy1ZKYBWz_0CI0t2,3:00909_5xI7iy9g6Zpz_0lM0t2,3:00202_kUFjqGE9YLTz_0lM0t2,3:00U0U_litGmoAwzwcz_0CI0t2,3:00q0q_cySJhIt33Odz_0CI0t2,3:01616_3UvCUGZhpGz_0CI0t2,3:00O0O_fypoRJ4tAcbz_0CI0t2,3:01313_a6lyaowlpPIz_0lM0t2,3:00y0y_2CrQm63Ed4yz_0jm0t2,3:00R0R_cXGalJAL3vjz_0CI0pO,3:00O0O_603elGb06FPz_0CI0pO,3:00u0u_1cfLoyvH4lSz_0CI0pO,3:00I0I_jh1Cq1BD57Xz_0CI0pO">
                <span class="result-price">$760</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 10:43" title="Mon 22 Nov 10:43:10 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-13-month-lease-promotion/7411324197.html" data-id="7411324197" class="result-title hdrlnk" id="postid_7411324197" >13 Month Lease Promotion!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$760</span>

                <span class="housing">
                    2br -
                    850ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (West Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411299788" data-repost-of="7222650701">

        <a href="https://desmoines.craigslist.org/apa/d/newton-1bd-1bath-community-close-to/7411299788.html" class="result-image gallery" data-ids="3:00V0V_bXiZANCQHuuz_0fa0cI,3:00b0b_59BMxAgphjTz_0fu0ak,3:00909_9SAMeJ67jQEz_0fu0ak,3:00P0P_i0ZSb3RIKkJz_0lM0t2,3:00X0X_9Smv6fMpEJuz_0lM0t2,3:00t0t_duacoqbDjvEz_0lM0t2,3:00e0e_klm70VWpoBVz_0lM0t2,3:00F0F_1FPthRJxFJxz_0lM0t2,3:00C0C_e0ntu9Vf7Qtz_0lM0t2,3:00Y0Y_gVDkvZZza7Iz_0lM0t2,3:00m0m_dcUWtQnqdm3z_09Q09G">
                <span class="result-price">$580</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 10:01" title="Mon 22 Nov 10:01:36 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/newton-1bd-1bath-community-close-to/7411299788.html" data-id="7411299788" class="result-title hdrlnk" id="postid_7411299788" >1bd/1bath Community Close to schools with Water/Trash/Sewer Included!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$580</span>

                <span class="housing">
                    1br -
                    685ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411299599" data-repost-of="7409647116">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-300-off-1bd-1ba-595-sq-ft/7411299599.html" class="result-image gallery" data-ids="3:00606_lJigdn2bPy4z_0dI09t,3:01616_h21p8KuHjTOz_0gl0t2,3:00F0F_5BKbWeGPZjCz_0gl0t2,3:00606_5t4c8PNH0Ksz_0CI0lM,3:00d0d_l5DfgrF9U46z_0gl0t2,3:00K0K_5OKZd3cv7XPz_0gl0t2,3:00S0S_amsIkW2AS2qz_0gl0t2,3:00o0o_gi9woWpekUbz_0gl0t2,3:00r0r_oQ5nB3Rgj0z_0gl0t2,3:00m0m_dcUWtQnqdm3z_09Q09G">
                <span class="result-price">$799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 10:01" title="Mon 22 Nov 10:01:13 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-300-off-1bd-1ba-595-sq-ft/7411299599.html" data-id="7411299599" class="result-title hdrlnk" id="postid_7411299599" >$300 OFF!! 1bd/1ba 595 sq ft Apartment in Great Location! AMG</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$799</span>

                <span class="housing">
                    1br -
                    595ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402422591">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7402422591.html" class="result-image gallery" data-ids="3:00G0G_5G0XBshLE1oz_0bi07v,3:00W0W_9h6xPegsPZJz_09O0hq,3:00b0b_bFd9c41R9Exz_0bi07v,3:00W0W_9mUpHyAFQzbz_0bi07v,3:01212_9RQLb0ptku8z_0bi07v,3:00707_iHt1tzEMO2xz_0bi07v,3:00r0r_cVL5CK8UJLfz_0bi07v,3:00u0u_fFNWwYfPFWNz_0bi07v">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:43" title="Mon 22 Nov 09:43:41 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7402422591.html" data-id="7402422591" class="result-title hdrlnk" id="postid_7402422591" >Extra Storage Available, Grilling &amp; Picnic Ares, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405707983" data-repost-of="7373665124">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-cozy-one-bedroom-ingersoll/7405707983.html" class="result-image gallery" data-ids="3:00D0D_4YEwDxwhvZXz_0CI0pO,3:00808_6W7isQJXBxgz_0CI0pO,3:00r0r_d0YCAQSw4Qrz_0CI0pO,3:00S0S_dOuWwmnOBPGz_0CI0pO,3:00E0E_2cIbwDBVauPz_0jm0t2,3:00q0q_6rp4rdYCHmqz_0l50t2,3:00E0E_iY9JDxgCHBqz_0CI0pO,3:00u0u_cSQ7ZI2Uj7Nz_0t20l4,3:00w0w_lAODOxHELARz_0CI0pO,3:00A0A_e5EFBoxjvZJz_0CI0pO,3:00r0r_gFi1Q4hxWYRz_0CI0pO,3:00d0d_7nBI1UZunxPz_0CI0pO,3:00n0n_6emIRn2oZ7Rz_0CI0pO,3:01212_e3os0Jlyngvz_0CI0pO,3:00q0q_iIszTnIbB8Az_0CI0pO">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:22" title="Mon 22 Nov 09:22:49 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-cozy-one-bedroom-ingersoll/7405707983.html" data-id="7405707983" class="result-title hdrlnk" id="postid_7405707983" >Cozy One Bedroom - Ingersoll Neighborhood - Pets Welcome</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    1br -
                    450ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407406792">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-swimming-pool/7407406792.html" class="result-image gallery" data-ids="3:00Y0Y_bMgmFyU9yF1z_0d40hq,3:00t0t_iCEYowv1abqz_0bi07v,3:01111_bD2vpLo2ifTz_0bi07v,3:00p0p_lTUYmrJIP5sz_0bi07v,3:00G0G_hK3keExydqSz_0bi07v,3:00r0r_78EgatEE06mz_0bi07v,3:00X0X_3DCSJzM3FnOz_0bi07v,3:00W0W_3dwfXfLWtI7z_0bi07v">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:09" title="Mon 22 Nov 09:09:05 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-swimming-pool/7407406792.html" data-id="7407406792" class="result-title hdrlnk" id="postid_7407406792" >Ample Parking, Swimming Pool with Sundeck, Extra Storage Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402151043" data-repost-of="7386728669">

        <a href="https://desmoines.craigslist.org/apa/d/windsor-heights-bedrooms-15-bath/7402151043.html" class="result-image gallery" data-ids="3:00L0L_6qrjYtPvVMAz_08g04E,3:00o0o_4nq9V8kDFp6z_08g06c,3:00n0n_pQJ1mD9NCSz_08g06c,3:00z0z_6rIgSXx8Po7z_08g06c,3:00W0W_eyPgliH1AL1z_08g06c,3:00r0r_60oLBdeI51hz_08g04E">
                <span class="result-price">$795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:04" title="Mon 22 Nov 09:04:34 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/windsor-heights-bedrooms-15-bath/7402151043.html" data-id="7402151043" class="result-title hdrlnk" id="postid_7402151043" >2 Bedrooms 1.5 Bath Apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$795</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402177006" data-repost-of="7386884377">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-beaver-ave-apartments/7402177006.html" class="result-image gallery" data-ids="3:01212_3gWdq2HI1YQz_0CI0t2,3:00707_ew0MlQbYE4Jz_0CI0t2,3:00b0b_4OTGQR6lv8cz_0CI0t2,3:00J0J_lw7diSn8XIOz_0CI0t2,3:00O0O_fxZ4iwhf5Kuz_0CI0t2,3:00p0p_9sHVFrhfK41z_0CI0t2,3:00K0K_fB9Gqi2r1Nez_0CI0t2,3:00C0C_8diy5HNtOWmz_0CI0t2,3:00L0L_dEl6D0tc4cCz_0CI0t2,3:00B0B_70wT02SPXzBz_0CI0t2">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:04" title="Mon 22 Nov 09:04:17 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-beaver-ave-apartments/7402177006.html" data-id="7402177006" class="result-title hdrlnk" id="postid_7402177006" >Beaver Ave. Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    663ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402555987">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-belmont-pointe-apartments/7402555987.html" class="result-image gallery" data-ids="3:00U0U_8UOpIWUhXhgz_09a06T,3:00y0y_7WaHfkCo4Byz_08g06c,3:00D0D_VsNjTJD18lz_04E06c,3:01616_bA3AXqxIRBez_0x20oM,3:00A0A_gp8IAL1Zyadz_08g06c,3:00a0a_97iDTIXYfnBz_0lM0t2,3:00y0y_4prdNB4do2jz_0x20oM,3:00B0B_lgCyLwZOxvWz_04E06c,3:00M0M_grSu5oC6EeRz_0lM0t2,3:00J0J_BQksngB2r7z_0xy0pa,3:00101_lhNo8Cfg05Yz_08g06c,3:00b0b_2CnjHSPdGJDz_04E06c">
                <span class="result-price">$795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:04" title="Mon 22 Nov 09:04:08 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-belmont-pointe-apartments/7402555987.html" data-id="7402555987" class="result-title hdrlnk" id="postid_7402555987" >Belmont Pointe Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$795</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408457226">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-douglas-park-apartments-in/7408457226.html" class="result-image gallery" data-ids="3:00U0U_7FOY61tLxpz_0fq0bz,3:00x0x_iN32Kt6YkCaz_0fq0bz,3:00g0g_c1YTkEqQQvxz_0fq0bz,3:00Z0Z_6WmZBv7XYALz_02S02S,3:00N0N_IjGmiNiolXz_02S02S,3:00C0C_eqdMCwHnTDRz_02S02S,3:00v0v_4VABPcdzCplz_0fq0bz,3:00P0P_9Prgn8V6L5Vz_0fq0bz,3:00L0L_fiRlgkNnJgoz_02S02S,3:00k0k_bEI87VAYiL4z_02S02S">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:04" title="Mon 22 Nov 09:04:05 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-douglas-park-apartments-in/7408457226.html" data-id="7408457226" class="result-title hdrlnk" id="postid_7408457226" >Douglas Park Apartments in Urbandale, IA</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408696715">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-eddy/7408696715.html" class="result-image gallery" data-ids="3:00b0b_k4FPn1Plou8z_0g70aM,3:00J0J_6TSEVMk2uHSz_0CI0t2,3:00E0E_eLDyLbU1NqHz_0lM0t2,3:00q0q_3rlN4Xe6Pstz_0lM0t2,3:00O0O_fltxbl0hLKqz_0CI0t2,3:01212_9hhnrqBmRrPz_06B09R,3:00S0S_bfNJs2ILUnDz_0CI0pE">
                <span class="result-price">$575</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:04" title="Mon 22 Nov 09:04:01 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-eddy/7408696715.html" data-id="7408696715" class="result-title hdrlnk" id="postid_7408696715" >The Eddy</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$575</span>

                <span class="housing">
                    400ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411269498">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-get-fit-at-crosswinds/7411269498.html" class="result-image gallery" data-ids="3:00R0R_f9MDl98fodBz_0uY0kE,3:00000_5TFXtLnshTUz_0uY0kE,3:01010_4rLgsRz9EVRz_0uY0kE,3:01010_cmxXBmRA3F3z_0uY0kE,3:00K0K_cU0eiM94x8mz_0uY0kE,3:01414_fB2lPnICdDiz_0uY0kE,3:00J0J_bH2iyf6GL8sz_0uY0kE,3:00101_k2P21UF4Qfxz_0uY0kE,3:00Q0Q_k8Q7BVTwO4vz_0uY0kE,3:00m0m_i5F3HzHEX4Qz_0uY0kE,3:00O0O_6ponX219QLvz_0uY0kE,3:00a0a_9QHbzp47FPOz_0CI0pO,3:00I0I_bRDy4LzxgcXz_0dk0bw">
                <span class="result-price">$704</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 09:03" title="Mon 22 Nov 09:03:52 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-get-fit-at-crosswinds/7411269498.html" data-id="7411269498" class="result-title hdrlnk" id="postid_7411269498" >Get Fit at Crosswinds Apartments Onsite Fitness Center. 1 BR Apt Home!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$704</span>

                <span class="housing">
                    1br -
                    663ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405094376" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7405094376.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 08:43" title="Mon 22 Nov 08:43:12 AM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7405094376.html" data-id="7405094376" class="result-title hdrlnk" id="postid_7405094376" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399936958">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-douglas-woods-apartments/7399936958.html" class="result-image gallery" data-ids="3:00b0b_fHahszh2KMHz_0ak07K,3:01515_1oJGSlQyY2oz_0ak07K,3:00R0R_3eEyfpzYtHiz_07K0ak,3:00707_irD3D8SINTMz_0lM0t2,3:00s0s_jbsqBWhlbbfz_0lM0t2,3:00F0F_fplyzoKcgFOz_09i0co,3:00K0K_hGOGCAXv4pSz_07K0ak,3:00t0t_8CW9sa8cL8Hz_07K0ak">
                <span class="result-price">$740</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-21 15:10" title="Sun 21 Nov 03:10:47 PM">Nov 21</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-douglas-woods-apartments/7399936958.html" data-id="7399936958" class="result-title hdrlnk" id="postid_7399936958" >Douglas Woods Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$740</span>

                <span class="housing">
                    1br -
                    648ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410889597" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7410889597.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-21 10:02" title="Sun 21 Nov 10:02:29 AM">Nov 21</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7410889597.html" data-id="7410889597" class="result-title hdrlnk" id="postid_7410889597" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399531762">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-cute-bedroom-bathroom-home/7399531762.html" class="result-image gallery" data-ids="3:01010_g43ST1VLjKxz_0CI0pE">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 20:48" title="Sat 20 Nov 08:48:39 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-cute-bedroom-bathroom-home/7399531762.html" data-id="7399531762" class="result-title hdrlnk" id="postid_7399531762" >Cute 1 Bedroom 1 Bathroom Home</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    1br -
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (600 Mckinley  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410668052">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-ample-parking/7410668052.html" class="result-image gallery" data-ids="3:01212_foq9OyHaK4az_0ox0hq,3:00O0O_9lHbokPoieEz_0kO0hq,3:00N0N_4M1GfV0nY3cz_0ne0hq,3:00E0E_j0XTC4XzlJ8z_0k00dl,3:01515_7l6VxXXuhPbz_0ne0hq,3:00j0j_fq8ytOXuvLYz_0cR0hq,3:00F0F_kp4JFzhBhnZz_0ne0hq,3:00b0b_9W4MEOj4o19z_0hJ0hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:43" title="Sat 20 Nov 03:43:40 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-ample-parking/7410668052.html" data-id="7410668052" class="result-title hdrlnk" id="postid_7410668052" >New Management, Ample Parking, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410667620">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-grilling/7410667620.html" class="result-image gallery" data-ids="3:01616_St7Hi0U1Axz_0d40hq,3:00U0U_lXowMKbjXsGz_0ne0hq,3:00X0X_hMs2lbOGxqLz_0ne0hq,3:00O0O_aH4cRxVoAFsz_0ne0hq,3:00404_6YjW0x0Vp5ez_0d40hq,3:00b0b_kotJSneiOeJz_0ox0hq,3:00C0C_eEflrua3Nxxz_0ne0hq,3:00r0r_2YYl6hYUtN0z_0kO0hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:42" title="Sat 20 Nov 03:42:39 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-grilling/7410667620.html" data-id="7410667620" class="result-title hdrlnk" id="postid_7410667620" >Garages Available, Grilling &amp; Picnic Ares, Extra Storage Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410666910">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-24-hour/7410666910.html" class="result-image gallery" data-ids="3:00q0q_545Pf49uKoMz_0ne0hq,3:00303_kvlGWUHmSlVz_0mI0hq,3:01313_hGG52v5d7Eaz_0cR0hq,3:00D0D_4ri12iieZBOz_0ox0hq,3:00O0O_jUGZN9ycZtgz_0kO0hq,3:00u0u_2Fbq4uAHqqhz_0hJ0hq,3:00S0S_acl0IXc6vK0z_0ne0hq,3:00000_8z7p2jC9Ubnz_0ne0hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:41" title="Sat 20 Nov 03:41:05 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-24-hour/7410666910.html" data-id="7410666910" class="result-title hdrlnk" id="postid_7410666910" >New Management, 24 Hour Emergency Maintenance, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410665367">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-24-hour/7410665367.html" class="result-image gallery" data-ids="3:00Q0Q_2NAQteIrcZ3z_0hJ0hq,3:01717_6P6wwKH7Fzaz_0ne0hq,3:00c0c_2S4n5IRaep6z_0cR0hq,3:00Z0Z_rIb8B5YpqZz_0d40hq,3:00404_i462vmQjGlmz_0mI0hq,3:00Z0Z_mx1ydpgMIQz_0aj0hq,3:00O0O_hkfsDe9Zf6Cz_0ne0hq,3:00W0W_32lIVlPDRtaz_0d40hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:37" title="Sat 20 Nov 03:37:36 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-24-hour/7410665367.html" data-id="7410665367" class="result-title hdrlnk" id="postid_7410665367" >Courtyard Views, 24 Hour Emergency Maintenance, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410664866">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-ownership-grilling/7410664866.html" class="result-image gallery" data-ids="3:00i0i_lIWClF83qkvz_0ne0hq,3:00404_hbdKNvgX4B1z_0ne0hq,3:01414_lGyhKmkHJDmz_0mI0hq,3:01717_4WKzbbe15afz_0hJ0hq,3:00I0I_egkIjYhGoy2z_0cR0hq,3:00y0y_5CJsJCuEWehz_0aj0hq,3:00D0D_fxN6s9UlEjIz_0kO0hq,3:00808_c6sAblmCH1vz_0ox0hq">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:36" title="Sat 20 Nov 03:36:30 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-ownership-grilling/7410664866.html" data-id="7410664866" class="result-title hdrlnk" id="postid_7410664866" >New Ownership, Grilling &amp; Picnic Ares, 24 Hour Emergency Maintenance</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410664441">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-swimming/7410664441.html" class="result-image gallery" data-ids="3:00000_hgbEj2X5LiTz_0d40hq,3:00J0J_gzG2VAo2JrHz_0d40hq,3:00c0c_82vza5DXnkXz_0cR0hq,3:00b0b_7OawGqCqvrQz_0mI0hq,3:00c0c_dC3qqT86XaTz_0ne0hq,3:00909_l3xrZqw7AtMz_0aj0hq,3:00B0B_cjxoVvS8xpkz_0d40hq,3:00x0x_k3Blm2aGibHz_0kO0hq">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:35" title="Sat 20 Nov 03:35:37 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-swimming/7410664441.html" data-id="7410664441" class="result-title hdrlnk" id="postid_7410664441" >Garages Available, Swimming Pool with Sundeck, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410663920">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7410663920.html" class="result-image gallery" data-ids="3:00z0z_9UlMJPeV7efz_0ne0hq,3:00F0F_aX5zIhPNsMOz_0hJ0hq,3:00m0m_SkUz4iQXZpz_0cR0hq,3:00000_2UBmx6qtJfuz_0mI0hq,3:00Q0Q_4PqawlepmqHz_08g06c,3:00W0W_g3pG7FejiSAz_0d40hq,3:00d0d_dEpwJUAcTMtz_0ox0hq,3:00G0G_kKttNuklHaXz_07K0ak">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 15:34" title="Sat 20 Nov 03:34:35 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7410663920.html" data-id="7410663920" class="result-title hdrlnk" id="postid_7410663920" >24 Hour Emergency Maintenance, On-Site Manager, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410602809" data-repost-of="7401170776">

        <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410602809.html" class="result-image gallery" data-ids="3:00q0q_g7IpH2HxRf5z_09G07g">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 14:33" title="Sat 20 Nov 02:33:12 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410602809.html" data-id="7410602809" class="result-title hdrlnk" id="postid_7410602809" >1240ft2 - Home for Rent !!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (des moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410602551" data-repost-of="7401170776">

        <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410602551.html" class="result-image gallery" data-ids="3:00q0q_g7IpH2HxRf5z_09G07g">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 14:21" title="Sat 20 Nov 02:21:43 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410602551.html" data-id="7410602551" class="result-title hdrlnk" id="postid_7410602551" >1240ft2 - Home for Rent !!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (des moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410601840" data-repost-of="7401170776">

        <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410601840.html" class="result-image gallery" data-ids="3:00q0q_g7IpH2HxRf5z_09G07g">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 14:14" title="Sat 20 Nov 02:14:25 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410601840.html" data-id="7410601840" class="result-title hdrlnk" id="postid_7410601840" >1240ft2 - Home for Rent !!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (des moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410601563" data-repost-of="7401170776">

        <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410601563.html" class="result-image gallery" data-ids="3:00q0q_g7IpH2HxRf5z_09G07g">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 14:09" title="Sat 20 Nov 02:09:56 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410601563.html" data-id="7410601563" class="result-title hdrlnk" id="postid_7410601563" >1240ft2 - Home for Rent !!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (des moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410603062" data-repost-of="7401170776">

        <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410603062.html" class="result-image gallery" data-ids="3:00q0q_g7IpH2HxRf5z_09G07g">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 14:05" title="Sat 20 Nov 02:05:41 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/carlisle-1240ft2-home-for-rent/7410603062.html" data-id="7410603062" class="result-title hdrlnk" id="postid_7410603062" >1240ft2 - Home for Rent !!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (des moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407887864" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7407887864.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 13:48" title="Sat 20 Nov 01:48:21 PM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7407887864.html" data-id="7407887864" class="result-title hdrlnk" id="postid_7407887864" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410406878">

        <a href="https://desmoines.craigslist.org/apa/d/stunning-bedrooms-baths-home/7410406878.html" class="result-image gallery" data-ids="3:00M0M_S6BM0IRjJzz_09x074">
                <span class="result-price">$599</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-20 06:24" title="Sat 20 Nov 06:24:13 AM">Nov 20</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/stunning-bedrooms-baths-home/7410406878.html" data-id="7410406878" class="result-title hdrlnk" id="postid_7410406878" >Stunning 4 bedrooms, 3 baths home.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$599</span>

                <span class="housing">
                    4br -
                    1217ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410217334">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-year-new-apartment/7410217334.html" class="result-image gallery" data-ids="3:00303_kLjMTll0LQAz_0k00dl,3:00L0L_E3PZRdGyndz_0k00dl,3:00a0a_8b4ACM2vY3Kz_0k00dl,3:00707_fj1PdCqSLbtz_0k00dl,3:01313_7gymcDOP46Xz_0k00dl,3:00I0I_bB5Sq7sqlhqz_0k00dl,3:01414_4sEa01x6AOkz_0k00dl,3:00e0e_cUdyfB5QCiEz_0k00dl,3:00707_9mJl5B2WqNRz_0k00dl">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 15:19" title="Fri 19 Nov 03:19:52 PM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-year-new-apartment/7410217334.html" data-id="7410217334" class="result-title hdrlnk" id="postid_7410217334" >New Year, New Apartment! 2 bedroom on 1st Floor!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    2br -
                    878ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410146057">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-1st-floor-1br-apartment-patio/7410146057.html" class="result-image gallery" data-ids="3:00h0h_zmszobJN62z_0CH0t2,3:00o0o_dAESUj0gw1Mz_0CI0t2,3:00S0S_3ZHDV3EiVvz_0CI0t2,3:01212_kLYjXF3YrOTz_0CI0t2,3:00w0w_65XpMKqHUzbz_0CI0t2,3:00d0d_6N5F9uhhk72z_0CI0t2,3:00h0h_62Z9zfFA0jYz_0CI0t2,3:00c0c_c4Z16SXgkz9z_0CI0t2,3:00x0x_6AEVKqZfw0Ez_0CI0t2,3:01313_1hUrrF7zp8Hz_0CI0t2,3:00101_81xFRYzkaspz_0CI0t2,3:00y0y_hyBCe1iSFeCz_0CI0t2,3:00p0p_9OXCyvbKmoMz_0CI0t2,3:00F0F_422LVyTCge3z_0CI0t2,3:00u0u_66Q8tdCOwtYz_0CI0t2,3:00H0H_duoNn1zT4Ptz_0CI0t2,3:01616_bfl32hCOMxHz_0CI0t2">
                <span class="result-price">$737</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 13:05" title="Fri 19 Nov 01:05:19 PM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-1st-floor-1br-apartment-patio/7410146057.html" data-id="7410146057" class="result-title hdrlnk" id="postid_7410146057" >1ST FLOOR 1BR APARTMENT W/ PATIO, ADT SECURITY, GYM, POOL, DOG PARK!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$737</span>

                <span class="housing">
                    1br -
                    711ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410142801">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-studio-apartment-balcony-big/7410142801.html" class="result-image gallery" data-ids="3:00f0f_6AOvcylWKAYz_0CH0t2,3:00o0o_dAESUj0gw1Mz_0CI0t2,3:00S0S_3ZHDV3EiVvz_0CI0t2,3:01212_kLYjXF3YrOTz_0CI0t2,3:00c0c_c4Z16SXgkz9z_0CI0t2,3:00x0x_6AEVKqZfw0Ez_0CI0t2,3:00w0w_65XpMKqHUzbz_0CI0t2,3:00d0d_6N5F9uhhk72z_0CI0t2,3:00h0h_62Z9zfFA0jYz_0CI0t2,3:00y0y_hyBCe1iSFeCz_0CI0t2,3:00p0p_9OXCyvbKmoMz_0CI0t2,3:00F0F_422LVyTCge3z_0CI0t2,3:00u0u_66Q8tdCOwtYz_0CI0t2,3:00H0H_duoNn1zT4Ptz_0CI0t2,3:01313_1hUrrF7zp8Hz_0CI0t2,3:00101_81xFRYzkaspz_0CI0t2,3:01616_bfl32hCOMxHz_0CI0t2">
                <span class="result-price">$711</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 12:59" title="Fri 19 Nov 12:59:53 PM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-studio-apartment-balcony-big/7410142801.html" data-id="7410142801" class="result-title hdrlnk" id="postid_7410142801" >STUDIO APARTMENT W/ BALCONY, BIG WALK-IN CLOSET, ADT, POOL, GYM, GOLF</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$711</span>

                <span class="housing">
                    563ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409137022">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-new/7409137022.html" class="result-image gallery" data-ids="3:01414_6jQG7ZRzUEqz_0d40hq,3:01212_dj2kYgXCyvrz_0ne0hq,3:00707_35Kv0XKSDg1z_09O0hq,3:00a0a_2BhUJt7FtKrz_0ne0hq,3:00U0U_lh7GoQhXAuxz_0ne0hq,3:00F0F_4dq0OGyx5tMz_0nm0hq,3:00m0m_4wBrGIx0OUWz_0d40hq,3:00Z0Z_2hh9u1eqMbpz_0ne0hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 12:57" title="Fri 19 Nov 12:57:34 PM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-new/7409137022.html" data-id="7409137022" class="result-title hdrlnk" id="postid_7409137022" >On-Site Manager, New Management, 24 Hour Emergency Maintenance</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406527996">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-quiet-2bd-1ba-3rd-floor-walk/7406527996.html" class="result-image gallery" data-ids="3:01515_2BW9QukLnXMz_0uY0ek,3:00U0U_eC5ncTbJpLJz_0t20CI,3:00O0O_3P0gTvdUN9rz_0t20CI,3:00o0o_5qEMRZvR263z_0t20CI,3:00101_f4czEnIyjb5z_0t20CI,3:00V0V_fSU37oKBDxbz_0t20CI,3:00D0D_1SnWhrdVEacz_0t20CI,3:00o0o_im2b1GMddPTz_0t20CI,3:00W0W_gBi7yYfKNelz_0t20CI,3:00V0V_kZYtDmKKTNQz_0dr0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 12:51" title="Fri 19 Nov 12:51:20 PM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-quiet-2bd-1ba-3rd-floor-walk/7406527996.html" data-id="7406527996" class="result-title hdrlnk" id="postid_7406527996" >Quiet 2bd/1ba 3rd Floor Walk Up Apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (West Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400746368">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7400746368.html" class="result-image gallery" data-ids="3:00g0g_i6xetuy82J3z_0bi07v,3:01212_gnSY1l1xqpYz_07g042,3:00101_3fjdOLXURySz_0bi07v,3:00D0D_1IG6VokzbjAz_0bi07v,3:00606_8hH18vVIYgHz_0bi07v,3:00n0n_dtubfYc4W0Gz_0d40hq,3:00101_gpSRetP39zEz_0bi07v,3:01616_bEEgi1qz7JRz_0d40hq">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 12:10" title="Fri 19 Nov 12:10:44 PM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7400746368.html" data-id="7400746368" class="result-title hdrlnk" id="postid_7400746368" >Swimming Pool with Sundeck, On-Site Manager, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409137394">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-extra-storage/7409137394.html" class="result-image gallery" data-ids="3:00i0i_4LSoM1gGRqbz_0ne0hq,3:00x0x_2wP9eKPsuR7z_09O0hq,3:01111_cmJErKF8vRxz_0ne0hq,3:00C0C_jv1UZmJsQ2kz_0d40hq,3:01515_cESBwlJiILtz_0ne0hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 10:56" title="Fri 19 Nov 10:56:33 AM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-extra-storage/7409137394.html" data-id="7409137394" class="result-title hdrlnk" id="postid_7409137394" >Ample Parking, Extra Storage Available, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410016793" data-repost-of="7392702878">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-1bedroom/7410016793.html" class="result-image gallery" data-ids="3:00t0t_1aohXxDEi8cz_0t20CI,3:00z0z_5VADlvVfxJZz_0t20CI,3:00b0b_8voKlZcFRcPz_0t20CI,3:00505_6MxOYePepQlz_0t20CI,3:00J0J_6ffMvrweCDnz_0t20CI,3:00q0q_8YwWoDM9Di6z_0t20CI,3:00A0A_l58SA2D4Zdpz_0t20CI,3:00J0J_kEVlOjid7iYz_0t20CI,3:00B0B_1mqpXutIIJjz_0t20CI">
                <span class="result-price">$745</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-19 09:23" title="Fri 19 Nov 09:23:17 AM">Nov 19</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-1bedroom/7410016793.html" data-id="7410016793" class="result-title hdrlnk" id="postid_7410016793" >1bedroom</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$745</span>

                <span class="housing">
                    1br -
                    600ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ingersoll  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406915762">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-ample/7406915762.html" class="result-image gallery" data-ids="3:00808_cNpQeA6a5x6z_0ne0hq,3:00M0M_bLeR09wtMlkz_0bi07v,3:00R0R_1DrCvYfRNtpz_0bi07v,3:00H0H_c55vEXDIrojz_0bi07v,3:00J0J_jWEGWq6v6gfz_0bi07v,3:00202_k1Z0EDNVOORz_0bi07v,3:00u0u_68cZRJm35oxz_0bi07v,3:00E0E_73LNGKbaZucz_0d40hq">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 23:19" title="Thu 18 Nov 11:19:35 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-ample/7406915762.html" data-id="7406915762" class="result-title hdrlnk" id="postid_7406915762" >Garages Available, Ample Parking, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406916335">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building/7406916335.html" class="result-image gallery" data-ids="3:00m0m_kUkxjTvscgez_0bi07v,3:00I0I_jnODBre3WZAz_0bi07v,3:00A0A_aQfRxQZGGHsz_0nm0hq,3:00A0A_bqxd2yF1YFtz_0bi07v,3:00e0e_lXDwmP7MgIpz_0ne0hq,3:00h0h_9yRUFyrCwqCz_0bi07v,3:00f0f_bRpAZCYsrsJz_0bi07v,3:00m0m_iu4JjTzzQPpz_0bi07v">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 19:18" title="Thu 18 Nov 07:18:35 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building/7406916335.html" data-id="7406916335" class="result-title hdrlnk" id="postid_7406916335" >Laundry in Each Building, Courtyard Views, Swimming Pool with Sundeck</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404613418">

        <a href="https://desmoines.craigslist.org/apa/d/woodward-studio-apartment-available-in/7404613418.html" class="result-image gallery" data-ids="3:00c0c_b5BduaLF6MMz_0CI0t2,3:00q0q_hJkl2iINgIlz_0t20CI,3:00A0A_4nRHr52OprHz_0CI0t2">
                <span class="result-price">$485</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 18:27" title="Thu 18 Nov 06:27:19 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/woodward-studio-apartment-available-in/7404613418.html" data-id="7404613418" class="result-title hdrlnk" id="postid_7404613418" >Studio apartment available in Woodward.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$485</span>


                <span class="result-hood"> (Woodward  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404612386">

        <a href="https://desmoines.craigslist.org/apa/d/lantry-bedroom-apartment-in-woodward/7404612386.html" class="result-image gallery" data-ids="3:01212_7ZL69k32eyez_0CI0t2,3:00W0W_bt74SSr96Y9z_0CI0t2,3:00j0j_ea6cevDgLf5z_0CI0t2,3:00m0m_dq7gBxmLszzz_0CI0t2,3:01010_egGw8gKE4Vlz_0CI0t2,3:00Y0Y_4WYt0ELM8rhz_0CI0t2">
                <span class="result-price">$525</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 18:27" title="Thu 18 Nov 06:27:09 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/lantry-bedroom-apartment-in-woodward/7404612386.html" data-id="7404612386" class="result-title hdrlnk" id="postid_7404612386" >1 Bedroom apartment in Woodward</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$525</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Woodward  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409826840">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-fully-updated-fully-updated/7409826840.html" class="result-image gallery" data-ids="3:00808_hjCF5S2Wj5bz_0kE0fu,3:00j0j_ZFszGdEaxlz_09G06s,3:00n0n_cQRPl7y82UJz_09G055,3:00g0g_9orEEli0JZNz_09G055">
                <span class="result-price">$764</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 17:33" title="Thu 18 Nov 05:33:32 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-fully-updated-fully-updated/7409826840.html" data-id="7409826840" class="result-title hdrlnk" id="postid_7409826840" >FULLY UPDATED FULLY UPDATED DW, CENTRAL AC, ADT SECURITY, GYM, GOLF...</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$764</span>


                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406916739">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-swimming/7406916739.html" class="result-image gallery" data-ids="3:00P0P_6mM9Gs6PfJSz_0bi07v,3:00303_bVVPQEUUJtzz_0d40hq,3:00g0g_6U7gGFVDYFFz_0bi07v,3:00A0A_4ASdV5JxAd2z_0bi07v,3:00x0x_8zucTKLtWujz_0d40hq,3:00101_flqS5jgOsCez_0bi07v,3:00s0s_8wkKKMqr85qz_0bi07v,3:00K0K_7tytZKwwETjz_0bi07v">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 15:13" title="Thu 18 Nov 03:13:36 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-courtyard-views-swimming/7406916739.html" data-id="7406916739" class="result-title hdrlnk" id="postid_7406916739" >Courtyard Views, Swimming Pool with Sundeck, Laundry in Each Building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406915014">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-one-bedroom-house-for-rent/7406915014.html" class="result-image gallery" data-ids="3:00K0K_9FXrP1s1KHJz_0CI0t2,3:00E0E_5jvqpdMMcz1z_0CI0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 13:38" title="Thu 18 Nov 01:38:26 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-one-bedroom-house-for-rent/7406915014.html" data-id="7406915014" class="result-title hdrlnk" id="postid_7406915014" >One bedroom house for rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                    730ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (West Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409715243" data-repost-of="6402728830">

        <a href="https://desmoines.craigslist.org/apa/d/grinnell-800-4th-ave-grinnell-iowa/7409715243.html" class="result-image gallery" data-ids="3:00U0U_93S67EMzSGFz_0CI0t2,3:00O0O_6jPgzUHRIXlz_0CI0t2,3:01010_5kb2jT1goZyz_0CI0t2,3:00B0B_kM0Vq8w1ahTz_0CI0t2,3:00505_2GHZuD2kY5az_0CI0t2,3:00G0G_aXIDxfPhqadz_0CI0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 13:38" title="Thu 18 Nov 01:38:02 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grinnell-800-4th-ave-grinnell-iowa/7409715243.html" data-id="7409715243" class="result-title hdrlnk" id="postid_7409715243" >800 4th Ave Grinnell, Iowa</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                    640ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (800 4th Ave  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7398903525">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-24/7398903525.html" class="result-image gallery" data-ids="3:00g0g_kVHUORFl6K0z_0bi07v,3:00z0z_6kJx8wNDG7Nz_0bi07v,3:00x0x_7sJLHoT5dS0z_08g06c,3:00B0B_aPShjKmjUwSz_0bi07v,3:00707_Sobl2vmSoMz_0bi07v,3:00W0W_h4zU10Y0naFz_08g06a,3:00303_bcp5Xe6QUMvz_0bi07v,3:00a0a_dysIUU7FXNHz_0bi07v">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 13:10" title="Thu 18 Nov 01:10:34 PM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-24/7398903525.html" data-id="7398903525" class="result-title hdrlnk" id="postid_7398903525" >Extra Storage Available, 24 Hour Emergency Maintenance, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402428837">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-on-site/7402428837.html" class="result-image gallery" data-ids="3:00808_tHM7EB99xNz_0bi07v,3:00G0G_8HFYQsoOqU5z_0bi07v,3:00I0I_kNv7xcjE3usz_0bi07v,3:00K0K_7UAhADSnzaiz_0bi07v,3:00T0T_7DRrmcm9YYjz_0bi07v,3:00a0a_cEcQYQkbFCcz_0bi07v,3:01111_aZmKRh9FTEaz_0ne0hq,3:00M0M_h7dOVeKuAn9z_0ne0hq">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 11:05" title="Thu 18 Nov 11:05:35 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-on-site/7402428837.html" data-id="7402428837" class="result-title hdrlnk" id="postid_7402428837" >Ample Parking, On-Site Manager, Extra Storage Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409619731">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-park-forest-apartments/7409619731.html" class="result-image gallery" data-ids="3:00j0j_1nb6aXVC91Kz_0ak06U,3:00O0O_faXzQulVr1Mz_09G06t,3:00F0F_gUMZAkxKQIHz_0ak06U,3:00P0P_jv29QQRqOq6z_09G06t,3:00909_Vs9uI9lonjz_05r07g,3:00101_5Rh59bjk4lez_05r07g,3:00N0N_1Fb2k7Fa4lnz_09m06g,3:00R0R_lUviJpdieZIz_0ak06U,3:01515_jICcsaHFtXqz_0at06Z,3:00u0u_1OOyO6oqcLOz_08g04y,3:01313_kT798vAWSqhz_0ak06U">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 10:47" title="Thu 18 Nov 10:47:22 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-park-forest-apartments/7409619731.html" data-id="7409619731" class="result-title hdrlnk" id="postid_7409619731" >PARK FOREST APARTMENTS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409578797">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-grilling/7409578797.html" class="result-image gallery" data-ids="3:00I0I_35EntaVDs9Iz_0nm0hq,3:00j0j_hc0uAT6qvDZz_0d40hq,3:00F0F_h9pF4VV29u3z_09O0hq,3:00G0G_1ljVoWeaD8Bz_0ne0hq,3:00p0p_dmS3yI6amwwz_0d40hq,3:00H0H_iZz30Ot9qojz_0ne0hq">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 09:29" title="Thu 18 Nov 09:29:01 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-grilling/7409578797.html" data-id="7409578797" class="result-title hdrlnk" id="postid_7409578797" >New Management, Grilling &amp; Picnic Ares, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409578250">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7409578250.html" class="result-image gallery" data-ids="3:00B0B_jJyU1I5ux0ez_0nm0hq,3:00l0l_4ktAhlvNZPmz_0ne0hq,3:00i0i_gQgETBevlDlz_09O0hq,3:00z0z_5xfZ4hQ3uFoz_0ne0hq">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 09:27" title="Thu 18 Nov 09:27:46 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7409578250.html" data-id="7409578250" class="result-title hdrlnk" id="postid_7409578250" >Swimming Pool with Sundeck, Courtyard Views, Extra Storage Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409568913" data-repost-of="5834378705">

        <a href="https://desmoines.craigslist.org/apa/d/indianola-nice-bedroom-apt-great-price/7409568913.html" class="result-image gallery" data-ids="3:01717_917k2SqXbd9z_0k00dl,3:00G0G_8svmBvWrtDNz_0k00dl,3:01313_dIcJ62x23pUz_0k00dl,3:00202_808TbHx57CYz_0k00dl,3:00202_idgfhyAlxaNz_0k00dl,3:00b0b_aFveZBMja5Jz_0k00dl,3:00m0m_9CLe55CttEOz_0k00dl,3:00D0D_9bTNzS0dhcWz_0k00dl,3:00a0a_cqII5e7MaGtz_0k00dl">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 09:07" title="Thu 18 Nov 09:07:42 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/indianola-nice-bedroom-apt-great-price/7409568913.html" data-id="7409568913" class="result-title hdrlnk" id="postid_7409568913" >Nice 2 bedroom Apt., Great Price, Pet Friendly!  Call Now!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    2br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Indianola  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409567113">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-extra/7409567113.html" class="result-image gallery" data-ids="3:00z0z_a7bCnI8gEhIz_0ne0hq,3:00Y0Y_3oemWorMDsz_0ne0hq,3:00Z0Z_eWSm6Z138nyz_0d40hq,3:01010_5UJblMby9s1z_0d40hq,3:01212_5XHqffubsdcz_0d40hq,3:00202_ewNw3ERmdVtz_0d40hq,3:00000_hL6zeM5KB40z_0d40hq,3:01010_kOzxhikahzgz_0d40hq">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 09:04" title="Thu 18 Nov 09:04:25 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-extra/7409567113.html" data-id="7409567113" class="result-title hdrlnk" id="postid_7409567113" >On-Site Manager, Extra Storage Available, Laundry in Each Building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401973298">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-ample/7401973298.html" class="result-image gallery" data-ids="3:00R0R_3WmFhQmErjZz_0bi07v,3:00m0m_g47wWtLXZcXz_0bi07v,3:00303_jv3rzVUr8wsz_0bi07v,3:00j0j_dymEs96OylRz_0bi07v,3:01111_6wVKwPtGmJmz_0nm0hq,3:00C0C_ilJFgzA7opzz_0bi07v,3:00202_qhwcOowytlz_0bi07v,3:00b0b_6QSiIXrD1OCz_0bi07v">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 09:00" title="Thu 18 Nov 09:00:35 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-ample/7401973298.html" data-id="7401973298" class="result-title hdrlnk" id="postid_7401973298" >On-Site Manager, Ample Parking, 24 Hour Emergency Maintenance</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404297240">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-courtyard/7404297240.html" class="result-image gallery" data-ids="3:01717_aJgsl2jG3Kcz_0d40hq,3:00U0U_kwIKJdfWPSyz_0bi07v,3:00e0e_20svkF2wV4qz_0bi07v,3:00z0z_1wxqIfdd5gwz_0d40hq,3:00W0W_dfy72ysfWVUz_0d40hq,3:00n0n_38mGHtRdYdDz_0bi07v,3:00X0X_kG3hgkUtwgkz_0bi07v,3:00Q0Q_g1WQWTql8muz_0bi07v">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 08:04" title="Thu 18 Nov 08:04:13 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-courtyard/7404297240.html" data-id="7404297240" class="result-title hdrlnk" id="postid_7404297240" >New Management, Courtyard Views, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401208463">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7401208463.html" class="result-image gallery" data-ids="3:00B0B_kcYXq4hTpHRz_0bi07v,3:00x0x_z9WNAtdT1Fz_0bi07v,3:00T0T_6q3YS9xH9e2z_0bi07v,3:00l0l_3WQ98q6JJmnz_0d40hq,3:00202_j7AlRsQ0OYiz_0bi07v,3:00707_2CtWsXurpnUz_0bi07v,3:00w0w_fIrhsCnYUUnz_0ne0hq,3:00n0n_fInyjb5v6O0z_0d40hq">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 05:56" title="Thu 18 Nov 05:56:14 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7401208463.html" data-id="7401208463" class="result-title hdrlnk" id="postid_7401208463" >Extra Storage Available, Garages Available, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404296715">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-24-hour/7404296715.html" class="result-image gallery" data-ids="3:00s0s_UeEyrYEq3sz_0bi07v,3:00H0H_fsUWr8HU8uFz_0bi07v,3:00I0I_1hCTFjjWPQQz_0bi07v,3:00o0o_jUsCNTsx4kFz_0bi07v,3:00B0B_2atFDxHXgQjz_0bi07v,3:00q0q_lBlMFr5LO6xz_0d40hq,3:01212_5N6H7zGxmEyz_0bi07v,3:00808_9fsEi6lbdrlz_0bi07v">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 03:55" title="Thu 18 Nov 03:55:14 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-24-hour/7404296715.html" data-id="7404296715" class="result-title hdrlnk" id="postid_7404296715" >On-Site Manager, 24 Hour Emergency Maintenance, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401206722">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-laundry-in/7401206722.html" class="result-image gallery" data-ids="3:01414_26PTYqh6myaz_0bi07v,3:00f0f_dlhZ0pAUVd0z_0bi07v,3:00E0E_ldgMWmwE43fz_0bi07v,3:00A0A_6Ye9D3HbHR3z_0bi07v,3:00N0N_gZajhcVSg0bz_0bi07v,3:01515_k9Y7wfXSR2bz_0bi07v,3:00808_g7GqbzAmSL5z_0bi07v,3:00000_awHoYsxyhHyz_0bi07v">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-18 01:41" title="Thu 18 Nov 01:41:14 AM">Nov 18</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-laundry-in/7401206722.html" data-id="7401206722" class="result-title hdrlnk" id="postid_7401206722" >Ample Parking, Laundry in Each Building, Courtyard Views</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401210057">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-ownership-laundry-in/7401210057.html" class="result-image gallery" data-ids="3:01414_1blMDn6DSqAz_0ne0hq,3:00V0V_hYQI3kpqrvBz_0bi07v,3:01717_1F4HLjekxXDz_0bi07v,3:00R0R_2PXFnFybPOkz_0bi07v,3:00t0t_k7SZuZzXBc3z_0bi07v,3:00Q0Q_9KA72MOtsfqz_0bi07v,3:00Z0Z_9nqCKIzQn0Mz_0bi07v,3:00J0J_6XrD1rFettsz_0bi07v">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 23:38" title="Wed 17 Nov 11:38:14 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-ownership-laundry-in/7401210057.html" data-id="7401210057" class="result-title hdrlnk" id="postid_7401210057" >New Ownership, Laundry in Each Building, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407405308">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-swimming-pool/7407405308.html" class="result-image gallery" data-ids="3:00808_dGBqKyDpFrmz_0bi07v,3:00v0v_29c41IsQVdSz_0bi07v,3:00S0S_cu5oZV75bMjz_0bi07v,3:00G0G_jgcJQU9FuCwz_0bi07v,3:00d0d_hawgXdK82aUz_07g042,3:01313_glXDsBlJBNpz_0d40hq,3:01010_kBHp16i6Iqkz_09O0hq,3:01212_cs3J3domTRMz_0bi07v">
                <span class="result-price">$765</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 21:26" title="Wed 17 Nov 09:26:13 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-swimming-pool/7407405308.html" data-id="7407405308" class="result-title hdrlnk" id="postid_7407405308" >New Management, Swimming Pool with Sundeck, Courtyard Views</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$765</span>

                <span class="housing">
                    2br -
                    740ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407406008">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7407406008.html" class="result-image gallery" data-ids="3:01111_eQM40W8Xw0xz_0bi07v,3:00909_icX7Kx2E0sxz_0bi07v,3:00U0U_lBIeLzWLlnKz_0bi07v,3:00g0g_8MlXWQubXfCz_0bi07v,3:00K0K_4DkEZmtBrDxz_0bi07v,3:01717_heBKotRqYIqz_0bi07v,3:01616_biJa6ZImutIz_0bi07v,3:00t0t_dJvLqzYumZrz_0bi07v">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 19:23" title="Wed 17 Nov 07:23:14 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7407406008.html" data-id="7407406008" class="result-title hdrlnk" id="postid_7407406008" >24 Hour Emergency Maintenance, Courtyard Views, Ample Parking</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409357926">

        <a href="https://desmoines.craigslist.org/apa/d/grimes-495-1br-500ft2-br-apartment-49500/7409357926.html" class="result-image gallery" data-ids="3:00i0i_6AP540KnKL9z_0lM0t2,3:00B0B_g4xkVWIgOJXz_0lM0t2,3:00t0t_f3Ez7tCEshBz_0lM0t2,3:01212_hW7UHM6YyWRz_0lM0t2,3:01111_5V1ttRWQ9bXz_0lM0t2">
                <span class="result-price">$495</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 16:29" title="Wed 17 Nov 04:29:22 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/grimes-495-1br-500ft2-br-apartment-49500/7409357926.html" data-id="7409357926" class="result-title hdrlnk" id="postid_7409357926" >$495 / 1br - 500ft2 - 1 BR Apartment $495.00</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$495</span>

                <span class="housing">
                    1br -
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Grimes  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409352749">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-sweet-studio-available-now/7409352749.html" class="result-image gallery" data-ids="3:00101_4eb9xOg2FfUz_0ah06V,3:00R0R_db1DTrieIrZz_0ak06v,3:00303_9WS830nrsqdz_08q05D,3:00707_9mJl5B2WqNRz_0k00dl,3:00M0M_6mhGRNBLRwTz_07K0ak,3:00j0j_eEbaMAjPT00z_07K05O,3:00E0E_1nEWO28i6yTz_0k00dl">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 16:29" title="Wed 17 Nov 04:29:21 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-sweet-studio-available-now/7409352749.html" data-id="7409352749" class="result-title hdrlnk" id="postid_7409352749" >Sweet Studio Available NOW! FREE HEAT!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    415ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406107273">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-douglas-park-apartments/7406107273.html" class="result-image gallery" data-ids="3:00u0u_hSDHvLgbhQNz_02S02S,3:01414_dm05it8mxFCz_0fq0bz,3:00T0T_4cIfL0aRGwnz_0lM0CI,3:00707_ftNtnBcaVofz_0CI0lM,3:00p0p_7j89ZnWX8ksz_0lM0CI,3:00r0r_jEw9alwZUVXz_0lM0CI,3:00v0v_7X8oId2qjMYz_0lM0CI,3:01010_9K17DphThlWz_0lM0CI">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 16:01" title="Wed 17 Nov 04:01:31 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-douglas-park-apartments/7406107273.html" data-id="7406107273" class="result-title hdrlnk" id="postid_7406107273" >Douglas Park Apartments ~ Conveniently Located in a Quiet area</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409342847">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-sweet-studio-available-now/7409342847.html" class="result-image gallery" data-ids="3:00101_4eb9xOg2FfUz_0ah06V,3:00R0R_db1DTrieIrZz_0ak06v,3:00p0p_f4YAn1bPRBPz_08q05G,3:00I0I_cttQNLnUMxjz_07K0ak,3:00j0j_eEbaMAjPT00z_07K05O,3:00M0M_6mhGRNBLRwTz_07K0ak">
                <span class="result-price">$600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 15:55" title="Wed 17 Nov 03:55:14 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-sweet-studio-available-now/7409342847.html" data-id="7409342847" class="result-title hdrlnk" id="postid_7409342847" >Sweet Studio Available NOW! FREE HEAT!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    415ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396696469" data-repost-of="7360739673">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apartment-move-in-special/7396696469.html" class="result-image gallery" data-ids="3:00000_caZyeCH01Vfz_0oc0g8,3:00k0k_6yppgLEPP2jz_0oc0g8,3:00z0z_cIH6gamZaoFz_0oc0g8,3:01010_g8LSpyuFVVQz_0oc0g8,3:00r0r_jLO7BfucPjMz_0oc0g8,3:00d0d_8Z9V15FdeNIz_0oc0g8,3:00d0d_63emgBSSz5Pz_0oc0g8,3:01414_jmTZeHjzpNvz_0oc0g8,3:00E0E_iun2SpcPxa3z_0oc0g8,3:00F0F_6srEYD61tajz_0oc0g8,3:01212_515XA9eVWBJz_0c60iT,3:01010_lfpgREoQWrXz_0oc0g8,3:00C0C_9aGzAvK0g78z_0oc0g8,3:00V0V_c8HWMAcfg8dz_0oc0g8,3:00c0c_8IUygGsJobbz_0oc0g8,3:01616_iOLNqc89flkz_0c60i9,3:00q0q_3PFDqT23LdVz_0c60i9,3:00V0V_1ustSK2vA2rz_0c60i9,3:00000_bim0KC5mrHGz_0oc0g8,3:00m0m_1Rgt7LDoFtfz_0oc0g8">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 15:40" title="Wed 17 Nov 03:40:04 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apartment-move-in-special/7396696469.html" data-id="7396696469" class="result-title hdrlnk" id="postid_7396696469" >2 Bedroom Apartment - Move In Special!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    2br -
                    730ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396696307" data-repost-of="7360747233">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-br-apartment-in-ankeny-pets/7396696307.html" class="result-image gallery" data-ids="3:00r0r_e2f5Z8PE4byz_0oc0g8,3:00v0v_h4b4LIxA0ahz_0oc0g8,3:00d0d_6vtdSdPmovAz_0CI0p2,3:00303_5f0A6uNG6Rcz_0CI0pO,3:00Q0Q_aY9KmqLWFTfz_0CI0pO,3:00W0W_9ZI2fgkm9pxz_0CI0pO,3:00Q0Q_1NlydtNEHvoz_0je0t2">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 15:40" title="Wed 17 Nov 03:40:02 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-br-apartment-in-ankeny-pets/7396696307.html" data-id="7396696307" class="result-title hdrlnk" id="postid_7396696307" >2 BR Apartment in Ankeny - Pets Welcome! - Move In Specia!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    2br -
                    730ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396695596" data-repost-of="7360754855">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-br-ankeny-apartment-move-in/7396695596.html" class="result-image gallery" data-ids="3:00k0k_jqbJWIxWxJuz_0oc0g8,3:00b0b_kvfo7zc7F3rz_0oc0fO,3:00k0k_f86hBdydFhCz_0CI0pO,3:00q0q_hRmFnH5GKZXz_0CI0pO,3:00808_40eXXA9PWkdz_0CI0pO,3:00P0P_1uD1TRCbLlz_0CI0pO,3:00Z0Z_5xWwGrvB3Sdz_0CI0pO,3:00808_2SpeTorrnCWz_0CI0pO,3:00I0I_8dKK8miYNJWz_0CI0oJ,3:00g0g_90dVCosXZ1pz_0CI0pO,3:00Z0Z_bNFIlNTh5gLz_0CI0pO,3:00j0j_2yDndYneME8z_0jm0t2">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 15:39" title="Wed 17 Nov 03:39:56 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-br-ankeny-apartment-move-in/7396695596.html" data-id="7396695596" class="result-title hdrlnk" id="postid_7396695596" >2 BR Ankeny Apartment - Move In Special!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    2br -
                    730ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407407650">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7407407650.html" class="result-image gallery" data-ids="3:00J0J_hIRLHW9YZe7z_0bi07v,3:00F0F_eaAviOJsNMfz_0nm0hq,3:00a0a_7KtyYl3uykrz_0ne0hq,3:00V0V_3m8FtpZUGgNz_0bi07v,3:00K0K_hwUphJWuGyqz_0bi07v,3:00K0K_6HuSWNTQtRzz_0bi07v,3:00B0B_lhn8Ot5FDrGz_0bi07v,3:00101_7sMqSftxnkvz_0bi07v">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 15:16" title="Wed 17 Nov 03:16:14 PM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7407407650.html" data-id="7407407650" class="result-title hdrlnk" id="postid_7407407650" >24 Hour Emergency Maintenance, Courtyard Views, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409205222">

        <a href="https://desmoines.craigslist.org/apa/d/stuart-spacious-bedroom-bath/7409205222.html" class="result-image gallery" data-ids="3:00101_4FQ9NyZFZxZz_0bC0fu,3:00n0n_cnO63z7ziQUz_0fu07d,3:00p0p_6nqy6O6gKhRz_0bC0fu,3:00g0g_1tUPCfx8ny4z_0bC0fu,3:00F0F_inxXyHglw2Oz_0bC0fu">
                <span class="result-price">$798</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 11:33" title="Wed 17 Nov 11:33:50 AM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/stuart-spacious-bedroom-bath/7409205222.html" data-id="7409205222" class="result-title hdrlnk" id="postid_7409205222" >SPACIOUS 2 BEDROOM 1 BATH</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$798</span>

                <span class="housing">
                    2br -
                    899ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (STUART, IOWA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409149304">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-fully-updated-studio/7409149304.html" class="result-image gallery" data-ids="3:00f0f_6AOvcylWKAYz_0CH0t2,3:00o0o_dAESUj0gw1Mz_0CI0t2,3:00S0S_3ZHDV3EiVvz_0CI0t2,3:01212_kLYjXF3YrOTz_0CI0t2,3:00w0w_65XpMKqHUzbz_0CI0t2,3:00d0d_6N5F9uhhk72z_0CI0t2,3:00h0h_62Z9zfFA0jYz_0CI0t2,3:00c0c_c4Z16SXgkz9z_0CI0t2,3:00y0y_hyBCe1iSFeCz_0CI0t2,3:00p0p_9OXCyvbKmoMz_0CI0t2,3:00F0F_422LVyTCge3z_0CI0t2,3:00u0u_66Q8tdCOwtYz_0CI0t2,3:00H0H_duoNn1zT4Ptz_0CI0t2,3:01313_1hUrrF7zp8Hz_0CI0t2,3:01616_bfl32hCOMxHz_0CI0t2">
                <span class="result-price">$764</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 09:57" title="Wed 17 Nov 09:57:30 AM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-fully-updated-studio/7409149304.html" data-id="7409149304" class="result-title hdrlnk" id="postid_7409149304" >READY 12/20: FULLY-UPDATED STUDIO W/ BALCONY, ADT, GYM, POOL, DOG PARK</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$764</span>

                <span class="housing">
                    563ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395755243" data-repost-of="5590645016">

        <a href="https://desmoines.craigslist.org/apa/d/bed-student-apartments-next-to-dmacc-in/7395755243.html" class="result-image gallery" data-ids="1:00i0i_8v8ioc3ExgV,1:00A0A_8y40jWC8YPa,1:00E0E_gDFEkiqdxH1,1:00T0T_5oGG6dMAdHv,1:00e0e_4d91vWkx55a,1:00Z0Z_hvg2FEAgfab,1:00f0f_kJjskxhT9pJ,1:00u0u_aX9NHb0WDst,1:00606_8Ci99U9NZu,1:00C0C_ihW5poBEanR,1:00w0w_cxKnO1YWRzH,1:00g0g_3vPIRCc4rmW,1:00U0U_jIfOBQCJTk0,1:00909_1XT3iaUsYH0">
                <span class="result-price">$585</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 09:23" title="Wed 17 Nov 09:23:55 AM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/bed-student-apartments-next-to-dmacc-in/7395755243.html" data-id="7395755243" class="result-title hdrlnk" id="postid_7395755243" >4 Bed Student Apartments Next to DMACC in Ankeny</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$585</span>

                <span class="housing">
                    4br -
                    1504ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (1351 SW Prairie Trail Pkwy, Ankeny IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396267276">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-private-entrances-to-garden/7396267276.html" class="result-image gallery" data-ids="3:01010_27gS8fe9Bewz_0fa07Z,3:00606_l4DsmgHLuLmz_0fa07Z,3:00X0X_b4mz3XTcQR2z_0fa07Z,3:00000_fN8VLpB1imlz_0fa07Z,3:01313_bFEW3TWDslcz_0fa07Z,3:01212_bWlayOq7ZIlz_0fa07Z,3:00X0X_iZdVGpVkPzoz_0fa07Z,3:00c0c_82ITYlXsLSwz_0fa07Z,3:00J0J_fABpZJhRCZPz_05E07m">
                <span class="result-price">$726</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 09:21" title="Wed 17 Nov 09:21:11 AM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-private-entrances-to-garden/7396267276.html" data-id="7396267276" class="result-title hdrlnk" id="postid_7396267276" >Private Entrances to Garden Units, Alarm Systems, Ceiling Fans</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$726</span>

                <span class="housing">
                    357ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400749025">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-laundry-in/7400749025.html" class="result-image gallery" data-ids="3:01111_1torP1wqHn6z_0bi07v,3:00S0S_G1k29wnTVKz_0ne0hq,3:00i0i_d8LpFlHh7tdz_0bi07v,3:00F0F_3k6Xux2Gqt9z_0bi07v,3:00P0P_9bU2Hd0Pm2iz_0bi07v,3:00d0d_bovW5DPAUFoz_0bi07v,3:00D0D_iBgncBqfy4Az_0bi07v,3:01616_8vVNt9TECT4z_0bi07v">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 09:12" title="Wed 17 Nov 09:12:26 AM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-new-management-laundry-in/7400749025.html" data-id="7400749025" class="result-title hdrlnk" id="postid_7400749025" >New Management, Laundry in Each Building, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409053556">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-des-moinesone-bedroom/7409053556.html" class="result-image gallery" data-ids="3:00a0a_i2eNGaYKlxpz_06c04E,3:00w0w_9W32jQVpxQ1z_06c04E,3:00808_evPPvkQqrx7z_06c04E,3:00w0w_cWs0QayJLOOz_06c04E">
                <span class="result-price">$625</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-17 04:44" title="Wed 17 Nov 04:44:37 AM">Nov 17</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-des-moinesone-bedroom/7409053556.html" data-id="7409053556" class="result-title hdrlnk" id="postid_7409053556" >des moines~One bedroom Apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$625</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (507 E Locust St UNIT 208  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408869769">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-newly-bedroom-duplex-apart/7408869769.html" class="result-image gallery" data-ids="3:00E0E_gduSHdZQv32z_09G06o,3:00V0V_eq2xB2d43xiz_09E06h,3:00q0q_2rhNRCeriPkz_09C06h,3:00y0y_hO0JQOIaw9Kz_09C06g,3:01212_jzVkFv24zomz_09B069,3:00f0f_gBIt0xrz9M6z_09D06l,3:00y0y_8JW0J5qSN9Iz_09D06n,3:00C0C_2UVfsLWnHTmz_09E06l,3:01313_faxwC1DlUeiz_09D06n">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 15:37" title="Tue 16 Nov 03:37:30 PM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-newly-bedroom-duplex-apart/7408869769.html" data-id="7408869769" class="result-title hdrlnk" id="postid_7408869769" >Newly 2 Bedroom Duplex Apart Immediate For Rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408838400">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-bed-15-bath-apartment-adt/7408838400.html" class="result-image gallery" data-ids="3:00000_8BxH5tiuow7z_0CH0t2,3:00o0o_dAESUj0gw1Mz_0CI0t2,3:00S0S_3ZHDV3EiVvz_0CI0t2,3:01212_kLYjXF3YrOTz_0CI0t2,3:00c0c_c4Z16SXgkz9z_0CI0t2,3:00x0x_6AEVKqZfw0Ez_0CI0t2,3:00w0w_65XpMKqHUzbz_0CI0t2,3:00d0d_6N5F9uhhk72z_0CI0t2,3:00h0h_62Z9zfFA0jYz_0CI0t2,3:00y0y_hyBCe1iSFeCz_0CI0t2,3:00p0p_9OXCyvbKmoMz_0CI0t2,3:00F0F_422LVyTCge3z_0CI0t2,3:00u0u_66Q8tdCOwtYz_0CI0t2,3:00H0H_duoNn1zT4Ptz_0CI0t2,3:01313_1hUrrF7zp8Hz_0CI0t2,3:00101_81xFRYzkaspz_0CI0t2,3:01616_bfl32hCOMxHz_0CI0t2">
                <span class="result-price">$794</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 14:02" title="Tue 16 Nov 02:02:47 PM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-bed-15-bath-apartment-adt/7408838400.html" data-id="7408838400" class="result-title hdrlnk" id="postid_7408838400" >2 BED, 1.5 BATH APARTMENT W/ ADT SECURITY, GYM, POOL, GOLF, DOG PARK</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$794</span>

                <span class="housing">
                    2br -
                    1056ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408803784">

        <a href="https://desmoines.craigslist.org/apa/d/perry-2948-kading-rd-br-ba-townhome-in/7408803784.html" class="result-image gallery" data-ids="3:00E0E_hQSrNDh43FOz_0lM0t2,3:00Y0Y_5AKhKeKvV7Lz_09G07g,3:01717_lfsEzYmYAIFz_0lM0t2,3:00Y0Y_hzk9SZwSrUzz_0lM0t2,3:00909_4wbeketko6xz_0lM0t2,3:00u0u_24bL0bDcR4Kz_0lM0t2,3:00000_R0Z8OAjABdz_0lM0t2,3:00X0X_bFfiL9C4eqHz_0lM0t2,3:00p0p_lDmKvCxu89Tz_0qC0kz,3:00V0V_hzBTnxQThZGz_0bu0ek">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 12:59" title="Tue 16 Nov 12:59:54 PM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/perry-2948-kading-rd-br-ba-townhome-in/7408803784.html" data-id="7408803784" class="result-title hdrlnk" id="postid_7408803784" >2948 Kading Rd., 3/BR 1/BA Townhome in Perry</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    3br -
                    1008ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Perry  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408800679">

        <a href="https://desmoines.craigslist.org/apa/d/osceola-1810-daisy-lane-br-ba-townhome/7408800679.html" class="result-image gallery" data-ids="3:01414_hXgShDA8Fzpz_09G07g,3:00101_c8wTGh3MGoBz_0lM0t2,3:00w0w_lpahwabfU6Az_0CI0t2,3:00E0E_em2KDrltfuwz_0CI0t2,3:00t0t_dSD2848Ew4Dz_0lM0t2,3:00b0b_cuDUmE0RzBMz_0CI0t2,3:01515_m0xMwTcIYwz_0lM0t2,3:00J0J_79Om8RYb80Wz_0CI0t2,3:00p0p_dEnybrN3Jh7z_0CI0t2,3:00c0c_2Pi0XYIM9QEz_0CI0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 12:53" title="Tue 16 Nov 12:53:56 PM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/osceola-1810-daisy-lane-br-ba-townhome/7408800679.html" data-id="7408800679" class="result-title hdrlnk" id="postid_7408800679" >1810 Daisy Lane, 3/BR 1/BA Townhome - Osceola</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    3br -
                    1008ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Osceola  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406269664">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-very-nice-two-bedroom-in-ankeny/7406269664.html" class="result-image gallery" data-ids="3:00000_8oga94dDQPiz_0CI0t2,3:00Y0Y_iJf6YFpWc4bz_0CI0t2,3:00W0W_i5dZRRfVZKpz_0CI0t2">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 11:54" title="Tue 16 Nov 11:54:16 AM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-very-nice-two-bedroom-in-ankeny/7406269664.html" data-id="7406269664" class="result-title hdrlnk" id="postid_7406269664" >Very Nice two bedroom in Ankeny</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    2br -
                    750ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407076958">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-great-looking-two-bedroom/7407076958.html" class="result-image gallery" data-ids="3:00x0x_aYXKY3hYn4z_0t20CI,3:00909_flB7esXgyMPz_0t20CI,3:00q0q_e7vJPTcPWLz_0t20CI,3:00E0E_69NqBidYO45z_0t20CI">
                <span class="result-price">$800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 11:53" title="Tue 16 Nov 11:53:57 AM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-great-looking-two-bedroom/7407076958.html" data-id="7407076958" class="result-title hdrlnk" id="postid_7407076958" >Great looking Two Bedroom apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$800</span>

                <span class="housing">
                    2br -
                    750ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402104364">

        <a href="https://desmoines.craigslist.org/apa/d/newton-1702-4th-st-1-br-ba-townhome-in/7402104364.html" class="result-image gallery" data-ids="3:00707_cavMQrVtU2Vz_09G07g,3:00S0S_jryZlR8SF5Lz_0ww0oo,3:00c0c_lAgqd7hr3ecz_0ww0oo,3:00o0o_c9yG26T0QTYz_0ww0oo,3:00606_4ncI3LcJtoz_0lM0t2,3:00W0W_7cr8O24yWFRz_0lM0t2,3:00707_9TvIeIi0ZYCz_0qC0kz">
                <span class="result-price">$775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 10:35" title="Tue 16 Nov 10:35:30 AM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/newton-1702-4th-st-1-br-ba-townhome-in/7402104364.html" data-id="7402104364" class="result-title hdrlnk" id="postid_7402104364" >1702 W 4th St N #1 3/BR 1/BA Townhome in Newton</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$775</span>

                <span class="housing">
                    3br -
                    1008ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Newton  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408706540">

        <a href="https://desmoines.craigslist.org/apa/d/windsor-heights-bedrooms-coming/7408706540.html" class="result-image gallery" data-ids="3:00M0M_2cbMWYkqXCZz_0kY0dW,3:01717_47B3y9ODc8bz_0CI0pO,3:00u0u_kqmLdtcasfQz_0CI0pN,3:00K0K_aLIwHIHH3Ezz_0g809N,3:00R0R_74yofGXJdSjz_0CI0nB,3:00r0r_8snbW3Bjw9bz_0CI0pO,3:00F0F_iezwvP6pIboz_0CI0pZ">
                <span class="result-price">$780</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 10:09" title="Tue 16 Nov 10:09:29 AM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/windsor-heights-bedrooms-coming/7408706540.html" data-id="7408706540" class="result-title hdrlnk" id="postid_7408706540" >1 Bedrooms Coming Available SOON!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$780</span>

                <span class="housing">
                    1br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (West Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408688304">

        <a href="https://desmoines.craigslist.org/apa/d/perry-duplex-for-rent/7408688304.html" class="result-image gallery" data-ids="3:00C0C_bJ2jEUKBqVPz_0ww0oo">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-16 09:34" title="Tue 16 Nov 09:34:30 AM">Nov 16</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/perry-duplex-for-rent/7408688304.html" data-id="7408688304" class="result-title hdrlnk" id="postid_7408688304" >Duplex for rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                    988ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Perry  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408431977">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-cozy-br-apt-on-ingersol-in/7408431977.html" class="result-image gallery" data-ids="3:00000_lsXwDJmIfQrz_0zk0CI,3:00303_7FvN5dpWYtpz_0CI0t2,3:01616_h0ObXE8dqz4z_0CI0t2,3:00f0f_4MBZzwWg4mUz_0zk0CI">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-15 15:41" title="Mon 15 Nov 03:41:19 PM">Nov 15</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-cozy-br-apt-on-ingersol-in/7408431977.html" data-id="7408431977" class="result-title hdrlnk" id="postid_7408431977" >Cozy 1 BR Apt on Ingersol in safe area</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    1br -
                    600ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408373012">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-fully-updated-studio/7408373012.html" class="result-image gallery" data-ids="3:00f0f_6AOvcylWKAYz_0CH0t2,3:00o0o_dAESUj0gw1Mz_0CI0t2,3:00S0S_3ZHDV3EiVvz_0CI0t2,3:00c0c_c4Z16SXgkz9z_0CI0t2,3:00x0x_6AEVKqZfw0Ez_0CI0t2,3:01212_kLYjXF3YrOTz_0CI0t2,3:00w0w_65XpMKqHUzbz_0CI0t2,3:00d0d_6N5F9uhhk72z_0CI0t2,3:00h0h_62Z9zfFA0jYz_0CI0t2,3:00y0y_hyBCe1iSFeCz_0CI0t2,3:00p0p_9OXCyvbKmoMz_0CI0t2,3:00F0F_422LVyTCge3z_0CI0t2,3:00u0u_66Q8tdCOwtYz_0CI0t2,3:00H0H_duoNn1zT4Ptz_0CI0t2,3:01313_1hUrrF7zp8Hz_0CI0t2,3:01616_bfl32hCOMxHz_0CI0t2">
                <span class="result-price">$764</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-15 13:49" title="Mon 15 Nov 01:49:37 PM">Nov 15</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-ready-fully-updated-studio/7408373012.html" data-id="7408373012" class="result-title hdrlnk" id="postid_7408373012" >READY 12/20: FULLY-UPDATED STUDIO W/ BALCONY, CENTRAL AC, ADT SECURITY</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$764</span>

                <span class="housing">
                    563ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408000009">

        <a href="https://desmoines.craigslist.org/apa/d/newton-and-bedroom-apartments-available/7408000009.html" class="result-image gallery" data-ids="3:00D0D_gUyNmaFmmpVz_0t20CI,3:00g0g_331lwq2BY9sz_0t20CI,3:00a0a_asy5zBQesenz_0t20CI,3:00909_4EIlOnXiXSUz_0t20CI,3:01717_7AHocbqLyJFz_0t20CI">
                <span class="result-price">$575</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-14 16:23" title="Sun 14 Nov 04:23:05 PM">Nov 14</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/newton-and-bedroom-apartments-available/7408000009.html" data-id="7408000009" class="result-title hdrlnk" id="postid_7408000009" >1 and 2 bedroom apartments available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$575</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Newton  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406755644">

        <a href="https://desmoines.craigslist.org/apa/d/redfield-bedroom-home-in-redfield/7406755644.html" class="result-image gallery" data-ids="3:00v0v_la3dPOwcb55z_0x20oM,3:00G0G_903eEqQDy6Wz_0t20CI,3:00r0r_ah2HAhpSXKcz_0t20CI,3:00V0V_5FF4ggGEWFbz_0t20CI,3:00u0u_6BgBsN8VTeIz_0t20CI,3:00909_5dE091xJDbxz_0t20CI,3:00J0J_btUCtKSLz3jz_0t20CI,3:01717_lGBrEikQIt1z_0t20CI">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-13 21:09" title="Sat 13 Nov 09:09:10 PM">Nov 13</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/redfield-bedroom-home-in-redfield/7406755644.html" data-id="7406755644" class="result-title hdrlnk" id="postid_7406755644" >2 bedroom home in Redfield</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Redfield  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405094171" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7405094171.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-13 12:39" title="Sat 13 Nov 12:39:09 PM">Nov 13</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7405094171.html" data-id="7405094171" class="result-title hdrlnk" id="postid_7405094171" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407132346">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-spacious-bedroom-available/7407132346.html" class="result-image gallery" data-ids="3:00a0a_cfzuaTBQPBAz_0rV0iC,3:00r0r_4w2atlCKHyPz_0rV0iC,3:00r0r_4w2atlCKHyPz_0rV0iC,3:01616_87sf88jWQ4dz_0CI0kO,3:00I0I_c6oNNUTNTpuz_0CI0t2">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-12 15:39" title="Fri 12 Nov 03:39:14 PM">Nov 12</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-spacious-bedroom-available/7407132346.html" data-id="7407132346" class="result-title hdrlnk" id="postid_7407132346" >SPACIOUS \\ 1 bedroom // AVAILABLE SOON</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407124751">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-unique-bedroom-apartments/7407124751.html" class="result-image gallery" data-ids="3:00r0r_4w2atlCKHyPz_0rV0iC,3:00a0a_cfzuaTBQPBAz_0rV0iC,3:01616_87sf88jWQ4dz_0CI0kO,3:00S0S_edm0Mq4iivYz_0CI0pO">
                <span class="result-price">$790</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-12 15:19" title="Fri 12 Nov 03:19:05 PM">Nov 12</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-unique-bedroom-apartments/7407124751.html" data-id="7407124751" class="result-title hdrlnk" id="postid_7407124751" >UNIQUE 1 bedroom apartments - available now!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$790</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402649353" data-repost-of="7373747923">

        <a href="https://desmoines.craigslist.org/apa/d/marshalltown-marshalltown-senior/7402649353.html" class="result-image gallery" data-ids="3:00N0N_hXFBlNtTcPoz_0t20CI,3:00303_819zqzBwuKpz_0t20CI,3:01313_h9A94SiyqHrz_0t20CI,3:00k0k_eNdq9Z8Af48z_0CI0t2,3:00G0G_3Lj5taZN8zmz_0CI0t2,3:00z0z_71Zne2SktKNz_0cU08F,3:00101_eQrdF9t0OIpz_0cU08G">
                <span class="result-price">$650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-12 10:24" title="Fri 12 Nov 10:24:32 AM">Nov 12</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/marshalltown-marshalltown-senior/7402649353.html" data-id="7402649353" class="result-title hdrlnk" id="postid_7402649353" >Marshalltown senior Residences</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$650</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406620497">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-semi-detached/7406620497.html" class="result-image gallery" data-ids="3:00202_gthWGk7E6DEz_0gw0co,3:00R0R_grEYHI7a8zBz_0gw0co,3:01414_5zL0hJrJ4XSz_0gw0co,3:00l0l_8WWZuH7JCHOz_0gw0co,3:00y0y_4ePA1KiUqx2z_0gw0co">
                <span class="result-price">$650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:33" title="Thu 11 Nov 02:33:30 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-semi-detached/7406620497.html" data-id="7406620497" class="result-title hdrlnk" id="postid_7406620497" >/*Amazing semi-detached property 1 BED 1 BA Near University, downtown*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$650</span>

                <span class="housing">
                    1br -
                    750ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Near, Ingersoll Park++++Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399365622">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-courtyard/7399365622.html" class="result-image gallery" data-ids="3:00S0S_kMgZhpawTnoz_0bi07v,3:00K0K_fJYlUvt2eolz_0bi07v,3:00W0W_5401ApJxpoZz_0bi07v,3:00n0n_oV8NCbukC5z_0bi07v,3:00C0C_8fQC1MpFoeLz_0bi07v,3:00Z0Z_2Mn4gc2aAQOz_0bi07v,3:00U0U_1euMfnFjkfbz_0bi07v,3:00G0G_T39IBkHaO8z_0bi07v">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:06" title="Thu 11 Nov 12:06:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-courtyard/7399365622.html" data-id="7399365622" class="result-title hdrlnk" id="postid_7399365622" >Garages Available, Courtyard Views, On-Site Manager</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406514040" data-repost-of="4875768559">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-one-bedroom-on-west-side/7406514040.html" class="result-image gallery" data-ids="3:00s0s_inDbhMk9pZ5z_0CI0t2,3:00I0I_88NzLrsSrlRz_0t20CI,3:00L0L_gEibzqsfZ5Iz_0t20CI,3:00v0v_cvNI8GOTGPwz_0t20CI">
                <span class="result-price">$620</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:47" title="Thu 11 Nov 10:47:23 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-one-bedroom-on-west-side/7406514040.html" data-id="7406514040" class="result-title hdrlnk" id="postid_7406514040" >Nice one bedroom on west side</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$620</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406516443" data-repost-of="4960990382">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-bedroom-on-west-side/7406516443.html" class="result-image gallery" data-ids="3:00s0s_inDbhMk9pZ5z_0CI0t2,3:00I0I_88NzLrsSrlRz_0t20CI,3:00x0x_8kbK2NvAGZ5z_0t20CI,3:00v0v_cvNI8GOTGPwz_0t20CI">
                <span class="result-price">$740</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:41" title="Thu 11 Nov 10:41:28 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-bedroom-on-west-side/7406516443.html" data-id="7406516443" class="result-title hdrlnk" id="postid_7406516443" >Nice 2 Bedroom on west side</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$740</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406479915">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479915.html" class="result-image gallery" data-ids="3:00000_9XgacKJ8DRrz_0d40hq,3:00r0r_hlR3NazDC0Yz_0bi07v,3:00b0b_4YCpbFDUMd3z_0d40hq,3:00E0E_koZZPbRgFinz_0bi07v,3:00G0G_fwOKBfhzy2mz_0bi07v,3:00C0C_GWfvkwiix9z_0bi07v,3:00s0s_6zVcLgrF1xWz_0bi07v,3:00V0V_ifhlI92YOFZz_0bi07v">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:32" title="Thu 11 Nov 09:32:33 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479915.html" data-id="7406479915" class="result-title hdrlnk" id="postid_7406479915" >Laundry in Each Building, New Ownership, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406479486">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479486.html" class="result-image gallery" data-ids="3:00D0D_1nl2L40Dthvz_0bi07v,3:00Q0Q_1rgvomr62orz_0bi07v,3:01212_kfepHcMK8BYz_0bi07v,3:00N0N_4WYcc3NRERPz_0bi07v,3:00X0X_4tIyU1nWJ1Iz_09O0hq,3:01414_95KR5OAzvAiz_0bi07v,3:00N0N_793g4AIAYIRz_09O0hq,3:01010_eWBiWvOfS54z_0ne0hq">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:31" title="Thu 11 Nov 09:31:38 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479486.html" data-id="7406479486" class="result-title hdrlnk" id="postid_7406479486" >Laundry in Each Building, New Ownership, On-Site Manager</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>

                    
                    
                </ul>
            </div>


            <div class="search-legend bottom">
                <div class="search-view">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="search-sort">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">287</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/apa?hasPic=1&amp;max_price=800" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">287</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/apa?s=120&amp;hasPic=1&amp;max_price=800" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

            </div>

            <section class="blurbs">
                
            </section>

            <div id="floater">
                <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                <img class="payload" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
            </div>
        </form>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>

<div class="slidemessage">
    <span class="fave">
        <span class="star"></span>
        favorited
    </span>
    <span class="unfave">
        <span class="star"></span>
        no longer favorited
    </span>
    <span class="hide">
        <span class="trash"></span>
        hidden
    </span>
    <span class="unhide">
        <span class="trash"></span>
        no longer hidden
    </span>
</div>

<footer>
    <ul class="clfooter">
        <li>&copy; 2021 <span class="desktop">craigslist</span><span class="mobile">CL</span></li>
        <li><a href="https://www.craigslist.org/about/help/">help</a></li>
        <li><a href="https://www.craigslist.org/about/scams">safety</a></li>
        <li class="desktop"><a href="https://www.craigslist.org/about/privacy.policy">privacy</a><sup class="neu">new</sup></li>
        <li class="desktop"><a href="https://forums.craigslist.org/?forumID=8">feedback</a></li>
        <li><a href="https://www.craigslist.org/about/terms.of.use">terms</a></li>
        <li><a href="https://www.craigslist.org/about/">about</a></li>
        <li class="fsel desktop linklike" data-mode="mobile">mobile</li>
        <li class="fsel mobile linklike" data-mode="regular">desktop</li>
    </ul>
</footer>
    </section>

<template id="gallerycarousel">
    <div class="slider-info"></div><div class="slider-back arrow">&lt;</div><div class="slider-forward arrow">&gt;</div>
</template>

<script type="text/template" id="clustertemplate">
    <li class="posting {visited}" data-pid="{PostingID}">
        <img src="{ImageThumb}">
        <div class="housing_bubble_banner">
            <span class="{hasPrice}price">{currencySymbol}{price}</span>
            <span class="bedrooms">{BedroomsContent}</span>
            <span class="postingtitle"><a>{PostingTitle}</a></span>
            <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                <span class="banish">
                    <span class="icon icon-trash" role="button"></span>
                    <span class="screen-reader-text">hide this posting</span>
                </span>
                <span class="unbanish">
                    <span class="icon icon-trash red" role="button"></span>
                    unhide
                </span>
            </span>
        </div>
    </li>
</script>
<script type="text/template" id="postingtemplate">
    <div class="viewcontainer pics loading">
        <div class="backtolist">
            &laquo; back to posting list
        </div>
        <div class="title">
            <span class="icon icon-star" data-pid="{PostingID}" role="button">
                <span class="screen-reader-text">favorite this post</span>
            </span>
            <span class="postingtitle">
                <a href="{PostingURL}" target="_blank">{PostingTitle}</a>
            </span>
            <div>
                <span class="{hasPrice}price">{currencySymbol}{price}</span>
                <span class="bedrooms">{BedroomsContent}</span>
                <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                    <span class="banish">
                        <span class="icon icon-trash" role="button"></span>
                        <span class="screen-reader-text">hide this posting</span>
                    </span>
                    <span class="unbanish">
                        <span class="icon icon-trash red" role="button"></span>
                        <span class="screen-reader-text">unhide</span>
                        unhide
                    </span>
                </span>
            </div>
        </div>
        <hr style="clear:both">
        <div class="picscontainer gallery">
            <span class="slider-back arrow">&lt;</span><span class="slider-info"></span><span class="slider-forward arrow">&gt;</span>
            <div class="swipe">
                <div class="swipe-wrap">
                    <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                </div>
            </div>
        </div>
        <div class="infocontainer"></div>
        <hr style="clear:both">
        <div class="timecontainer"></div>
        <a class="viewpostinglink" href="{PostingURL}" target="_blank">view posting</a>
        <div class="contenttoggle">
            <a class="moreinfo">more info</a>
            <a class="showpics">show images</a>
        </div>
    </div>
</script>
<script type="text/template" id="popuptemplate">
    <div id="mapbubble" class="posting">
        <ul id="clusterbubble"></ul>
        <div id="postbubble"></div>
    </div>
</script>


</body>
</html>

  recorded_at: Tue, 23 Nov 2021 04:09:46 GMT
recorded_with: VCR 6.0.0
