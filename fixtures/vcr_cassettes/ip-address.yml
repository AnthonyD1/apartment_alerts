---
http_interactions:
- request:
    method: get
    uri: https://ipinfo.io/ip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14'
      Date:
      - Fri, 12 Nov 2021 03:15:29 GMT
      X-Envoy-Upstream-Service-Time:
      - '1'
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
    body:
      encoding: UTF-8
      string: 94.230.208.147
  recorded_at: Fri, 12 Nov 2021 03:15:29 GMT
- request:
    method: get
    uri: https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Last-Modified:
      - Fri, 12 Nov 2021 03:11:17 GMT
      Cache-Control:
      - max-age=900, public
      Date:
      - Fri, 12 Nov 2021 03:11:16 GMT
      Vary:
      - Accept-Encoding
      Content-Length:
      - '39037'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Server:
      - Apache
      Expires:
      - Fri, 12 Nov 2021 03:26:17 GMT
      Set-Cookie:
      - cl_b=4|f526788c902c3736d915f07a940a16787f538a23|1636686932tQIxI;path=/;domain=.craigslist.org;secure;expires=Fri,
        01-Jan-2038 00:00:00 GMT
      Strict-Transport-Security:
      - max-age=63072000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html>
<head>
    
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta property="og:site_name" content="craigslist">
	<meta name="twitter:card" content="preview">
	<meta property="og:title" content="des moines apartments / housing for rent - craigslist">
	<meta name="description" content="des moines apartments / housing for rent - craigslist">
	<meta property="og:description" content="des moines apartments / housing for rent - craigslist">
	<meta property="og:url" content="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa">
	<title>des moines apartments / housing for rent - craigslist</title>
	<link rel="canonical" href="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa">
	<link rel="next" href="https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa?s=120">



<script type="application/ld+json" id="ld_breadcrumb_data" >
    {"@context":"https://schema.org","itemListElement":[{"item":{"name":"desmoines.craigslist.org","@id":"https://desmoines.craigslist.org"},"position":1,"@type":"ListItem"},{"item":{"name":"housing","@id":"https://desmoines.craigslist.org/d/housing/search/hhh"},"position":2,"@type":"ListItem"},{"item":{"name":"apartments / housing for rent","@id":"https://desmoines.craigslist.org/d/apartments-housing-for-rent/search/apa"},"position":3,"@type":"ListItem"}],"@type":"BreadcrumbList"}
</script>

    <style type="text/css">
        body {
            font-family: sans-serif;
        }

        #no-js,
        #unsupported-browser {
            position: fixed;
            z-index: 10000;

            top: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        #no-js p,
        #unsupported-browser p {
            color: black;
            background-color: #FA8787;
            opacity: 0.8;
            text-align: center;
            margin: 0;
            border: 0;
            padding: 1em;
        }

        #unsupported-browser {
            display: none;
        }

        .unsupported-browser #unsupported-browser {
            display: block;
        }

        .no-js header,
        .no-js form,
        .no-js .tryapp,
        .no-js .tsb,
        .unsupported-browser header,
        .unsupported-browser form,
        .unsupported-browser .tryapp,
        .unsupported-browser .tsb {
            display: none;
        }

        #curtain {
            display: none;
            position: fixed;
            z-index: 9000;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        .show-curtain #curtain {
            display: block;
        }

        #curtain .cover,
        #curtain .content {
            position: absolute;
            display: block;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
        }

        #curtain .cover {
            z-index: 1;
            background-color: white;
        }

        .show-curtain #curtain .cover {
            opacity: 0.5;
        }

        .show-curtain.clear #curtain .cover {
            opacity: 0;
        }

        .show-curtain.opaque #curtain .cover {
            opacity: 1;
        }

        #curtain .content {
            z-index: 2;
            background: transparent;
            color: #00E;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(359deg);
            }
        }

        .pacify #curtain .icom- {
            font-size: 3em;
            animation: rotate 2s infinite linear;
        }

        .pacify #curtain .icom-:after {
            content: "\eb23";
        }

        #curtain .text {
            display: none;
            font-size: 2em;
        }

        .loading #curtain .text.loading,
        .reading #curtain .text.reading,
        .writing #curtain .text.writing,
        .saving #curtain .text.saving,
        .searching #curtain .text.searching,
        .unrecoverable #curtain .text.unrecoverable,
        .message #curtain .text.message {
            display: block;
        }
    </style>


    
     
     <script src="https://www.craigslist.org/static/www/030feed3cf43bf94976c889a1a0ceb5cdd7ebafa.js"></script>
     <script>
         window.cl.init(
             'https://www.craigslist.org/static/www/',
             '',
             'www',
             'browsePostings',
             {
areaCountry: "US",
areaID: "98",
areaRegion: "IA",
catAbb: "apa",
countOfTotalText: "image {count} of {total}",
currencySymbol: "&#x0024;",
defaultLocale: "en_US",
defaultView: "grid",
expiredFavIDs: null,
imageConfig: {"1":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"4":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"0":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450"]},"3":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"2":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]}},
lessInfoText: "less info",
locString: "",
maptileBaseUrl: "//map{s}.craigslist.org/t09/{z}/{x}/{y}.png",
maxResults: 3000,
noImageText: "no image",
pID: null,
postalLat: null,
postalLon: null,
purveyorCategories: null,
searchDistance: null,
sectionAbb: "hhh",
sectionBase: "hhh",
showInfoText: "show info",
showMapTabs: 1,
showingBanished: 0,
showingFavorites: 0,
starHint: "save this post in your favorites list",
subarea: null,
zoomToPosting: null
},
             0
         );
     </script>
     
</head>
<body class="no-js show-curtain opaque search has-map" >
    
    <iframe id="cl-local-storage" src="https://www.craigslist.org/static/www/localStorage-092e9f9e2f09450529e744902aa7cdb3a5cc868d.html" style="display:none;"></iframe>
    

    <div id="curtain">
        <div class="cover"></div>
        <div class="content">
            <div class="icom-"></div>
            <div class="text loading">loading</div>
            <div class="text reading">reading</div>
            <div class="text writing">writing</div>
            <div class="text saving">saving</div>
            <div class="text searching">searching</div>
            <div class="text unrecoverable">
                There was an error loading the page; please try to
                <a id="cl-unrecoverable-hard-refresh" href="#" onclick="location.reload(true);">refresh the page.</a>
            </div>
            <div class="text message"></div>
        </div>
    </div>
    <noscript id="no-js"><div>
        <p>We've detected that JavaScript is not enabled in your browser.</p>
        <p>You must enable JavaScript to use craigslist.</p>
    </div></noscript>
    <div id="unsupported-browser">
        <p>We've detected you are using a browser that is missing critical features.</p>
        <p>Please visit craigslist from a modern browser.</p>
    </div>

    <section class="page-container" id="page-top" data-areaid="98">
        <div class="bglogo"></div>
        <div class="tryapp">
    try the craigslist app &raquo;
    <a class="appstorebtn"
    href="https://play.google.com/store/apps/details?id=org.craigslist.CraigslistMobile">
        Android
    </a>
    <a class="appstorebtn"
    href="https://apps.apple.com/us/app/craigslist/id1336642410">
        iOS
    </a>
</div>
<header class="global-header wide">
   <a class="header-logo" name="logoLink" href="https://desmoines.craigslist.org/">CL</a>

    <nav class="breadcrumbs-container">
<form id="breadcrumbform" class="breadcrumbs-form" method="get" action="/search/apa" data-action="/search/###/apa">
    
    <ul class="breadcrumbs ">
        <li class="crumb area">
            
            <span class="no-js">
                <a href="/">des moines</a>
            </span>
                <select name="areaAbb" id="areaAbb" class="js-only">
                    <option value="desmoines">des moines</option>
                        <option value="ames">ames, IA</option>
                        <option value="cedarrapids">cedar rapids</option>
                        <option value="columbiamo">columbia, MO</option>
                        <option value="dubuque">dubuque</option>
                        <option value="fortdodge">fort dodge</option>
                        <option value="iowacity">iowa city</option>
                        <option value="kansascity">kansas city</option>
                        <option value="kirksville">kirksville</option>
                        <option value="lacrosse">la crosse</option>
                        <option value="lawrence">lawrence</option>
                        <option value="lincoln">lincoln</option>
                        <option value="ksu">manhattan</option>
                        <option value="mankato">mankato</option>
                        <option value="masoncity">mason city</option>
                        <option value="omaha">omaha</option>
                        <option value="peoria">peoria</option>
                        <option value="quadcities">quad cities</option>
                        <option value="rmn">rochester, MN</option>
                        <option value="siouxcity">sioux city</option>
                        <option value="siouxfalls">sioux falls</option>
                        <option value="ottumwa">southeast IA</option>
                        <option value="marshall">southwest MN</option>
                        <option value="stjoseph">st joseph</option>
                        <option value="topeka">topeka</option>
                        <option value="waterloo">waterloo</option>
                        <option value="quincy">western IL</option>
                </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb section">
                    <select name="catAbb" id="catAbb">
                        <option value="ccc">community</option>
                        <option value="eee">events</option>
                        <option value="sss">for sale</option>
                        <option value="ggg">gigs</option>
                        <option value="hhh" selected>housing</option>
                        <option value="jjj">jobs</option>
                        <option value="rrr">resumes</option>
                        <option value="bbb">services</option>
                    </select>
                <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb category">
            <select id="subcatAbb" class="js-only">
                <option value="hhh">all</option>
                    <option value="apa" selected>apartments / housing for rent</option>
                    <option value="swp">housing swap</option>
                    <option value="off">office &amp; commercial</option>
                    <option value="prk">parking &amp; storage</option>
                    <option value="reb">real estate - by broker</option>
                    <option value="reo">real estate - by owner</option>
                    <option value="roo">rooms &amp; shares</option>
                    <option value="sub">sublets &amp; temporary</option>
                    <option value="vac">vacation rentals</option>
                    <option value="hou">wanted: apts</option>
                    <option value="rew">wanted: real estate</option>
                    <option value="sha">wanted: room/share</option>
                    <option value="sbw">wanted: sublet/temp</option>
            </select><span class="no-js">apartments / housing for rent</span>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb no-js">
            <input type="submit" value="go">
        </li>
    </ul>
</form>
    </nav>

<div class="userlinks">
    <ul class="user-actions">
        <li class="user post">
            <a href="https://post.craigslist.org/c/dsm">post</a>
        </li>
        <li class="user account">
            <a href="https://accounts.craigslist.org/login/home">account</a>
        </li>
    </ul>
    <ul class="user-favs-discards">
        <li class="user">
            <div class="favorites">
                <a href="#" class="favlink"><span class="icon icon-star fav" aria-hidden="true"></span><span class="fav-number">0</span><span class="fav-label"> favorites</span></a>
            </div>
        </li>
        <li class="user discards">
            <div class="to-banish-page">
                <a href="#" class="to-banish-page-link">
                    <span class="icon icon-trash red" aria-hidden="true"></span>
                    <span class="banished_count">0</span>
                    <span class="discards-label"> hidden</span>
                </a>
            </div>
        </li>
    </ul>
</div>

</header>
<header class="global-header narrow">
   <a class="header-logo" href="https://desmoines.craigslist.org/">CL</a>
    <nav class="breadcrumbs-container">

    <h1 class="breadcrumbs">

des moines            &gt;

apartments / housing for rent    </h1>


    </nav>
    <span class="linklike show-wide-header">...</span>
</header>


        <form id="searchform" class="search-form" action="/d/apartments-housing-for-rent/search/apa" >
            <div class="querybox">
                <div class="form-tab js-only"><span class="search-open" title="hide search">&laquo;</span><span class="search-closed" title="show search">&raquo;</span></div>
                <input type="text" placeholder="search apartments / housing for rent" name="query"
                    id="query" value="" autocorrect="off" class="flatinput ui-autocomplete-input"
                    autocapitalize="off" autocomplete="off" data-autocomplete="search">

                <button type="submit" class="searchbtn">
                    <span class="icon icon-search" aria-hidden="true"></span>
                    <span class="screen-reader-text">press to search craigslist</span>
                </button>
                    <div class="savealert">
                        <a class="saveme" data-action="save"  href="https://accounts.craigslist.org/savesearch/save?URL=https%3A%2F%2Fdesmoines%2Ecraigslist%2Eorg%2Fd%2Fapartments%2Dhousing%2Dfor%2Drent%2Fsearch%2Fapa"  title="save this search" >save search</a>
                    </div>
            </div>

            <div class="search-options-container">
    <h1 class="cattitle">
            <a href="/d/apartments-housing-for-rent/search/apa" title="clear all search parameters" class="reset">apartments / housing for rent</a>
    </h1>
    <div class="search-options-header linklike">
        <div class="icon icon-toggle-gear" aria-hidden="true"></div>
        options<span class="options-close">close</span>
    </div>
    <input id="excats" type="hidden" name="excats">
    <div class="search-options">
        <div class="searchgroup categories">
        </div>
        <input type="hidden" name="userid" value="" />





        <div class="searchgroup" id="basic-bools">
            <ul>
    <li>
       <label class="srchType">
           <input type="checkbox" name="srchType" class="" value="T" >
           search titles only
       </label>
    </li>
    <li>
       <label class="hasPic">
           <input type="checkbox" name="hasPic" class="autosubmit" value="1" >
           has image
       </label>
    </li>
    <li>
       <label class="postedToday">
           <input type="checkbox" name="postedToday" class="autosubmit" value="1" >
           posted today
       </label>
    </li>
    <li>
       <label class="bundleDuplicates">
           <input type="checkbox" name="bundleDuplicates" class="autosubmit" value="1" >
           bundle duplicates
       </label>
    </li>
    <li>
       <label class="searchNearby">
           <input type="checkbox" name="searchNearby" class="autosubmit" value="1" >
           include nearby areas
       </label>
    </li>
</ul>

                <ul class="js-only nearbyAreas ">
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_0"
                            value="445"
                            disabled="disabled"
                            />
                            ames, IA <small>(ame)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_35"
                            value="344"
                            disabled="disabled"
                            />
                            bloomington-normal <small>(bln)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_4"
                            value="340"
                            disabled="disabled"
                            />
                            cedar rapids, IA <small>(ced)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_40"
                            value="190"
                            disabled="disabled"
                            />
                            champaign urbana <small>(chm)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_44"
                            value="11"
                            disabled="disabled"
                            />
                            chicago <small>(chi)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_19"
                            value="222"
                            disabled="disabled"
                            />
                            columbia / jeff city <small>(cou)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_37"
                            value="569"
                            disabled="disabled"
                            />
                            decatur, IL <small>(dil)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_12"
                            value="362"
                            disabled="disabled"
                            />
                            dubuque <small>(dbq)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_32"
                            value="242"
                            disabled="disabled"
                            />
                            eau claire, WI <small>(eau)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_1"
                            value="693"
                            disabled="disabled"
                            />
                            fort dodge, IA <small>(ftd)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_34"
                            value="432"
                            disabled="disabled"
                            />
                            grand island, NE <small>(gil)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_5"
                            value="339"
                            disabled="disabled"
                            />
                            iowa city, IA <small>(iac)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_33"
                            value="553"
                            disabled="disabled"
                            />
                            janesville, WI <small>(jvl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_17"
                            value="30"
                            disabled="disabled"
                            />
                            kansas city, MO <small>(ksc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_42"
                            value="552"
                            disabled="disabled"
                            />
                            kenosha-racine <small>(rac)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_7"
                            value="696"
                            disabled="disabled"
                            />
                            kirksville, MO <small>(krk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_18"
                            value="363"
                            disabled="disabled"
                            />
                            la crosse, WI <small>(lse)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_27"
                            value="698"
                            disabled="disabled"
                            />
                            la salle co <small>(lsl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_30"
                            value="695"
                            disabled="disabled"
                            />
                            lake of the ozarks <small>(loz)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_20"
                            value="347"
                            disabled="disabled"
                            />
                            lawrence, KS <small>(lwr)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_14"
                            value="282"
                            disabled="disabled"
                            />
                            lincoln, NE <small>(lnk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_29"
                            value="165"
                            disabled="disabled"
                            />
                            madison, WI <small>(mad)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_25"
                            value="428"
                            disabled="disabled"
                            />
                            manhattan, KS <small>(mhk)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_16"
                            value="421"
                            disabled="disabled"
                            />
                            mankato, MN <small>(mkt)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_6"
                            value="692"
                            disabled="disabled"
                            />
                            mason city, IA <small>(msc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_45"
                            value="47"
                            disabled="disabled"
                            />
                            milwaukee, WI <small>(mil)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_26"
                            value="19"
                            disabled="disabled"
                            />
                            minneapolis / st paul <small>(min)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_8"
                            value="55"
                            disabled="disabled"
                            />
                            omaha / council bluffs <small>(oma)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_23"
                            value="224"
                            disabled="disabled"
                            />
                            peoria, IL <small>(pia)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_10"
                            value="307"
                            disabled="disabled"
                            />
                            quad cities, IA/IL <small>(mli)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_15"
                            value="316"
                            disabled="disabled"
                            />
                            rochester, MN <small>(rmn)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_28"
                            value="223"
                            disabled="disabled"
                            />
                            rockford, IL <small>(rfd)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_39"
                            value="690"
                            disabled="disabled"
                            />
                            salina, KS <small>(sns)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_11"
                            value="341"
                            disabled="disabled"
                            />
                            sioux city, IA <small>(sux)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_21"
                            value="679"
                            disabled="disabled"
                            />
                            sioux falls / SE SD <small>(fsd)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_2"
                            value="691"
                            disabled="disabled"
                            />
                            southeast IA <small>(otu)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_4">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_24"
                            value="665"
                            disabled="disabled"
                            />
                            southwest MN <small>(mml)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_5">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_31"
                            value="225"
                            disabled="disabled"
                            />
                            springfield, IL <small>(spi)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_41"
                            value="221"
                            disabled="disabled"
                            />
                            springfield, MO <small>(sgf)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_38"
                            value="369"
                            disabled="disabled"
                            />
                            st cloud, MN <small>(stc)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_1">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_9"
                            value="694"
                            disabled="disabled"
                            />
                            st joseph <small>(stj)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_6">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_36"
                            value="29"
                            disabled="disabled"
                            />
                            st louis, MO <small>(stl)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_3">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_22"
                            value="280"
                            disabled="disabled"
                            />
                            topeka, KS <small>(tpk)</small>
                        </label>
                        </li>
                        <li class="">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_3"
                            value="567"
                            disabled="disabled"
                            />
                            waterloo / cedar falls <small>(wlo)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_7">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_43"
                            value="458"
                            disabled="disabled"
                            />
                            wausau, WI <small>(wau)</small>
                        </label>
                        </li>
                        <li class="nearbyZone nearbyZone_2">
                        <label class="nearby">
                            <input
                            type="checkbox"
                            class="use-id nearbyArea"
                            name="nearbyArea"
                            id="nearbyArea_13"
                            value="697"
                            disabled="disabled"
                            />
                            western IL <small>(qcy)</small>
                        </label>
                        </li>

                        <li>
                        <span class="nextNearbyZone linklike" data-zone="1">
                            + show <span id="nearbyNumber">46</span> more...
                        </span>
                        </li>
                </ul>
        </div>

            <div class="searchgroup">
                <span class="searchfieldlabel">miles from location</span>
                <input size="5" maxlength="5" inputmode="numeric"
                    class="flatinput searchInput search_distance" placeholder="miles"
                    name="search_distance"
                    value=""
                />
                <input type="text" class="flatinput searchInput postal" placeholder="from zip"
                    size="7" name="postal" value="">
                <span class="icon icon-locate"></span>
            </div>


    <div class="searchgroup minmax price" id="price">
<span class="searchfieldlabel">price</span>
    <input type="tel" name="min_price" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="max_price" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>


  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bedrooms</span>
    <select name="min_bedrooms" class="autosubmit">
      <option value="">min</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bedrooms" class="autosubmit">
      <option value="">max</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bathrooms</span>
    <select name="min_bathrooms" class="autosubmit">
      <option value="">min</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bathrooms" class="autosubmit">
      <option value="">max</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

    <div class="searchgroup minmax " id="">
<span class="searchfieldlabel">ft<sup>2</sup></span>
    <input type="tel" name="minSqft" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="maxSqft" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>

<div class="searchgroup">
  <span class="searchfieldlabel">availability</span>
  <select class="autosubmit" name="availabilityMode">
        <option value="0">all dates</option>
        <option value="1">within 30 days</option>
        <option value="2">beyond 30 days</option>
 </select>
</div>

<div class="searchgroup search-group-checkbox">
<label class="pets_cat">
        <input type="checkbox" name="pets_cat" value="1" class="autosubmit" />
    cats ok
</label><br>
<label class="pets_dog">
        <input type="checkbox" name="pets_dog" value="1" class="autosubmit" />
    dogs ok
</label><br>
<label class="is_furnished">
        <input type="checkbox" name="is_furnished" value="1" class="autosubmit" />
    furnished
</label><br>
<label class="no_smoking">
        <input type="checkbox" name="no_smoking" value="1" class="autosubmit" />
    no smoking
</label><br>
<label class="wheelchaccess">
        <input type="checkbox" name="wheelchaccess" value="1" class="autosubmit" />
    wheelchair access
</label><br>
<label class="airconditioning">
        <input type="checkbox" name="airconditioning" value="1" class="autosubmit" />
    air conditioning
</label><br>
<label class="ev_charging">
        <input type="checkbox" name="ev_charging" value="1" class="autosubmit" />
    EV charging
</label><br>
<label class="application_fee">
        <input type="checkbox" name="application_fee" value="1" class="autosubmit" />
    no application fee
</label><br>
<label class="broker_fee">
        <input type="checkbox" name="broker_fee" value="1" class="autosubmit" />
    no broker fee
</label><br>
</div>

<div class="searchgroup search-group-multi_checkbox">
<div class="search-attribute hide-list" data-attr="housing_type">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> housing type
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="housing_type_1" name="housing_type" class="multi_checkbox" value="1" type="checkbox"
                     />
                    apartment
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_2" name="housing_type" class="multi_checkbox" value="2" type="checkbox"
                     />
                    condo
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_3" name="housing_type" class="multi_checkbox" value="3" type="checkbox"
                     />
                    cottage/cabin
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_4" name="housing_type" class="multi_checkbox" value="4" type="checkbox"
                     />
                    duplex
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_5" name="housing_type" class="multi_checkbox" value="5" type="checkbox"
                     />
                    flat
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_6" name="housing_type" class="multi_checkbox" value="6" type="checkbox"
                     />
                    house
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_7" name="housing_type" class="multi_checkbox" value="7" type="checkbox"
                     />
                    in-law
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_8" name="housing_type" class="multi_checkbox" value="8" type="checkbox"
                     />
                    loft
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_9" name="housing_type" class="multi_checkbox" value="9" type="checkbox"
                     />
                    townhouse
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_10" name="housing_type" class="multi_checkbox" value="10" type="checkbox"
                     />
                    manufactured
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_11" name="housing_type" class="multi_checkbox" value="11" type="checkbox"
                     />
                    assisted living
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_12" name="housing_type" class="multi_checkbox" value="12" type="checkbox"
                     />
                    land
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="laundry">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> laundry
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="laundry_1" name="laundry" class="multi_checkbox" value="1" type="checkbox"
                     />
                    w/d in unit
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_4" name="laundry" class="multi_checkbox" value="4" type="checkbox"
                     />
                    w/d hookups
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_2" name="laundry" class="multi_checkbox" value="2" type="checkbox"
                     />
                    laundry in bldg
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_3" name="laundry" class="multi_checkbox" value="3" type="checkbox"
                     />
                    laundry on site
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_5" name="laundry" class="multi_checkbox" value="5" type="checkbox"
                     />
                    no laundry on site
                </label>
            </li>



    </ul>
</div>
<div class="search-attribute hide-list" data-attr="parking">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> parking
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="parking_1" name="parking" class="multi_checkbox" value="1" type="checkbox"
                     />
                    carport
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_2" name="parking" class="multi_checkbox" value="2" type="checkbox"
                     />
                    attached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_3" name="parking" class="multi_checkbox" value="3" type="checkbox"
                     />
                    detached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_4" name="parking" class="multi_checkbox" value="4" type="checkbox"
                     />
                    off-street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_5" name="parking" class="multi_checkbox" value="5" type="checkbox"
                     />
                    street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_6" name="parking" class="multi_checkbox" value="6" type="checkbox"
                     />
                    valet parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_7" name="parking" class="multi_checkbox" value="7" type="checkbox"
                     />
                    no parking
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="rent_period">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> rent period
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="rent_period_1" name="rent_period" class="multi_checkbox" value="1" type="checkbox"
                     />
                    daily
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_2" name="rent_period" class="multi_checkbox" value="2" type="checkbox"
                     />
                    weekly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_3" name="rent_period" class="multi_checkbox" value="3" type="checkbox"
                     />
                    monthly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_4" name="rent_period" class="multi_checkbox" value="4" type="checkbox"
                     />
                    yearly
                </label>
            </li>



    </ul>
</div>
</div>


            <div class="searchgroup">
                    <div class="searchfieldlabel">open house date</div>
                <select class="autosubmit" id="sale_date" name="sale_date">
                    <option>all dates</option>
                        <option value="2021-11-11">nov 11 - today</option>
                        <option value="2021-11-12">nov 12 - tomorrow</option>
                        <option value="2021-11-13">nov 13 - saturday</option>
                        <option value="2021-11-14">nov 14 - sunday</option>
                        <option value="2021-11-15">nov 15 - monday</option>
                        <option value="2021-11-16">nov 16 - tuesday</option>
                        <option value="2021-11-17">nov 17 - wednesday</option>
                        <option value="2021-11-18">nov 18 - thursday</option>
                        <option value="2021-11-19">nov 19 - friday</option>
                        <option value="2021-11-20">nov 20 - saturday</option>
                        <option value="2021-11-21">nov 21 - sunday</option>
                        <option value="2021-11-22">nov 22 - monday</option>
                        <option value="2021-11-23">nov 23 - tuesday</option>
                        <option value="2021-11-24">nov 24 - wednesday</option>
                        <option value="2021-11-25">nov 25 - thursday</option>
                        <option value="2021-11-26">nov 26 - friday</option>
                        <option value="2021-11-27">nov 27 - saturday</option>
                        <option value="2021-11-28">nov 28 - sunday</option>
                        <option value="2021-11-29">nov 29 - monday</option>
                        <option value="2021-11-30">nov 30 - tuesday</option>
                        <option value="2021-12-01">dec 1 - wednesday</option>
                        <option value="2021-12-02">dec 2 - thursday</option>
                        <option value="2021-12-03">dec 3 - friday</option>
                        <option value="2021-12-04">dec 4 - saturday</option>
                        <option value="2021-12-05">dec 5 - sunday</option>
                        <option value="2021-12-06">dec 6 - monday</option>
                        <option value="2021-12-07">dec 7 - tuesday</option>
                        <option value="2021-12-08">dec 8 - wednesday</option>
                </select>
            </div>
        <div class="searchgroup resetsearch">
            <a href="/d/apartments-housing-for-rent/search/apa" title="clear all search parameters" class="reset linklike">reset</a>
            <button type="submit" class="searchlink linklike">update search</button>
        </div>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>
    </div>
</div>


            <div class="search-legend">
<div class="search-view js-only">
    <div class="dropdown dropdown-icons dropdown-arrows dropdown-view" role="toolbar" aria-label="view options" aria-expanded="false">
        <ul class="dropdown-list">
            <li class="dropdown-item mode sel">
                <button title="show results in a list" data-selection="list" id="listview">
                    <span class="view-list icon"></span>list
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results in a list with thumbnail pictures"  data-selection="pic"  id="picview" >
                    <span class="view-thumb icon"></span>thumb
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results side-by-side with larger pictures" data-selection="grid" id="gridview">
                    <span class="view-gallery icon"></span>gallery
                </button>
                <span class="toggle-arrow"></span>
            </li>
                <li class="dropdown-item mode">
                    <button title="show results on a map"  data-selection="map"  id="mapview" >
                        <span class="view-map icon"></span>map
                    </button>
                    <span class="toggle-arrow"></span>
                </li>
        </ul>
    </div>
</div>
                <div class="search-sort" >
    <div class="dropdown dropdown-sort dropdown-arrows" data-default-sort="date" role="toolbar" aria-label="sort options" aria-expanded="false">
        <ul class="dropdown-list">

            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="upcoming" title="show upcoming open houses" href="/d/apartments-housing-for-rent/search/apa?sort=upcoming&amp;">upcoming <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode sel" aria-selected="true">
                <a data-selection="date" title="show newest matches first" href="/d/apartments-housing-for-rent/search/apa?sort=date&amp;">newest <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="priceasc" title="sort by price, lowest to highest" href="/d/apartments-housing-for-rent/search/apa?sort=priceasc&amp;">price ↑ <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="pricedsc" title="sort by price, highest to lowest" href="/d/apartments-housing-for-rent/search/apa?sort=pricedsc&amp;">price ↓ <span class="toggle-arrow"></span></a>
            </li>

        </ul>
    </div>
</div>

                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">1788</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/apa" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/apa" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">1788</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/apa?s=120" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

                
            </div>
            <div class="content" id="sortable-results" >
                <section class="favlistsection">
                    <section class="favlistinfo">
                    </section>
                    <section class="banishlistinfo">
                    </section>
                </section>


                    


<div class="open-map-view-button">
    <span>see in map view</span>
</div>
<div id="mapcontainer" data-arealat="41.600601" data-arealon="-93.608902">
    <div id="noresult-overlay"></div>
    <div id="noresult-text">
        <span class="message">No mappable items found</span>
    </div>
    <div id="map" class="loading">
        <div class="close-full-screen-map-mode-button">close fullscreen</div>
    </div>
</div>

                <ul class="rows" id="search-results">
                             <li class="result-row" data-pid="7401143287" data-repost-of="7385868085">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-looking-for-pet-friendly-apt/7401143287.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:41" title="Thu 11 Nov 08:41:02 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-looking-for-pet-friendly-apt/7401143287.html" data-id="7401143287" class="result-title hdrlnk" id="postid_7401143287" >Looking for pet friendly apt house or trailer</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$600</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Altoona or close to it  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401076458">

        <a href="https://desmoines.craigslist.org/apa/d/norwalk-fresh-air-living-apartment/7401076458.html" class="result-image gallery" data-ids="3:00o0o_Te3305bs9gz_0CI0t2,3:00404_1rTNHw5JXVKz_0CI0lM,3:01717_baYo3c3p391z_0CI0t2,3:00404_bpwjGxHdzdVz_0t20CI,3:00Q0Q_1W72uFWRch3z_0CI0lM,3:00A0A_6b2jFVOLTC0z_0CI0lM,3:00505_4vBOko6n3J4z_0CI0lM,3:01010_llQIljYNXV3z_0CI0lM,3:00C0C_4Nra44PFf0Bz_0tq0pq,3:00N0N_TMVuqUFCgKz_0gl0t2">
                <span class="result-price">$895</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:30" title="Thu 11 Nov 08:30:24 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/norwalk-fresh-air-living-apartment/7401076458.html" data-id="7401076458" class="result-title hdrlnk" id="postid_7401076458" >Fresh Air Living Apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$895</span>

                <span class="housing">
                    1br -
                    950ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (15 minutes south of DSM airport, 5 miles south of Norwalk  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404535356">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-clean-updated-2br-1ba/7404535356.html" class="result-image gallery" data-ids="3:00j0j_4HCDi4cqtnRz_09G07g,3:00H0H_cxCur73FmLVz_0kE0fu,3:00808_f4hCpW8IQ8cz_0kE0fu,3:00G0G_lCE7x8NBcLwz_0kE0fu,3:00s0s_hrR3YbhQk78z_0kE0fu,3:00404_h4ZBFr4KvxZz_0kE0fu,3:00G0G_2ZJW7mVcWSwz_0kE0fu,3:00D0D_1JnnUiIW99qz_0kE0fu,3:00707_fVa58bZI0hFz_0kE0fu,3:00F0F_78tlpQfDFxqz_0kE0fu,3:01313_2kyyZeFdwfFz_0kE0fu,3:00202_6FSKVJaHtj7z_0kE0fu,3:00d0d_g2Jz2Abcncqz_0kE0fu">
                <span class="result-price">$1,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:27" title="Thu 11 Nov 08:27:25 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-clean-updated-2br-1ba/7404535356.html" data-id="7404535356" class="result-title hdrlnk" id="postid_7404535356" >Clean updated 2BR/1BA Urbandale duplex</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,000</span>

                <span class="housing">
                    2br -
                    960ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Urbandale  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7398902331">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7398902331.html" class="result-image gallery" data-ids="3:00808_1nTWq8rsFhYz_0bi07v,3:00h0h_gquRiYIuIT4z_0bi07v,3:00Q0Q_a99oO3iRXOZz_07g042,3:00S0S_lDZD8o3VUIPz_0bi07v,3:01717_dgwG3oyumrcz_0bi07v,3:00I0I_b2OiDUQbD5Tz_0bi07v,3:00D0D_96UIvynv5SUz_0bi07v,3:00c0c_16TrH29muHtz_0bi07v">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:33" title="Thu 11 Nov 06:33:07 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7398902331.html" data-id="7398902331" class="result-title hdrlnk" id="postid_7398902331" >24 Hour Emergency Maintenance, New Ownership, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405194509">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-in-ready-updated-2br/7405194509.html" class="result-image gallery" data-ids="3:00n0n_2IZLF6RaZIPz_0t20CI,3:00Z0Z_87b338Vf8u2z_0t20CI,3:00E0E_9Cdbbj67nu0z_0t20CI,3:00P0P_9BWbs8jqH6zz_0t20CI,3:00V0V_dMzDSGWkrZDz_0t20CI,3:00M0M_c8XWApjqRYTz_0t20CI,3:00p0p_h3Wh9wDzRPTz_0t20CI,3:00p0p_4m1FtUHovXfz_0t20CI,3:00n0n_2a6FzZWmNIvz_0t20CI,3:00w0w_bfzfcQnZwiOz_0t20CI">
                <span class="result-price">$1,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:29" title="Thu 11 Nov 06:29:28 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-in-ready-updated-2br/7405194509.html" data-id="7405194509" class="result-title hdrlnk" id="postid_7405194509" >Move in ready, updated 2BR Drake House</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,250</span>

                <span class="housing">
                    2br -
                    895ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406755644">

        <a href="https://desmoines.craigslist.org/apa/d/redfield-bedroom-home-in-redfield/7406755644.html" class="result-image gallery" data-ids="3:00v0v_la3dPOwcb55z_0x20oM,3:00G0G_903eEqQDy6Wz_0t20CI,3:00r0r_ah2HAhpSXKcz_0t20CI,3:00V0V_5FF4ggGEWFbz_0t20CI,3:00u0u_6BgBsN8VTeIz_0t20CI,3:00909_5dE091xJDbxz_0t20CI,3:00J0J_btUCtKSLz3jz_0t20CI,3:01717_lGBrEikQIt1z_0t20CI">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:26" title="Thu 11 Nov 06:26:44 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/redfield-bedroom-home-in-redfield/7406755644.html" data-id="7406755644" class="result-title hdrlnk" id="postid_7406755644" >2 bedroom home in Redfield</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Redfield  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402428837">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-on-site/7402428837.html" class="result-image gallery" data-ids="3:00808_tHM7EB99xNz_0bi07v,3:00G0G_8HFYQsoOqU5z_0bi07v,3:00I0I_kNv7xcjE3usz_0bi07v,3:00K0K_7UAhADSnzaiz_0bi07v,3:00T0T_7DRrmcm9YYjz_0bi07v,3:00a0a_cEcQYQkbFCcz_0bi07v,3:01111_aZmKRh9FTEaz_0ne0hq,3:00M0M_h7dOVeKuAn9z_0ne0hq">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:39" title="Thu 11 Nov 05:39:59 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-ample-parking-on-site/7402428837.html" data-id="7402428837" class="result-title hdrlnk" id="postid_7402428837" >Ample Parking, On-Site Manager, Extra Storage Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406716129" data-repost-of="7217159984">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-homes-for-rent-view-online/7406716129.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:38" title="Thu 11 Nov 05:38:50 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-homes-for-rent-view-online/7406716129.html" data-id="7406716129" class="result-title hdrlnk" id="postid_7406716129" >Homes For Rent View Online Apply Online</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,000</span>

                <span class="housing">
                    3br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines IA  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403868064">

        <a href="https://desmoines.craigslist.org/apa/d/williamson-acreage-for-rent-lucas-county/7403868064.html" class="result-image gallery" data-ids="3:00m0m_4RWzfh4yBgyz_0gw0b5">
                <span class="result-price">$1,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:19" title="Thu 11 Nov 05:19:48 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/williamson-acreage-for-rent-lucas-county/7403868064.html" data-id="7403868064" class="result-title hdrlnk" id="postid_7403868064" >Acreage for Rent - Lucas County</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,500</span>

                <span class="housing">
                    3br -
                    1450ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Chariton, Iowa  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406725239" data-repost-of="7381085035">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-we-love-clive-come-see-why/7406725239.html" class="result-image gallery" data-ids="3:00V0V_8w7dyRWCPNDz_0hq0hq,3:00e0e_33xMp3ijnykz_0dC09u,3:00Q0Q_7J0JBliDWDvz_0jo0cU,3:00x0x_hzYvFDDV6H9z_0jo0cU,3:00c0c_gQ839PRuHRTz_0jo0cU,3:00O0O_lP6NYuLHdVxz_0jo0cU,3:00a0a_WQNkkO7HIgz_0jo0cU,3:00Q0Q_by1aJDnnWtez_0jo0cU,3:00101_6IJk6RqOdZsz_0jo0cU,3:01515_gkFTwTOJZeEz_0jo0cU,3:01111_1ZBYUGhzdfuz_0CI0qA,3:00W0W_3IQnHXspRkuz_0CI0of,3:00w0w_5UDDnKLj9Wgz_0CI0s1,3:00N0N_6dRolD8Aa0Oz_0jm0da,3:00N0N_5O41UOGdZyOz_0CI0pI,3:00K0K_9sLqgo5ICN2z_0CI0nU,3:00F0F_4Yy3QSJ2Jpdz_0wg0i9,3:00R0R_d5GWgjyvQ8kz_0eX0jm">
                <span class="result-price">$1,395</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:08" title="Thu 11 Nov 05:08:52 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-we-love-clive-come-see-why/7406725239.html" data-id="7406725239" class="result-title hdrlnk" id="postid_7406725239" >We love Clive; come see why you will too!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,395</span>

                <span class="housing">
                    3br -
                    1265ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Clive  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406724611" data-repost-of="7381085035">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-what-are-you-waiting-for-3br/7406724611.html" class="result-image gallery" data-ids="3:00e0e_33xMp3ijnykz_0dC09u,3:00Q0Q_7J0JBliDWDvz_0jo0cU,3:00x0x_hzYvFDDV6H9z_0jo0cU,3:00c0c_gQ839PRuHRTz_0jo0cU,3:00O0O_lP6NYuLHdVxz_0jo0cU,3:00a0a_WQNkkO7HIgz_0jo0cU,3:00Q0Q_by1aJDnnWtez_0jo0cU,3:00101_6IJk6RqOdZsz_0jo0cU,3:01515_gkFTwTOJZeEz_0jo0cU,3:01111_1ZBYUGhzdfuz_0CI0qA,3:00W0W_3IQnHXspRkuz_0CI0of,3:00w0w_5UDDnKLj9Wgz_0CI0s1,3:00N0N_6dRolD8Aa0Oz_0jm0da,3:00N0N_5O41UOGdZyOz_0CI0pI,3:00K0K_9sLqgo5ICN2z_0CI0nU,3:00F0F_4Yy3QSJ2Jpdz_0wg0i9,3:00R0R_d5GWgjyvQ8kz_0eX0jm">
                <span class="result-price">$1,395</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:07" title="Thu 11 Nov 05:07:29 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-what-are-you-waiting-for-3br/7406724611.html" data-id="7406724611" class="result-title hdrlnk" id="postid_7406724611" >What are you waiting for?! 3BR available TODAY!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,395</span>

                <span class="housing">
                    3br -
                    1265ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Clive  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406724391" data-repost-of="7370001601">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-master-bedroom-of-your-dreams/7406724391.html" class="result-image gallery" data-ids="3:00Y0Y_7QdmnL11Jloz_0gw0co,3:00v0v_2SzGT11cRNuz_0x20oM,3:01717_ipMUeH6bkE4z_0x20oM,3:00k0k_4V40pyryeN0z_0x20oM,3:00j0j_soVeCTBnB6z_0lH0t2,3:00w0w_8JpjtleFyNSz_0lI0t2,3:00D0D_eetayRjD86Pz_0lD0t2,3:00I0I_8ME6Sir9ajtz_0lL0t2,3:00i0i_8MMkCUb0jojz_0x20oN,3:00D0D_gCnAiQMnbFtz_0l60s6,3:00U0U_kM2E9rVtINoz_0l40s8,3:00L0L_i9mu1IWpmlGz_0CI0sL,3:00G0G_iQODp6Jz8zBz_0CI0p7,3:00w0w_5UDDnKLj9Wgz_0CI0s1,3:00N0N_6dRolD8Aa0Oz_0jm0da,3:01313_dWEin15C7Tz_0jm0cV,3:00K0K_9sLqgo5ICN2z_0CI0nU,3:00G0G_jyoPVR75Wmvz_0CI0kC,3:00b0b_SKw5foijl9z_0wg0i9,3:00w0w_froSfdBcoyiz_0eX0jm">
                <span class="result-price">$1,155</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:07" title="Thu 11 Nov 05:07:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-master-bedroom-of-your-dreams/7406724391.html" data-id="7406724391" class="result-title hdrlnk" id="postid_7406724391" >Master bedroom of your dreams! 2BR Available Soon!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,155</span>

                <span class="housing">
                    2br -
                    1085ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Clive  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401210558">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7401210558.html" class="result-image gallery" data-ids="3:00a0a_fhYo7u6tN7cz_0bi07v,3:00G0G_kCT7gU2tD6dz_0bi07v,3:00C0C_104fmq0DTrvz_0bi07v,3:00P0P_5a2k3Kyd7mBz_0bi07v,3:00y0y_chVSiE4ggcUz_0ne0hq,3:00p0p_3wkXTruxLfOz_0bi07v,3:01111_6myPeibffeSz_0bi07v,3:00Z0Z_7C6FNfBU1q5z_0bi07v">
                <span class="result-price">$890</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 16:33" title="Thu 11 Nov 04:33:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-24-hour-emergency/7401210558.html" data-id="7401210558" class="result-title hdrlnk" id="postid_7401210558" >24 Hour Emergency Maintenance, New Ownership, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$890</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406696758" data-repost-of="7080755286">

        <a href="https://desmoines.craigslist.org/apa/d/colfax-hotel-room-for-222-per-week-rent/7406696758.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 16:15" title="Thu 11 Nov 04:15:39 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/colfax-hotel-room-for-222-per-week-rent/7406696758.html" data-id="7406696758" class="result-title hdrlnk" id="postid_7406696758" >HOTEL ROOM FOR $222 per WEEK RENT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$222</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (COLFAX  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406688225">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7406688225.html" class="result-image gallery" data-ids="3:00l0l_2nhLJI1V8swz_0CG0t2,3:00S0S_3BnDjB6ajXwz_0fe0oc,3:00n0n_4IqIBXSnVRxz_0g90oc,3:01212_8JhFEychJitz_0oc0gb,3:00Z0Z_73JTFHfxV5Sz_0g90oc,3:00p0p_fkGMUf6rJBfz_0fS0oc,3:00b0b_fFJ9u3lfTuJz_0i10oc,3:00u0u_hILwK1rVO4Bz_0g90oc,3:00t0t_3WhUrQhSeUzz_0k00dl,3:00p0p_f3aGaypnpSUz_0jm0t2,3:00Z0Z_2KYw3kF9tV0z_0iS0sj,3:00909_iHPlyiAAWnFz_0oc0g8,3:00O0O_1FGIljtYQIz_0oc0g8,3:01010_8JZ0noSi5QBz_0oc0g8,3:00t0t_4AQi5od4TjTz_0oc0g9,3:00000_4XLO8bBnToPz_0oc0g8,3:00T0T_enMwmkgfnYXz_0hM0oc,3:00O0O_471FpQV1Ztmz_0ap07j,3:00d0d_5YyoAu6LTENz_0CI0t2">
                <span class="result-price">$1,595</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 15:48" title="Thu 11 Nov 03:48:14 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7406688225.html" data-id="7406688225" class="result-title hdrlnk" id="postid_7406688225" >The living is easy ANYTIME &amp; the deals are great NOW.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,595</span>

                <span class="housing">
                    2br -
                    960ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406683493">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-311-west-high-road/7406683493.html" class="result-image gallery" data-ids="3:00K0K_7Ba42vYw5xRz_0eS07e,3:00w0w_iC8h6tH0FAoz_0590aB,3:00L0L_jPbxFn0zqS8z_0lO0aB,3:00202_3Ud3DGLSAicz_0lO0aB,3:00707_ljQV7uTXaTxz_0lO0aB,3:00707_h9PFDzfd6Vbz_0lO0aB,3:00O0O_4xuZ8jrMzbZz_0lO0aB,3:00A0A_N1O2WgeSLxz_0590aB,3:00000_6WmxXXttBwQz_0590aB,3:00f0f_BylYjW5Mltz_0590aB,3:00S0S_40Xu9WrRfhBz_0590aB,3:00W0W_1bWOaef8MRmz_0lO0aB,3:00l0l_5vDjRcC9aNMz_0590aB,3:00Y0Y_a9RgVlcsPruz_0lO0aB,3:00V0V_gBHZEBtGhbiz_0lO0aB,3:00p0p_aIasjV9RLK7z_0590aB">
                <span class="result-price">$2,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 15:38" title="Thu 11 Nov 03:38:10 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-311-west-high-road/7406683493.html" data-id="7406683493" class="result-title hdrlnk" id="postid_7406683493" >311 West High Road</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,300</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Norwalk  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404847758">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-renew-jordan-creek/7404847758.html" class="result-image gallery" data-ids="3:00D0D_6agDwfUjyJdz_0fu0ak,3:00K0K_9bwTzNOXKFNz_0fu0ak,3:01717_8vITJrk6RAJz_0fu0ak,3:01212_iM7xRJGcrPFz_0fu0ak,3:00B0B_fxtEHF5MrrSz_0fu0ak,3:00I0I_ivPua0MJHbdz_0fu0ak,3:00u0u_2xu7Jmo1GiPz_0fu08I,3:00t0t_8ecNlHXMznTz_0fu0ak,3:00X0X_bHKBjwqtKdzz_0fu0ak">
                <span class="result-price">$1,186</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 15:25" title="Thu 11 Nov 03:25:27 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-renew-jordan-creek/7404847758.html" data-id="7404847758" class="result-title hdrlnk" id="postid_7404847758" >Renew Jordan Creek Beautifuly Renovated</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,186</span>

                <span class="housing">
                    2br -
                    858ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7398903525">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-24/7398903525.html" class="result-image gallery" data-ids="3:00g0g_kVHUORFl6K0z_0bi07v,3:00z0z_6kJx8wNDG7Nz_0bi07v,3:00x0x_7sJLHoT5dS0z_08g06c,3:00B0B_aPShjKmjUwSz_0bi07v,3:00707_Sobl2vmSoMz_0bi07v,3:00W0W_h4zU10Y0naFz_08g06a,3:00303_bcp5Xe6QUMvz_0bi07v,3:00a0a_dysIUU7FXNHz_0bi07v">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:52" title="Thu 11 Nov 02:52:58 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available-24/7398903525.html" data-id="7398903525" class="result-title hdrlnk" id="postid_7398903525" >Extra Storage Available, 24 Hour Emergency Maintenance, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406650245" data-repost-of="7244501961">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-leisure-studio-the-sterling/7406650245.html" class="result-image gallery" data-ids="3:00606_22ytVTvobloz_0g8094,3:00505_i8ukN02ReG5z_0dm0hO,3:01313_fOIx6pXZhK4z_0dm0hO,3:00H0H_fFnVvWX37T6z_0dm0hO,3:00t0t_1ONWgIfrLOkz_0dm0hO,3:00808_36axUhlGgT0z_0dm0hO,3:00I0I_7gIaTeYSk8qz_0dm0hO">
                <span class="result-price">$1,047</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:34" title="Thu 11 Nov 02:34:38 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-leisure-studio-the-sterling/7406650245.html" data-id="7406650245" class="result-title hdrlnk" id="postid_7406650245" >Leisure Studio @ The Sterling!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,047</span>

                <span class="housing">
                    575ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406620497">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-semi-detached/7406620497.html" class="result-image gallery" data-ids="3:00202_gthWGk7E6DEz_0gw0co,3:00R0R_grEYHI7a8zBz_0gw0co,3:01414_5zL0hJrJ4XSz_0gw0co,3:00l0l_8WWZuH7JCHOz_0gw0co,3:00y0y_4ePA1KiUqx2z_0gw0co">
                <span class="result-price">$650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:33" title="Thu 11 Nov 02:33:30 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-amazing-semi-detached/7406620497.html" data-id="7406620497" class="result-title hdrlnk" id="postid_7406620497" >/*Amazing semi-detached property 1 BED 1 BA Near University, downtown*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$650</span>

                <span class="housing">
                    1br -
                    750ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Near, Ingersoll Park++++Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406648995" data-repost-of="7243248848">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-luxury-one-bedroom-the-sterling/7406648995.html" class="result-image gallery" data-ids="3:01313_2v1NjOSsc3Yz_0k00dl,3:00N0N_aHRvHGY06ZVz_0fu0kE,3:00J0J_ki6Qz4bJFxtz_0fu0kE,3:00o0o_hFzuApfsWj8z_0fu0kE,3:00r0r_d1RPgWERxZBz_0fu0kE,3:00z0z_bsdbGFKEit9z_0fu0kE,3:00H0H_3FxFnDHXxSlz_0fu0kE">
                <span class="result-price">$1,202</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:32" title="Thu 11 Nov 02:32:20 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-luxury-one-bedroom-the-sterling/7406648995.html" data-id="7406648995" class="result-title hdrlnk" id="postid_7406648995" >Luxury One Bedroom @ The Sterling at Prairie Trail</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,202</span>

                <span class="housing">
                    1br -
                    735ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406648133" data-repost-of="7243251823">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-spacious-two-bed-the-sterling-at/7406648133.html" class="result-image gallery" data-ids="3:00p0p_jJsvG52jqHJz_0fq0bz,3:00o0o_f0ekjmOkXlMz_0kE0fu,3:00909_fFCt7rI0xhNz_0kE0fu,3:01313_3S5g9nhBVz6z_0kE0fu,3:00B0B_cyr42QykYwXz_0kE0fu,3:00v0v_8IjtA3XvsRVz_0kE0fu,3:00p0p_b9tFzc3YOxsz_0kE0fu,3:00J0J_atoPLTG3aqvz_0ww0oo,3:00f0f_jSY2I43NNWAz_0kE0fu,3:00U0U_dtGAxfzheM0z_0kE0fu,3:00x0x_2yBV1hY60uMz_0lM0t2,3:01313_kdfnst7gXhPz_0ww0oo,3:01414_jUM2WhrfHiZz_0ww0oo,3:00S0S_5EwBBH0Mt37z_0dK0kE">
                <span class="result-price">$1,370</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:30" title="Thu 11 Nov 02:30:39 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-spacious-two-bed-the-sterling-at/7406648133.html" data-id="7406648133" class="result-title hdrlnk" id="postid_7406648133" >Spacious Two Bed @ The Sterling at Prairie Trail!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,370</span>

                <span class="housing">
                    2br -
                    1099ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7398056784">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-garages/7398056784.html" class="result-image gallery" data-ids="3:01717_kNdRIxQZMApz_07g042,3:00l0l_jS3dsxs8Uaqz_0bi07v,3:00Y0Y_drWYz0X01DUz_0bi07v,3:00s0s_bel1s74jcV6z_0bi07v,3:00i0i_jsCWJMYnS47z_0bi07v,3:00t0t_cfNhpRnT7HOz_0bi07v,3:00c0c_QMvROlMFbRz_0bi07v,3:00v0v_6chGOVzjH74z_0bi07v">
                <span class="result-price">$890</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:14" title="Thu 11 Nov 02:14:05 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-on-site-manager-garages/7398056784.html" data-id="7398056784" class="result-title hdrlnk" id="postid_7398056784" >On-Site Manager, Garages Available, New Management</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$890</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406638616" data-repost-of="7403560771">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7406638616.html" class="result-image gallery" data-ids="3:01717_gj9324cpQPcz_0CG0t2,3:00B0B_eIp7ypo7nDzz_0CI0pg,3:00p0p_g2KiCFF9LnQz_09G07g,3:00x0x_6Uk317p4JCMz_09G07g,3:00909_gxsafyufIhrz_0CI0qQ,3:00101_4UDMrlDWcPuz_0CI0qD,3:00d0d_lfwZ7gQPAWbz_0CI0pM,3:00O0O_1e3EOoNRpp3z_0CI0pL,3:00b0b_9AEfX5UuFqTz_0CI0pM,3:00m0m_bSAUiG1xhX0z_0jm0cV,3:01212_4kyLJYyvva7z_09G07g,3:00A0A_5IDOmGxjnV8z_09G07g,3:00e0e_d2HN6ZcKqpJz_0eQ09U,3:00d0d_aFUIK5IoiZDz_0eQ09U,3:00q0q_4kWLxUx9zJjz_0gl0k7,3:00808_dUK0G0EPOFBz_0ak07K">
                <span class="result-price">$2,495</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:13" title="Thu 11 Nov 02:13:13 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7406638616.html" data-id="7406638616" class="result-title hdrlnk" id="postid_7406638616" >Available Now! 3 Bedroom Apartments at 5Fifty5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,495</span>

                <span class="housing">
                    3br -
                    2210ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406633426">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-bed-bath-single-story-townhome/7406633426.html" class="result-image gallery" data-ids="3:00909_cmwA9xCSoK4z_0fJ0aT,3:01414_lGILMuym3H8z_0CI0t2,3:00O0O_4ecbIq6PvMcz_0CI0t2,3:00E0E_c1SjrcYtE9oz_0CI0t2,3:00303_8UwOWrzPojez_0CI0t2,3:00e0e_i0nXruLo8f7z_0CI0t2,3:00C0C_8pG0fA8HS0Bz_0CI0t2,3:00Q0Q_9bAXHh0eDsvz_0CI0t2,3:01111_5tLvIswvt9sz_0js0t2">
                <span class="result-price">$1,915</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 14:04" title="Thu 11 Nov 02:04:08 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-bed-bath-single-story-townhome/7406633426.html" data-id="7406633426" class="result-title hdrlnk" id="postid_7406633426" >3-Bed/2-Bath Single Story Townhome w/ Pool and Dog Park</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,915</span>

                <span class="housing">
                    3br -
                    1338ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406623300">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-up-to-months-free-call/7406623300.html" class="result-image gallery" data-ids="3:00L0L_26LZfOYW7rTz_0fJ0aT,3:00E0E_5NNATj20RPfz_0CI0t2,3:00B0B_hgPmiiXAEvRz_0CI0t2,3:01212_bhm24xjNYNAz_0CI0t2,3:00g0g_2v6Cb6MjJmSz_0CI0t2,3:00000_hggL4dBL0Utz_0CI0t2,3:00C0C_feEbr9tA9Pqz_0CI0t2,3:00K0K_lsbNKtfQDVQz_0CI0t2,3:00o0o_3ALedmqcV72z_0br0t2">
                <span class="result-price">$1,695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:45" title="Thu 11 Nov 01:45:42 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-up-to-months-free-call/7406623300.html" data-id="7406623300" class="result-title hdrlnk" id="postid_7406623300" >Up to 2 MONTHS FREE!! Call Centennial Crossing today!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,695</span>

                <span class="housing">
                    2br -
                    1223ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406620712">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-dont-miss-out-on-months-free/7406620712.html" class="result-image gallery" data-ids="3:00I0I_7dx4GDub9o1z_0fJ0aT,3:00E0E_c1SjrcYtE9oz_0CI0t2,3:01414_lGILMuym3H8z_0CI0t2,3:00O0O_4ecbIq6PvMcz_0CI0t2,3:01212_kMBtfysMTezz_0CI0t2,3:00V0V_lz05PCJSG4Xz_0CI0t2,3:00A0A_7qaNuo6VL1xz_0CI0t2,3:01111_5tLvIswvt9sz_0js0t2">
                <span class="result-price">$1,915</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:40" title="Thu 11 Nov 01:40:55 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-dont-miss-out-on-months-free/7406620712.html" data-id="7406620712" class="result-title hdrlnk" id="postid_7406620712" >Don&#39;t miss out on *2 MONTHS FREE* @ Centennial Crossing!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,915</span>

                <span class="housing">
                    3br -
                    1338ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406608844" data-repost-of="7352736222">

        <a href="https://desmoines.craigslist.org/apa/d/altoona-altoona-park-apts-bedrooms/7406608844.html" class="result-image gallery" data-ids="3:00U0U_eocnYzzcRsRz_0zw0pU,3:00303_fgxKRltFHwlz_0zs0pO,3:00a0a_1QBBCU4g8e5z_0CI0t2,3:00y0y_7zsQ1LpiKvFz_0CI0t2,3:00202_khsE3wUdTLHz_0CI0t2,3:00f0f_34qclXKuXPpz_0CI0t2,3:00T0T_hZwMTVOCp0Tz_0CI0t2,3:01010_8GrswfHnH3Bz_0CI0t2,3:00g0g_hkwSImSfwPsz_0CI0t2,3:00r0r_hodkVS91uQfz_0CI0t2,3:00w0w_jJkyVTtzzkhz_0CI0t2,3:01212_cYVjXJnQqOnz_0CI0t2,3:00L0L_egRtJIW2JyFz_0CI0rm">
                <span class="result-price">$895</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:35" title="Thu 11 Nov 01:35:52 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/altoona-altoona-park-apts-bedrooms/7406608844.html" data-id="7406608844" class="result-title hdrlnk" id="postid_7406608844" >ALTOONA PARK APTS-2 BEDROOMS-2 BATHROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$895</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (401 2nd St NW  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406608533" data-repost-of="7352736222">

        <a href="https://desmoines.craigslist.org/apa/d/altoona-altoona-park-apts-bedrooms/7406608533.html" class="result-image gallery" data-ids="3:00U0U_eocnYzzcRsRz_0zw0pU,3:00303_fgxKRltFHwlz_0zs0pO,3:00a0a_1QBBCU4g8e5z_0CI0t2,3:00y0y_7zsQ1LpiKvFz_0CI0t2,3:00202_khsE3wUdTLHz_0CI0t2,3:00f0f_34qclXKuXPpz_0CI0t2,3:00T0T_hZwMTVOCp0Tz_0CI0t2,3:01010_8GrswfHnH3Bz_0CI0t2,3:00g0g_hkwSImSfwPsz_0CI0t2,3:00r0r_hodkVS91uQfz_0CI0t2,3:00w0w_jJkyVTtzzkhz_0CI0t2,3:01212_cYVjXJnQqOnz_0CI0t2,3:00L0L_egRtJIW2JyFz_0CI0rm">
                <span class="result-price">$895</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:32" title="Thu 11 Nov 01:32:22 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/altoona-altoona-park-apts-bedrooms/7406608533.html" data-id="7406608533" class="result-title hdrlnk" id="postid_7406608533" >ALTOONA PARK APTS-2 BEDROOMS-2 BATHROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$895</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (401 2nd St NW  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406613961">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-bed-35-bath-townhome-pool-garage/7406613961.html" class="result-image gallery" data-ids="3:00R0R_9IzEVYl4Z5Oz_0fJ0aT,3:00E0E_5NNATj20RPfz_0CI0t2,3:00a0a_3ZQylsZ3lPLz_0CI0t2,3:00g0g_2v6Cb6MjJmSz_0CI0t2,3:00000_hggL4dBL0Utz_0CI0t2">
                <span class="result-price">$1,795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:29" title="Thu 11 Nov 01:29:03 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-bed-35-bath-townhome-pool-garage/7406613961.html" data-id="7406613961" class="result-title hdrlnk" id="postid_7406613961" >3-Bed/3.5-Bath Townhome w/ Pool, Garage, and In-home Laundry</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,795</span>

                <span class="housing">
                    3br -
                    1658ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406610608">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-bed-bath-townhome-in-waukee/7406610608.html" class="result-image gallery" data-ids="3:01212_hH4qX4rJhaez_0fJ0aT,3:00E0E_5NNATj20RPfz_0CI0t2,3:00B0B_hgPmiiXAEvRz_0CI0t2,3:01111_zSJLtGMKAwz_0CI0t2,3:00g0g_2v6Cb6MjJmSz_0CI0t2,3:00000_hggL4dBL0Utz_0CI0t2">
                <span class="result-price">$1,535</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:22" title="Thu 11 Nov 01:22:58 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-bed-bath-townhome-in-waukee/7406610608.html" data-id="7406610608" class="result-title hdrlnk" id="postid_7406610608" >2-bed/2-bath Townhome in Waukee</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,535</span>

                <span class="housing">
                    2br -
                    1223ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405093907" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/bedroommove-in-special-free-cable/7405093907.html" class="result-image gallery" data-ids="1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$875</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:19" title="Thu 11 Nov 01:19:17 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/bedroommove-in-special-free-cable/7405093907.html" data-id="7405093907" class="result-title hdrlnk" id="postid_7405093907" >3 BEDROOM*MOVE IN SPECIAL- FREE CABLE-</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$875</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (2132 GRAND  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405094376" data-repost-of="5575000700">

        <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7405094376.html" class="result-image gallery" data-ids="1:00A0A_cneXvvauhjo,1:00S0S_bVAFxfFI7NN,1:00v0v_8u1w5sSoqaB,1:00V0V_1upoghhQ4BN,1:00101_dyTvoGLGHeC,1:00z0z_EyizpaGHQY,1:00a0a_fw2FNuvBBpp,1:00o0o_7geKcEn5X1K,1:00a0a_4DB3gcS3kBV,1:00b0b_1mfddcGVcut,1:00N0N_7HWGLA3zC74,1:00j0j_7lHl2LyoU1Y,1:00707_8q6UN7mvLAN,1:00x0x_bZaOB9eM4gF,1:00c0c_4MhxgFsIPUy,1:00m0m_k7WnFxAP5a9">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:18" title="Thu 11 Nov 01:18:59 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/move-in-special-free-cable-no/7405094376.html" data-id="7405094376" class="result-title hdrlnk" id="postid_7405094376" >MOVE IN SPECIAL- FREE CABLE-NO APPLICATION FEE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2132 GRAND  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406607701" data-repost-of="7381087195">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-express-your-individuality-at/7406607701.html" class="result-image gallery" data-ids="3:00R0R_bypwggYNuNxz_0lM0t2,3:00e0e_9CcST2c8nruz_0lM0t2,3:00X0X_aq9iDFojeFXz_0lM0t2,3:00U0U_9PRdVNwiQxqz_0lM0t2,3:00s0s_2QEPTOn5Uecz_0lM0t2,3:00V0V_kA51u3ChONGz_0lM0t2,3:00I0I_dQM8G9d5TIIz_0lM0t2,3:00M0M_5hcv7gZCLsLz_0lM0t2,3:00Y0Y_5MiOBlSFsi3z_0lM0t2,3:00s0s_jvGQdclmckFz_0lM0t2,3:00q0q_a3yR6NwAIQwz_0CI0t2,3:00E0E_5GbH6IbgZ1vz_0CI0qD,3:00L0L_i9mu1IWpmlGz_0CI0sL,3:00W0W_3IQnHXspRkuz_0CI0of,3:00w0w_5UDDnKLj9Wgz_0CI0s1,3:00N0N_6dRolD8Aa0Oz_0jm0da,3:00z0z_585LbnIkqMEz_0CI0qp,3:00h0h_9AHMibS5baZz_0jm0cU,3:00K0K_9sLqgo5ICN2z_0CI0nU,3:00G0G_jyoPVR75Wmvz_0CI0kC,3:01414_lclo1lk0LEvz_0ak07R,3:00X0X_kgyHpb63qj0z_0eX0jm">
                <span class="result-price">$966</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:17" title="Thu 11 Nov 01:17:53 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-express-your-individuality-at/7406607701.html" data-id="7406607701" class="result-title hdrlnk" id="postid_7406607701" >Express Your Individuality at Stonegate Crossing!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$966</span>

                <span class="housing">
                    1br -
                    804ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Clive  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406607571">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-southside-duplexlarge-family/7406607571.html" class="result-image gallery" data-ids="3:00G0G_eXJ9UZmK7yiz_0kE0bC,3:00f0f_fFFxbsvi5ejz_0kE0bC,3:00u0u_gzN1OSLKBSjz_0kE0bC,3:00A0A_6ZDWS9zHXuGz_0x90iE,3:00M0M_lbkqgsyGpFfz_0kE0bC,3:00505_9Co5aRhT4IRz_0xQ0j2,3:00k0k_f8S4PNIeFKAz_0wh0ia,3:00G0G_euRUwamfBXGz_0kE0bC,3:00Z0Z_fBwaVQXTpn2z_0kE0bC,3:01212_424Tp0iwYJz_0CI0lM,3:01010_9fvcCJsenPMz_0kE0bC,3:00h0h_eRoaY4ieNPhz_0kE0bC,3:00m0m_5aV20elBJfz_0kE0bC,3:00q0q_gM5N4iDMvcBz_0kE0bC,3:00M0M_cViUhZgQzUzz_0kE0bC">
                <span class="result-price">$1,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:17" title="Thu 11 Nov 01:17:38 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-southside-duplexlarge-family/7406607571.html" data-id="7406607571" class="result-title hdrlnk" id="postid_7406607571" >*SOUTHSIDE DUPLEX*LARGE FAMILY ROOM*EXTRA LARGE DECK*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,150</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406607449" data-repost-of="7381085035">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-what-are-you-waiting-for-3br/7406607449.html" class="result-image gallery" data-ids="3:00V0V_8w7dyRWCPNDz_0hq0hq,3:00e0e_33xMp3ijnykz_0dC09u,3:00Q0Q_7J0JBliDWDvz_0jo0cU,3:00x0x_hzYvFDDV6H9z_0jo0cU,3:00c0c_gQ839PRuHRTz_0jo0cU,3:00O0O_lP6NYuLHdVxz_0jo0cU,3:00a0a_WQNkkO7HIgz_0jo0cU,3:00Q0Q_by1aJDnnWtez_0jo0cU,3:00101_6IJk6RqOdZsz_0jo0cU,3:01515_gkFTwTOJZeEz_0jo0cU,3:01111_1ZBYUGhzdfuz_0CI0qA,3:00W0W_3IQnHXspRkuz_0CI0of,3:00w0w_5UDDnKLj9Wgz_0CI0s1,3:00N0N_6dRolD8Aa0Oz_0jm0da,3:00N0N_5O41UOGdZyOz_0CI0pI,3:00K0K_9sLqgo5ICN2z_0CI0nU,3:00F0F_4Yy3QSJ2Jpdz_0wg0i9,3:00R0R_d5GWgjyvQ8kz_0eX0jm">
                <span class="result-price">$1,395</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:17" title="Thu 11 Nov 01:17:25 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-what-are-you-waiting-for-3br/7406607449.html" data-id="7406607449" class="result-title hdrlnk" id="postid_7406607449" >What are you waiting for?! 3BR available TODAY!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,395</span>

                <span class="housing">
                    3br -
                    1265ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Clive  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406606936" data-repost-of="7370001601">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-everything-you-need-all-right/7406606936.html" class="result-image gallery" data-ids="3:00Y0Y_7QdmnL11Jloz_0gw0co,3:00v0v_2SzGT11cRNuz_0x20oM,3:01717_ipMUeH6bkE4z_0x20oM,3:00k0k_4V40pyryeN0z_0x20oM,3:00j0j_soVeCTBnB6z_0lH0t2,3:00w0w_8JpjtleFyNSz_0lI0t2,3:00D0D_eetayRjD86Pz_0lD0t2,3:00I0I_8ME6Sir9ajtz_0lL0t2,3:00i0i_8MMkCUb0jojz_0x20oN,3:00D0D_gCnAiQMnbFtz_0l60s6,3:00U0U_kM2E9rVtINoz_0l40s8,3:00L0L_i9mu1IWpmlGz_0CI0sL,3:00G0G_iQODp6Jz8zBz_0CI0p7,3:00w0w_5UDDnKLj9Wgz_0CI0s1,3:00N0N_6dRolD8Aa0Oz_0jm0da,3:01313_dWEin15C7Tz_0jm0cV,3:00K0K_9sLqgo5ICN2z_0CI0nU,3:00G0G_jyoPVR75Wmvz_0CI0kC,3:00b0b_SKw5foijl9z_0wg0i9,3:00w0w_froSfdBcoyiz_0eX0jm">
                <span class="result-price">$1,155</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:16" title="Thu 11 Nov 01:16:30 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-everything-you-need-all-right/7406606936.html" data-id="7406606936" class="result-title hdrlnk" id="postid_7406606936" >Everything You Need, All Right Here</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,155</span>

                <span class="housing">
                    2br -
                    1085ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Clive  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406603453">

        <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apt-for-rent-ankeny-785/7406603453.html" class="result-image gallery" data-ids="3:00c0c_jusA5qViYQPz_0gP0bv,3:00J0J_412oqFKMl30z_0gD0bG,3:00W0W_5mxrXbLkHyjz_0h20bF">
                <span class="result-price">$785</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 13:10" title="Thu 11 Nov 01:10:21 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/ankeny-bedroom-apt-for-rent-ankeny-785/7406603453.html" data-id="7406603453" class="result-title hdrlnk" id="postid_7406603453" >2 BEDROOM APT FOR RENT ANKENY $785</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$785</span>

                <span class="housing">
                    2br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Ankeny  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406593778" data-repost-of="4828174507">

        <a href="https://desmoines.craigslist.org/apa/d/winterset-shilling-place-apartments/7406593778.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:53" title="Thu 11 Nov 12:53:45 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/winterset-shilling-place-apartments/7406593778.html" data-id="7406593778" class="result-title hdrlnk" id="postid_7406593778" >Winterset--Shilling Place Apartments- CIRHA Vouchers Accepted!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$625</span>

                <span class="housing">
                    2br -
                    675ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (517 N. John Wayne Drive  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402422591">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7402422591.html" class="result-image gallery" data-ids="3:00G0G_5G0XBshLE1oz_0bi07v,3:00W0W_9h6xPegsPZJz_09O0hq,3:00b0b_bFd9c41R9Exz_0bi07v,3:00W0W_9mUpHyAFQzbz_0bi07v,3:01212_9RQLb0ptku8z_0bi07v,3:00707_iHt1tzEMO2xz_0bi07v,3:00r0r_cVL5CK8UJLfz_0bi07v,3:00u0u_fFNWwYfPFWNz_0bi07v">
                <span class="result-price">$725</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:52" title="Thu 11 Nov 12:52:58 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-extra-storage-available/7402422591.html" data-id="7402422591" class="result-title hdrlnk" id="postid_7402422591" >Extra Storage Available, Grilling &amp; Picnic Ares, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$725</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394826248" data-repost-of="4866396859">

        <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7394826248.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:42" title="Thu 11 Nov 12:42:20 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7394826248.html" data-id="7394826248" class="result-title hdrlnk" id="postid_7394826248" >HOMESFORRENTDESMOINES.COM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    3br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7393895544" data-repost-of="4866396859">

        <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7393895544.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:42" title="Thu 11 Nov 12:42:15 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7393895544.html" data-id="7393895544" class="result-title hdrlnk" id="postid_7393895544" >HOMESFORRENTDESMOINES.COM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395489112" data-repost-of="7274376513">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-this-week-with-approved/7395489112.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:33" title="Thu 11 Nov 12:33:03 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-this-week-with-approved/7395489112.html" data-id="7395489112" class="result-title hdrlnk" id="postid_7395489112" >Move This Week with Approved Application</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$900</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395899167" data-repost-of="7350869213">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-quality-homes-reasonable/7395899167.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:32" title="Thu 11 Nov 12:32:54 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-quality-homes-reasonable/7395899167.html" data-id="7395899167" class="result-title hdrlnk" id="postid_7395899167" >Quality Homes Reasonable Prices For Rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,200</span>

                <span class="housing">
                    3br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406581358">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-looking-for-great-community/7406581358.html" class="result-image gallery" data-ids="3:00D0D_jtlQ7UHHEG5z_0ak07K,3:00F0F_cgM95D72HGxz_0ak07K,3:00f0f_dNx9iI14Z8Vz_0ak07K,3:00I0I_2QCDWvMs4mjz_0ak07K,3:01515_fTollFXkZ1Az_0ak07K">
                <span class="result-price">$858</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:32" title="Thu 11 Nov 12:32:07 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-looking-for-great-community/7406581358.html" data-id="7406581358" class="result-title hdrlnk" id="postid_7406581358" >Looking for a great community to be a part of? Prairie Winds Apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$858</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395920479" data-repost-of="4866396859">

        <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7395920479.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:20" title="Thu 11 Nov 12:20:51 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7395920479.html" data-id="7395920479" class="result-title hdrlnk" id="postid_7395920479" >HOMESFORRENTDESMOINES.COM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    3br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406517485" data-repost-of="7295449527">

        <a href="https://desmoines.craigslist.org/apa/d/altoona-spacious-1250-sq-ft-home-call/7406517485.html" class="result-image gallery" data-ids="3:00C0C_2NsFBXF5pAjz_05q07g,3:00B0B_h903vB25Orzz_0c308f,3:00P0P_dZgo1STmnvmz_0dq09K,3:01717_6K4mQQiDve3z_0kE0fu,3:00808_bcM8ElRjXqrz_0kE0fu,3:00X0X_cAnPzyRPg8Hz_0kE0fu,3:00M0M_gt9IQykmyWtz_0CI0t2,3:00909_bKAgdovHiJPz_0e909I,3:00404_kTUqZ0EeoF8z_0ef09H,3:00u0u_hzsA5o3vPnkz_0CI0t2,3:01414_3iltVXzEU37z_0kE0dW,3:00202_bBqIcI0k4LOz_09G07g,3:00W0W_amyzALZvtjbz_0dy09C,3:00O0O_iy9o4XJPesFz_0dL09D,3:00u0u_bCdtDYjJ3Syz_0c608d">
                <span class="result-price">$1,359</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:12" title="Thu 11 Nov 12:12:21 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/altoona-spacious-1250-sq-ft-home-call/7406517485.html" data-id="7406517485" class="result-title hdrlnk" id="postid_7406517485" >SPACIOUS 1250 sq. ft. HOME! CALL TODAY</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,359</span>

                <span class="housing">
                    2br -
                    1250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Altoona  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399365622">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-courtyard/7399365622.html" class="result-image gallery" data-ids="3:00S0S_kMgZhpawTnoz_0bi07v,3:00K0K_fJYlUvt2eolz_0bi07v,3:00W0W_5401ApJxpoZz_0bi07v,3:00n0n_oV8NCbukC5z_0bi07v,3:00C0C_8fQC1MpFoeLz_0bi07v,3:00Z0Z_2Mn4gc2aAQOz_0bi07v,3:00U0U_1euMfnFjkfbz_0bi07v,3:00G0G_T39IBkHaO8z_0bi07v">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 12:06" title="Thu 11 Nov 12:06:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-garages-available-courtyard/7399365622.html" data-id="7399365622" class="result-title hdrlnk" id="postid_7399365622" >Garages Available, Courtyard Views, On-Site Manager</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400782257">

        <a href="https://desmoines.craigslist.org/apa/d/norwalk-live-in-the-country/7400782257.html" class="result-image gallery" data-ids="3:00o0o_Te3305bs9gz_0CI0t2,3:00404_1rTNHw5JXVKz_0CI0lM,3:00404_bpwjGxHdzdVz_0t20CI,3:01717_baYo3c3p391z_0CI0t2,3:00Q0Q_1W72uFWRch3z_0CI0lM,3:00A0A_6b2jFVOLTC0z_0CI0lM,3:00505_4vBOko6n3J4z_0CI0lM,3:01010_llQIljYNXV3z_0CI0lM,3:00C0C_4Nra44PFf0Bz_0tq0pq,3:00N0N_TMVuqUFCgKz_0gl0t2">
                <span class="result-price">$895</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:54" title="Thu 11 Nov 11:54:46 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/norwalk-live-in-the-country/7400782257.html" data-id="7400782257" class="result-title hdrlnk" id="postid_7400782257" >Live in the Country</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$895</span>

                <span class="housing">
                    1br -
                    950ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (15 minutes south of DSM airport, 5 miles south of Norwalk  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406554333" data-repost-of="7380589521">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-months-free-spacious-bedroom/7406554333.html" class="result-image gallery" data-ids="3:00y0y_gLpW9S7Svmgz_0wg0lw,3:00606_6bgvjHI4kA4z_08t06y,3:00U0U_8nxmBIL3e46z_08T06u,3:00i0i_i72mfPKYxVlz_0CI0t2,3:00X0X_6qcpXPSoGVRz_0CI0t2,3:00n0n_aIYwodbdOI6z_0CI0t2,3:00a0a_1ASBrq8FTn8z_0CI0t2,3:00r0r_isjVMwn2t2Xz_0iK0t2,3:00F0F_9YfzP95Vjlzz_0uK0lo,3:00m0m_bUdyPXDnzEz_0w40lo,3:00C0C_6LDb5J8Q52rz_0uG0kd,3:00000_dlR8gmLAImyz_0w00ld,3:00S0S_73Gj78n8VPKz_0tG0ld,3:00N0N_8iIw71AjXhAz_0tj0kl,3:00202_73w7YpKf3WVz_0w40jZ,3:00C0C_bTYDS9M0LrCz_0w40k9,3:00k0k_9V7jpgk5iCzz_0CI0t2,3:00B0B_b6gQIoSosyFz_0CI0t2,3:00c0c_g0zsrmbzKF6z_0CI0lM,3:00e0e_eJlKLi9ZdaAz_0nV0et,3:00o0o_8vrVPQF9q6uz_0fO0ax,3:00d0d_6ncBXPSoe7bz_0CI0lM,3:00505_dTQBNdLnTRhz_08N064,3:01111_iRJu6Jlstdqz_0CI0t2">
                <span class="result-price">$1,495</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:45" title="Thu 11 Nov 11:45:39 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-months-free-spacious-bedroom/7406554333.html" data-id="7406554333" class="result-title hdrlnk" id="postid_7406554333" >2 MONTHS FREE, Spacious 1 Bedroom NEW Homes!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,495</span>

                <span class="housing">
                    1br -
                    860ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400803786">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-loft-above-whispers-sherman/7400803786.html" class="result-image gallery" data-ids="3:00303_9O2AMDoF5sKz_0CI0t2,3:00O0O_bfsicFdqKPJz_0t20CI,3:00d0d_iWvrhpAJCzHz_0t20CI,3:00J0J_aZOxVbrlw9Iz_0CI0t2,3:00101_4tH7agAJDICz_0t20CI,3:00x0x_6l1OJVyd54wz_0t20CI,3:00Q0Q_66t7ZhRHHAz_0t20CI,3:00O0O_5Ze6M9qDXeOz_0t20CI,3:00V0V_izMcyofZItz_0t20CI,3:00202_gCyeUnGS1qBz_0CI0t2,3:00505_kuAncxzv8ZYz_0CI0t2,3:00505_kuAncxzv8ZYz_0CI0t2,3:00Q0Q_6PWxSo3U2RHz_0t20CI,3:01717_fs4fTs8GtlQz_0CI0t2,3:00x0x_f5IIdRNOEvGz_0t20CI,3:00x0x_f5IIdRNOEvGz_0t20CI,3:00909_eNZ2ADb543wz_0CI0t2,3:01010_jXqeIOsFbX3z_0CI0t2">
                <span class="result-price">$865</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:43" title="Thu 11 Nov 11:43:29 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-loft-above-whispers-sherman/7400803786.html" data-id="7400803786" class="result-title hdrlnk" id="postid_7400803786" >LOFT ABOVE WHISPERS   Sherman Hill</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$865</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Sherman Hill  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400778475" data-repost-of="6811851985">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-sherman-hill-classic-elmhurst/7400778475.html" class="result-image gallery" data-ids="3:00D0D_kRBuu1cuhwUz_0CI0t2,3:00o0o_fawJerwQ1w6z_0CI0t2,3:00i0i_1wD4XPCTzMGz_0t20CI,3:00505_d95OQeWKhcXz_0t20CI,3:00Q0Q_iKPH7BnHyCz_0t20CI,3:00M0M_2FhuNbePhrlz_0t20CI,3:00606_eisHDsIPpN6z_0CI0t2,3:00909_i8z4WwWubFYz_0t20CI,3:00l0l_f4wz6ZS89ftz_0t20CI,3:00P0P_lcFsGxf1Gywz_0t20CI,3:00H0H_i8K1NboYwCWz_0AE0ru">
                <span class="result-price">$865</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:42" title="Thu 11 Nov 11:42:17 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-sherman-hill-classic-elmhurst/7400778475.html" data-id="7400778475" class="result-title hdrlnk" id="postid_7400778475" >SHERMAN HILL CLASSIC &quot;ELMHURST&quot;</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$865</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Sherman Hill, West, Downtown  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394103116" data-repost-of="6724082634">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-huge-one-bedroom-den/7394103116.html" class="result-image gallery" data-ids="3:00L0L_6f1rdIeX1Q6z_0ak05D,3:00D0D_jfTSgjMepzrz_0ak08a,3:00L0L_5Pa5GJzdSLPz_0CI0t2,3:00707_9TJVIVdYxL4z_0t20CI,3:00404_8CngyyXbQdyz_0t20CI,3:00m0m_g5wVoyWxnWdz_0t20CI,3:00v0v_kEahp7onZJz_0ak07K,3:00d0d_5RJDWiQIg85z_0CI0t2,3:00D0D_hA9AFPVe0jFz_0t20CI,3:00H0H_i8K1NboYwCWz_0AE0ru">
                <span class="result-price">$895</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:41" title="Thu 11 Nov 11:41:11 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-huge-one-bedroom-den/7394103116.html" data-id="7394103116" class="result-title hdrlnk" id="postid_7394103116" >HUGE ONE-BEDROOM w/DEN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$895</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Sherman Hill, downtown. DES MOINES  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400771467" data-repost-of="7022994556">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-very-clean-and-quiet-total/7400771467.html" class="result-image gallery" data-ids="3:01515_6HE7rDsBvW5z_0CI0t2,3:00v0v_djked3gqVGhz_0CI0t2,3:01212_2bwJv5ynHlzz_0t20CI,3:00101_akQtHhGdJ3Ez_0CI0t2,3:00b0b_k1bmFxZ702Qz_0CI0t2,3:00K0K_9Iy72IPMj2Dz_0t20CI,3:01515_kkhYVEJbPTfz_0CI0t2,3:00B0B_lv7iXLNpQ70z_0t20CI,3:00l0l_f4wz6ZS89ftz_0t20CI,3:00H0H_i8K1NboYwCWz_0AE0ru,3:00X0X_7pple57KvRQz_0t20CI">
                <span class="result-price">$845</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:41" title="Thu 11 Nov 11:41:02 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-very-clean-and-quiet-total/7400771467.html" data-id="7400771467" class="result-title hdrlnk" id="postid_7400771467" >VERY CLEAN and QUIET TOTAL RENOVATION one-bedroom</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$845</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (DOWNTOWN. DES MOINES  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406550460" data-repost-of="7171085648">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-15-bath-hardwood/7406550460.html" class="result-image gallery" data-ids="3:01212_hWCfnqKGpMoz_08305m,3:00B0B_woWRDPMuzvz_08305m,3:01313_ld4sDkc7grcz_08305m,3:00o0o_rYMaEfQ5tzz_08305m,3:00X0X_lg6i0vrYG58z_05m083,3:00303_jVwzR4RwjV8z_05m083,3:00202_d7xaJaqbTucz_05m083,3:00Y0Y_eTcMM351kCZz_0CI0pO,3:00Z0Z_kWnljXOoEO7z_0CI0pO">
                <span class="result-price">$950</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:38" title="Thu 11 Nov 11:38:44 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-15-bath-hardwood/7406550460.html" data-id="7406550460" class="result-title hdrlnk" id="postid_7406550460" >2 Bedroom 1.5 Bath Hardwood floors</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    2br -
                    670ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (3715 Wright St Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406544970">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-large-bedroom-bathroom/7406544970.html" class="result-image gallery" data-ids="3:01616_g3ma6IUSAc5z_0q90hq,3:00e0e_6dDb0e522G6z_0q90hq,3:00303_fpgKGlyZFnhz_0q90hq,3:00F0F_7neHPLUQKVMz_0q90hq,3:01010_5zhOCLdmf0bz_0q90hq,3:00u0u_5TbO69BpJopz_0q90hq,3:00f0f_flghjX3ERzAz_0q90hq,3:00z0z_aFbALZb8bdnz_0q90hq,3:01717_5jlERCruskUz_0q90hq,3:00q0q_7nOgOV9961Oz_0q90hq,3:00X0X_bRwOouETyxSz_0q90hq">
                <span class="result-price">$1,125</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:29" title="Thu 11 Nov 11:29:43 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-large-bedroom-bathroom/7406544970.html" data-id="7406544970" class="result-title hdrlnk" id="postid_7406544970" >Large 3 bedroom 2 bathroom w/ Washer/Dryer</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,125</span>

                <span class="housing">
                    3br -
                    1890ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406544075" data-repost-of="7403560771">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7406544075.html" class="result-image gallery" data-ids="3:01717_gj9324cpQPcz_0CG0t2,3:00B0B_eIp7ypo7nDzz_0CI0pg,3:00p0p_g2KiCFF9LnQz_09G07g,3:00x0x_6Uk317p4JCMz_09G07g,3:00909_gxsafyufIhrz_0CI0qQ,3:00101_4UDMrlDWcPuz_0CI0qD,3:00d0d_lfwZ7gQPAWbz_0CI0pM,3:00O0O_1e3EOoNRpp3z_0CI0pL,3:00b0b_9AEfX5UuFqTz_0CI0pM,3:00m0m_bSAUiG1xhX0z_0jm0cV,3:01212_4kyLJYyvva7z_09G07g,3:00A0A_5IDOmGxjnV8z_09G07g,3:00e0e_d2HN6ZcKqpJz_0eQ09U,3:00d0d_aFUIK5IoiZDz_0eQ09U,3:00q0q_4kWLxUx9zJjz_0gl0k7,3:00808_dUK0G0EPOFBz_0ak07K">
                <span class="result-price">$2,495</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:28" title="Thu 11 Nov 11:28:12 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7406544075.html" data-id="7406544075" class="result-title hdrlnk" id="postid_7406544075" >Available Now! 3 Bedroom Apartments at 5Fifty5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,495</span>

                <span class="housing">
                    3br -
                    2210ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406543962" data-repost-of="7403520938">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-modern-fully-equipped-bdr-in/7406543962.html" class="result-image gallery" data-ids="3:00000_6Yr9EPxg8fqz_0CG0t2,3:01414_80GSNnmiKjez_0CI0pM,3:00N0N_bKfODh55Jk1z_0CI0pG,3:01111_9RoxYq5ZsDVz_0CI0pL,3:00T0T_iEPzKzk0jwpz_0CI0pD,3:00909_gxsafyufIhrz_0CI0qQ,3:00d0d_lfwZ7gQPAWbz_0CI0pM,3:00O0O_1e3EOoNRpp3z_0CI0pL,3:00101_4UDMrlDWcPuz_0CI0qD,3:00808_cbpXQb3wjHIz_0CI0pG,3:00b0b_9AEfX5UuFqTz_0CI0pM,3:00P0P_ciTMp41O5U0z_0CI0pL,3:00d0d_aFUIK5IoiZDz_0eQ09U,3:00e0e_d2HN6ZcKqpJz_0eQ09U,3:00q0q_4kWLxUx9zJjz_0gl0k7,3:00F0F_5wnG52VOAzAz_09G07g,3:00u0u_C74YCd0KDtz_09G07g,3:00A0A_5IDOmGxjnV8z_09G07g,3:00D0D_bVg1O7aC3V2z_0ak07K">
                <span class="result-price">$2,095</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:27" title="Thu 11 Nov 11:27:59 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-modern-fully-equipped-bdr-in/7406543962.html" data-id="7406543962" class="result-title hdrlnk" id="postid_7406543962" >Modern, fully equipped 2 BDR in great neighborhood!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,095</span>

                <span class="housing">
                    2br -
                    1590ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406540838">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-the-living-is-easy-anytime-the/7406540838.html" class="result-image gallery" data-ids="3:00p0p_cQMeDLx1JO5z_0oc0i4,3:00L0L_5EPlJnx6VLSz_0oc0gv,3:00S0S_g7jmDJDhHVuz_0oc0gC,3:00B0B_dbkIwDbiQQ5z_0iq0oc,3:00C0C_11fiFeVhfXmz_0ff0oc,3:00n0n_8lVqDEwKk0Dz_0oc0h0,3:00707_83MOzfHXUt5z_0oc0h0,3:00n0n_e8UMHRbqsyZz_0oc0gy,3:00h0h_hQSRfyAmJHUz_0oc0g8,3:00K0K_i5paMdioux1z_0oc0g8">
                <span class="result-price">$1,427</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:22" title="Thu 11 Nov 11:22:37 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-the-living-is-easy-anytime-the/7406540838.html" data-id="7406540838" class="result-title hdrlnk" id="postid_7406540838" >The living is easy ANYTIME &amp; the deals are great NOW.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,427</span>

                <span class="housing">
                    3br -
                    1358ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406538794">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-modern-fully-equipped-bdr-in/7406538794.html" class="result-image gallery" data-ids="3:00p0p_cQMeDLx1JO5z_0oc0i4,3:00707_5bGD5TPvbTOz_0f70oc,3:00q0q_2ngXMiA4f2Jz_0oc0gv,3:00S0S_g7jmDJDhHVuz_0oc0gC,3:00B0B_dbkIwDbiQQ5z_0iq0oc,3:00C0C_11fiFeVhfXmz_0ff0oc,3:00n0n_8lVqDEwKk0Dz_0oc0h0,3:00W0W_aapGAZjTt07z_0oc0g8,3:00G0G_aRIfknmpOUBz_0oc0gy,3:00h0h_hQSRfyAmJHUz_0oc0g8,3:00K0K_i5paMdioux1z_0oc0g8">
                <span class="result-price">$1,427</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:19" title="Thu 11 Nov 11:19:19 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-modern-fully-equipped-bdr-in/7406538794.html" data-id="7406538794" class="result-title hdrlnk" id="postid_7406538794" >Modern, fully equipped 3 BDR in great neighborhood!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,427</span>

                <span class="housing">
                    3br -
                    1358ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400297654" data-repost-of="4906837434">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-virtual-tours-affordable-bed/7400297654.html" class="result-image gallery" data-ids="1:00h0h_f4qKV1UdUTm,1:00D0D_bLjz3GZSxft,1:01111_b55yIE9MDc3,1:00b0b_fn3F3Fdjuk8,1:00808_gedg7nfo1YI,1:00F0F_9T6QQSnm04h,1:01010_kxULVmtFzE5,1:00o0o_bZD52vhHeB2,1:00z0z_jxbs8ZcPKLO,1:00Q0Q_dTP7kPZkZdy,1:00m0m_9ezJbjQt8V3,1:00F0F_hwKkNji2I6n,1:00o0o_3rFLGoAO6Fa,1:00o0o_5nNlaJMdnEf,1:00B0B_byV9djqCtl7,1:00V0V_eGjguj6zHEI,1:01414_6Trar1hW5kx">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:17" title="Thu 11 Nov 11:17:26 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-virtual-tours-affordable-bed/7400297654.html" data-id="7400297654" class="result-title hdrlnk" id="postid_7400297654" >*Virtual Tours!!* Affordable 1-bed at Rumely Lofts | W/D in Unit</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                    668ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400297239" data-repost-of="4906837434">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-bed-at-rumely/7400297239.html" class="result-image gallery" data-ids="1:00D0D_bLjz3GZSxft,1:00h0h_f4qKV1UdUTm,1:01111_b55yIE9MDc3,1:00b0b_fn3F3Fdjuk8,1:00808_gedg7nfo1YI,1:00F0F_9T6QQSnm04h,1:01010_kxULVmtFzE5,1:00o0o_bZD52vhHeB2,1:00z0z_jxbs8ZcPKLO,1:00Q0Q_dTP7kPZkZdy,1:00m0m_9ezJbjQt8V3,1:00F0F_hwKkNji2I6n,1:00o0o_3rFLGoAO6Fa,1:00o0o_5nNlaJMdnEf,1:00B0B_byV9djqCtl7,1:00V0V_eGjguj6zHEI,1:01414_6Trar1hW5kx">
                <span class="result-price">$1,025</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:17" title="Thu 11 Nov 11:17:25 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-bed-at-rumely/7400297239.html" data-id="7400297239" class="result-title hdrlnk" id="postid_7400297239" >Affordable 2-bed at Rumely Lofts | W/D in Unit | Virtual Tours Offered</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,025</span>

                <span class="housing">
                    2br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400296832" data-repost-of="4868819634">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-bed-apartments-in/7400296832.html" class="result-image gallery" data-ids="3:00P0P_52oOFhPLSRF_0CI0pO,1:00q0q_8IUQjdIKucA,1:00e0e_lp7fjF2zH16,3:00E0E_cmkNvr32eWt_0CI0pO,3:00e0e_bS9zsFzevpw_0CI0pO,3:00A0A_g9Z9GyW3CZC_0CI0pO,3:00Y0Y_gs859Nzuf8I_0CI0pO,3:00X0X_cc5bhXpqBZF_0CI0pO,3:00t0t_gahAtyxtEIJ_0CI0pO,3:00Y0Y_8SoyLyfMa9A_0CI0pO,3:00e0e_4xawXqrYNvf_0CI0pO,3:01010_jP1UMmSpod6_0CI0pO,3:00n0n_5Q3M49RlAYY_0CI0pO,3:00k0k_5n0tcynnsSq_0CI0pO,3:00606_h5DHYOxgEzG_0CI0pO,3:01212_dtFoAQsX00V_0CI0pO,1:01414_6Trar1hW5kx">
                <span class="result-price">$840</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:14" title="Thu 11 Nov 11:14:54 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-bed-apartments-in/7400296832.html" data-id="7400296832" class="result-title hdrlnk" id="postid_7400296832" >Affordable 1-Bed Apartments in DT DSM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$840</span>

                <span class="housing">
                    1br -
                    700ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Metro Lofts  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400296742" data-repost-of="4868819634">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-bed-apartments/7400296742.html" class="result-image gallery" data-ids="3:00A0A_g9Z9GyW3CZC_0CI0pO,3:00X0X_cc5bhXpqBZF_0CI0pO,3:00Y0Y_gs859Nzuf8I_0CI0pO,3:00K0K_fEV2MbK52ws_0CI0pO,3:00Y0Y_8SoyLyfMa9A_0CI0pO,3:00e0e_4xawXqrYNvf_0CI0pO,3:00n0n_5Q3M49RlAYY_0CI0pO,3:00t0t_gahAtyxtEIJ_0CI0pO,3:01010_jP1UMmSpod6_0CI0pO,3:00P0P_52oOFhPLSRF_0CI0pO,1:00s0s_i92UEYVZ05S,1:00q0q_8IUQjdIKucA,1:00e0e_lp7fjF2zH16,3:01313_2zX3DcZP0Ug_0CI0rP,1:00404_hxzUYB2blq1,3:01212_dtFoAQsX00V_0CI0pO,3:00606_h5DHYOxgEzG_0CI0pO,3:00k0k_5n0tcynnsSq_0CI0pO,1:01414_6Trar1hW5kx">
                <span class="result-price">$950</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:14" title="Thu 11 Nov 11:14:53 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-affordable-bed-apartments/7400296742.html" data-id="7400296742" class="result-title hdrlnk" id="postid_7400296742" >Affordable 2-Bed Apartments</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    2br -
                    997ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Metro Lofts  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396273542" data-repost-of="6743972996">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bed-near-court-avenue/7396273542.html" class="result-image gallery" data-ids="1:00F0F_hFQlI3b9Wx6,1:00k0k_frFNMhCWANy,1:00y0y_59gsMIDJEnq,1:00q0q_50SAqbGqine,1:00303_cVaQ7Y4M9o5,1:00O0O_8TD4aTdAgP5,1:00D0D_9OFaqkVUC1F,1:00e0e_f1f9Hkm7Yrf,1:00R0R_9CI4ILkaJas,1:00V0V_dSRIZwE9WLq,1:01414_6Trar1hW5kx">
                <span class="result-price">$944</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:12" title="Thu 11 Nov 11:12:33 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bed-near-court-avenue/7396273542.html" data-id="7396273542" class="result-title hdrlnk" id="postid_7396273542" >1-Bed Near Court Avenue | Downtown Views</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$944</span>

                <span class="housing">
                    1br -
                    791ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406527996">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-quiet-2bd-1ba-3rd-floor-walk/7406527996.html" class="result-image gallery" data-ids="3:01515_2BW9QukLnXMz_0uY0ek,3:00U0U_eC5ncTbJpLJz_0t20CI,3:00O0O_3P0gTvdUN9rz_0t20CI,3:00o0o_5qEMRZvR263z_0t20CI,3:00101_f4czEnIyjb5z_0t20CI,3:00V0V_fSU37oKBDxbz_0t20CI,3:00D0D_1SnWhrdVEacz_0t20CI,3:00o0o_im2b1GMddPTz_0t20CI,3:00W0W_gBi7yYfKNelz_0t20CI,3:00V0V_kZYtDmKKTNQz_0dr0t2">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:01" title="Thu 11 Nov 11:01:59 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-quiet-2bd-1ba-3rd-floor-walk/7406527996.html" data-id="7406527996" class="result-title hdrlnk" id="postid_7406527996" >Quiet 2bd/1ba 3rd Floor Walk Up Apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (West Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406527908">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-west-des-moines-studio/7406527908.html" class="result-image gallery" data-ids="3:01717_4lKt2iluuoQz_0CI0q1">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 11:01" title="Thu 11 Nov 11:01:48 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-west-des-moines-studio/7406527908.html" data-id="7406527908" class="result-title hdrlnk" id="postid_7406527908" >West Des Moines Studio</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406526054">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-urbandale-studio/7406526054.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:58" title="Thu 11 Nov 10:58:38 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-urbandale-studio/7406526054.html" data-id="7406526054" class="result-title hdrlnk" id="postid_7406526054" >Urbandale Studio</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399150259" data-repost-of="6511038389">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-two-months-free-bedroom-the/7399150259.html" class="result-image gallery" data-ids="3:00O0O_eUHBlBDx6fVz_0jm0jm,1:00c0c_2cia9hr1GKQ,1:00m0m_4RUz3heMtit,1:00H0H_9YWOUlVA7Qt,1:00909_iGb9063GHnS,1:01515_aGWDylWdKiO,1:00Q0Q_8aaS5TtQjc3,1:01616_7JhSBqWSXFT,1:00Q0Q_kWNRQ0pEpab,1:00202_lRzAKnBvLJb,1:00U0U_8i0p4650p2W,1:00C0C_dWrQa4cxwv7,1:00d0d_dVIUm3LpFb1,1:00k0k_j4Cuao8tbCR,1:00h0h_650exzLO1LH,1:00t0t_2G2aH5hLipv,1:00e0e_90zZ21cnJL1,1:00L0L_czcuyGyrqMY,1:00909_6lk3rlCYcxu,1:01313_l6TAsU3TBab,1:00j0j_6YJCbyGtcil,1:00k0k_e4JgLnMFvAv,1:00M0M_anaQMleBFGC">
                <span class="result-price">$1,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:57" title="Thu 11 Nov 10:57:58 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-two-months-free-bedroom-the/7399150259.html" data-id="7399150259" class="result-title hdrlnk" id="postid_7399150259" >Two Months FREE | 1-Bedroom | The Nexus | Pet Friendly</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,300</span>

                <span class="housing">
                    1br -
                    730ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Downtown Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394188025" data-repost-of="7260969222">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-two-months-free-beautiful/7394188025.html" class="result-image gallery" data-ids="3:01010_iDTXJkNhc6Bz_0jm0cU,3:00O0O_eUHBlBDx6fVz_0jm0jm,3:00Y0Y_dVIUm3LpFb1z_0pO0hd,3:01010_jBf3CtuAKyDz_0pO0hd,3:00n0n_kUOxSfLSWdUz_0CI0pO,3:01414_iBkDDwQxjR8z_0CI0pO,3:00l0l_d0nxsvEBdv6z_0CI0pO,3:00L0L_5ojb7Y7WSu3z_0CI0pO,3:00H0H_3T47eJVK7mYz_0CI0pO,3:00606_8NsGHO4SxUCz_0pO0ev,3:01717_2r8O5g8jO83z_0pO0ev,3:00303_dJZ7lECRIR5z_0pO0he,3:00d0d_8zhO5AD30pUz_0pO0ev,3:00c0c_czcuyGyrqMYz_0pO0he,3:00X0X_i5b6GZ85qTnz_0pO0he,3:00f0f_2cia9hr1GKQz_0pO0he,3:00S0S_dm6LkYLu4Y9z_0pO0he,3:00909_l6TAsU3TBabz_0pO0he,3:00s0s_9Bhep18nRyrz_0pO0he,3:00Q0Q_bYtIoHEBzpdz_0hr0eq">
                <span class="result-price">$1,034</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:57" title="Thu 11 Nov 10:57:57 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-two-months-free-beautiful/7394188025.html" data-id="7394188025" class="result-title hdrlnk" id="postid_7394188025" >Two Months Free | Beautiful Alcove with Balcony @ the Nexus</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,034</span>

                <span class="housing">
                    1br -
                    531ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Gray&#39;s Lake  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403499094" data-repost-of="6511037643">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-months-free-bed-the-nexus/7403499094.html" class="result-image gallery" data-ids="1:00F0F_6Pi9LgEHZfb,3:00O0O_eUHBlBDx6fVz_0jm0jm,1:00c0c_2cia9hr1GKQ,1:01414_ilNzuC3Tcse,1:00L0L_czcuyGyrqMY,1:00z0z_b0IxeOfOzPx,1:00V0V_85Zj6p1JIuy,1:00M0M_265H3eYQCcg,1:00J0J_1GFt1AYv8N1,1:00k0k_jgUEbrIcbm2,1:01313_9jVipNvDDEI,1:00909_6lk3rlCYcxu,1:01313_l6TAsU3TBab,1:00H0H_dm6LkYLu4Y9,1:00k0k_j4Cuao8tbCR,1:00t0t_2G2aH5hLipv,1:00e0e_90zZ21cnJL1,1:00h0h_650exzLO1LH,1:00j0j_6YJCbyGtcil,1:00404_9BbqoJpXOdz,1:01414_6Trar1hW5kx">
                <span class="result-price">$1,597</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:57" title="Thu 11 Nov 10:57:57 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-months-free-bed-the-nexus/7403499094.html" data-id="7403499094" class="result-title hdrlnk" id="postid_7403499094" >2 MONTHS FREE! 2-Bed | The Nexus | Great Amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,597</span>

                <span class="housing">
                    2br -
                    1063ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Downtown Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406525443">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-available-now-bedroom-apartments/7406525443.html" class="result-image gallery" data-ids="3:00p0p_cQMeDLx1JO5z_0oc0i4,3:00707_5bGD5TPvbTOz_0f70oc,3:00G0G_edT5h4NgXD7z_0oc0gv,3:00606_7i4jR8YCSeAz_0oc0gC,3:00A0A_j9m9sXGTrNez_0ff0oc,3:00n0n_8lVqDEwKk0Dz_0oc0h0,3:00z0z_3Xe67bpEOqbz_0oc0g8,3:00h0h_hQSRfyAmJHUz_0oc0g8,3:00K0K_i5paMdioux1z_0oc0g8">
                <span class="result-price">$1,148</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:57" title="Thu 11 Nov 10:57:38 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-available-now-bedroom-apartments/7406525443.html" data-id="7406525443" class="result-title hdrlnk" id="postid_7406525443" >Available Now! 2 Bedroom Apartments at The Winhall of Williams Pointe</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,148</span>

                <span class="housing">
                    2br -
                    1093ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403498822" data-repost-of="5763181417">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-edge-of-downtown-studio/7403498822.html" class="result-image gallery" data-ids="3:00l0l_f1d3uBA8mTdz_0CI0pO,3:01111_2ao7vxgqAklz_0CI0pO,3:00909_4fbBWpDtZapz_0CI0pO,3:00p0p_e7qyv4pUxELz_0CI0pO,3:00s0s_4tweqJOIJzHz_0CI0pO,3:00S0S_2wDoXTnxFawz_0CI0pO,3:00Z0Z_4IRDu2R0MdZz_0Bs0t2,3:00O0O_eddX2B7lpg6z_0wg0lv,3:00k0k_1ZVbbR3iuANz_0wg0lv,3:01414_7QugrdLYLmyz_0wg0lv,3:00R0R_3BYbHL4smtJz_0wg0lv,3:00G0G_f1zBvZRJNJBz_0wg0lv,3:00m0m_goZETJzw6Q0z_0wg0lv,3:00O0O_1Jl7sxLWesxz_0xS0mA,3:00g0g_Ehbd37hnw8z_0iF0aT">
                <span class="result-price">$990</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:57" title="Thu 11 Nov 10:57:26 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-edge-of-downtown-studio/7403498822.html" data-id="7403498822" class="result-title hdrlnk" id="postid_7403498822" >Edge of Downtown - Studio</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$990</span>

                <span class="housing">
                    439ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7397359343" data-repost-of="5763181417">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-edge-of-downtown/7397359343.html" class="result-image gallery" data-ids="3:00r0r_9wZ2tIqsiTLz_0hq0by,3:01414_2AuzniURoHWz_0gy0bC,3:01111_digZMG4YF2Zz_0hp0bC,3:00F0F_ktYrzdo9s5Fz_0hp0bC,3:00y0y_i94NV9V5F6rz_0hp0bC,3:00M0M_fcd68cKgHtuz_0hp0bC,3:01515_l3HVhutqWI2z_07L0bC,3:00k0k_alSNnFHWutwz_0ho0bC,1:00N0N_bD3FHSwetqG,1:00V0V_fbrDlgoLRF7,1:00d0d_6z1kISz8mQx,1:00Z0Z_fD63xIpM6lS,1:00808_7rNgNongxvP,1:00G0G_1qfgK3k97lQ,1:01717_6pdGrsBrgy0,1:00505_hDNZB2p3cBA,1:00C0C_gv44pO7zZld,1:00C0C_cbfvzuosNo9,1:00H0H_d8aSzzKulm3,1:01111_ie8a9We6quS,1:01414_6Trar1hW5kx">
                <span class="result-price">$1,162</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:57" title="Thu 11 Nov 10:57:26 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-edge-of-downtown/7397359343.html" data-id="7397359343" class="result-title hdrlnk" id="postid_7397359343" >2 Bedroom - Edge of Downtown</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,162</span>

                <span class="housing">
                    2br -
                    842ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402422205">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7402422205.html" class="result-image gallery" data-ids="3:00B0B_4Bb66NZXWF5z_0bi07v,3:00i0i_7nPyiJBpfXPz_0bi07v,3:00q0q_2fnjeIIfThvz_0bi07v,3:00a0a_bBp57pCMTNSz_0bi07v,3:00B0B_dFJfmXjo5CQz_0bi07v,3:01616_bHa0U5LGYEnz_0bi07v,3:00K0K_OTpDtytcGgz_0bi07v,3:00t0t_frZ0QRNpO1mz_0bi07v">
                <span class="result-price">$695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:51" title="Thu 11 Nov 10:51:58 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7402422205.html" data-id="7402422205" class="result-title hdrlnk" id="postid_7402422205" >Swimming Pool with Sundeck, On-Site Manager, Garages Available</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$695</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Located in the Lower Beaver neighborhood  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406514040" data-repost-of="4875768559">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-one-bedroom-on-west-side/7406514040.html" class="result-image gallery" data-ids="3:00s0s_inDbhMk9pZ5z_0CI0t2,3:00I0I_88NzLrsSrlRz_0t20CI,3:00L0L_gEibzqsfZ5Iz_0t20CI,3:00v0v_cvNI8GOTGPwz_0t20CI">
                <span class="result-price">$620</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:47" title="Thu 11 Nov 10:47:23 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-one-bedroom-on-west-side/7406514040.html" data-id="7406514040" class="result-title hdrlnk" id="postid_7406514040" >Nice one bedroom on west side</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$620</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405363546" data-repost-of="7267667955">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-month-free-bed-at-randolph/7405363546.html" class="result-image gallery" data-ids="3:00U0U_jiXkvNXr5rqz_0oc0fN,3:00N0N_321Lf3mWHKyz_0oc0fU,3:00d0d_2WDZ49LRmhQz_0oc0oc,3:00e0e_jbmPsQqgwapz_0oc0fK,3:00q0q_kiZPjxklUnPz_0oc0g3,3:00e0e_aV1pLSQIMYyz_0oc0gG,3:00V0V_5H1IyPpUh2gz_0oc0fT,3:00j0j_itcPEL2jfMSz_0oc0g0,3:00l0l_g6Ec4hqCN84z_0oc0fQ,3:00Y0Y_h0Dxt7KOhZWz_0oc0g0,3:00808_5B90kGbatj0z_0oc0fN,3:00A0A_cuu0951MV2Cz_0oc0g4,3:00x0x_ggO3mL4zxztz_0oc0fQ,3:01616_3h7iqQs7bYkz_0oc0h5,3:00C0C_kh312N2BZamz_0oc0g5,3:00h0h_6s0qMd9HKDnz_0oc0gw,3:00g0g_k22T5aTr6c7z_0pO0hd,3:00m0m_iDynOUsu88Uz_0pO0hd,3:00Y0Y_cpnBnTestVez_0pO0hd,3:00B0B_1lhyBXap28oz_0pO0hd,3:00P0P_1mROW4Nf5dlz_0pO0hd,3:00505_9Nt1eiNXXgAz_0pO0hd,3:00V0V_5bWA0KWUt07z_0pO0hd">
                <span class="result-price">$1,071</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:44" title="Thu 11 Nov 10:44:16 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-month-free-bed-at-randolph/7405363546.html" data-id="7405363546" class="result-title hdrlnk" id="postid_7405363546" >1 MONTH FREE! 1-Bed at Randolph Apartments | Historic Building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,071</span>

                <span class="housing">
                    1br -
                    836ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406516443" data-repost-of="4960990382">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-bedroom-on-west-side/7406516443.html" class="result-image gallery" data-ids="3:00s0s_inDbhMk9pZ5z_0CI0t2,3:00I0I_88NzLrsSrlRz_0t20CI,3:00x0x_8kbK2NvAGZ5z_0t20CI,3:00v0v_cvNI8GOTGPwz_0t20CI">
                <span class="result-price">$740</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:41" title="Thu 11 Nov 10:41:28 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-nice-bedroom-on-west-side/7406516443.html" data-id="7406516443" class="result-title hdrlnk" id="postid_7406516443" >Nice 2 Bedroom on west side</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$740</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406504488">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-gracious-1052-sq-ft-apartment-in/7406504488.html" class="result-image gallery" data-ids="3:00p0p_cQMeDLx1JO5z_0oc0i4,3:00M0M_kU127E9ocijz_0h80oc,3:00G0G_edT5h4NgXD7z_0oc0gv,3:00S0S_g7jmDJDhHVuz_0oc0gC,3:00q0q_5HWY76wlUVLz_0iq0oc,3:00n0n_8lVqDEwKk0Dz_0oc0h0,3:00W0W_aapGAZjTt07z_0oc0g8,3:00h0h_hQSRfyAmJHUz_0oc0g8,3:00K0K_i5paMdioux1z_0oc0g8">
                <span class="result-price">$1,121</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:20" title="Thu 11 Nov 10:20:05 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-gracious-1052-sq-ft-apartment-in/7406504488.html" data-id="7406504488" class="result-title hdrlnk" id="postid_7406504488" >Gracious 1052 Sq. Ft. apartment in Waukee</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,121</span>

                <span class="housing">
                    2br -
                    1052ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406503050" data-repost-of="6944901265">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-come-home-to-luxury-at-an/7406503050.html" class="result-image gallery" data-ids="3:00Y0Y_hPzecXEr8VZz_0CI0pO,3:00r0r_5yeb67wTfvSz_0x20oM,3:00g0g_1MhZNA9Nyfkz_0CI0pO,3:00b0b_8S5IE9z5PSdz_0CI0pO,3:00505_2b9TDIxDtfZz_0CI0pO,3:01111_962GHgSQ5quz_0CI0pO,3:00k0k_6B9iuxjb8Ruz_0CI0pO,3:00A0A_2O1ogJsxI7Cz_0CI0pO,3:00C0C_br2Lib1vP1qz_0CI0pO,3:00X0X_eZn4CFFiBhCz_0CI0pO,3:00P0P_9bZupLk9CKUz_0CI0pO">
                <span class="result-price">$900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:17" title="Thu 11 Nov 10:17:32 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-come-home-to-luxury-at-an/7406503050.html" data-id="7406503050" class="result-title hdrlnk" id="postid_7406503050" >Come home to luxury at an affordable price!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$900</span>

                <span class="housing">
                    2br -
                    957ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Southside Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406495249">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-610-sq-ft-apartment/7406495249.html" class="result-image gallery" data-ids="3:00A0A_2vX9IL3FE84z_0CG0t2,3:00E0E_gYYXAtTUyIMz_07v04R,3:00I0I_fPc7NexvSJiz_0ak07K,3:00l0l_aty6utBRHM4z_0ak07K,3:01515_lL7YtMjltLkz_07x052,3:00P0P_9mKBGh6ItQ3z_0ak07K,3:00c0c_byX5pVIzJhtz_0ak07K,3:00F0F_kbDzWLqoK1Fz_0je0t2,3:00B0B_aQjSKYDpMuyz_0e809o,3:00J0J_7jNKZ2Xqwrsz_0ak07K,3:00J0J_ioYcCZnilAvz_0ak07K,3:00q0q_6XCbsQb7McGz_0oc0g8,3:00O0O_471FpQV1Ztmz_0ap07j">
                <span class="result-price">$1,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:03" title="Thu 11 Nov 10:03:41 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-610-sq-ft-apartment/7406495249.html" data-id="7406495249" class="result-title hdrlnk" id="postid_7406495249" >Gracious 610 Sq. Ft. apartment in Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,350</span>

                <span class="housing">
                    1br -
                    610ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406462471" data-repost-of="7295449527">

        <a href="https://desmoines.craigslist.org/apa/d/altoona-call-us-today-available-now/7406462471.html" class="result-image gallery" data-ids="3:00z0z_DNnkADXvzoz_0a907K,3:00B0B_h903vB25Orzz_0c308f,3:00P0P_dZgo1STmnvmz_0dq09K,3:01717_6K4mQQiDve3z_0kE0fu,3:00808_bcM8ElRjXqrz_0kE0fu,3:00X0X_cAnPzyRPg8Hz_0kE0fu,3:00M0M_gt9IQykmyWtz_0CI0t2,3:00909_bKAgdovHiJPz_0e909I,3:00404_kTUqZ0EeoF8z_0ef09H,3:00u0u_hzsA5o3vPnkz_0CI0t2,3:01414_3iltVXzEU37z_0kE0dW,3:00202_bBqIcI0k4LOz_09G07g,3:00W0W_amyzALZvtjbz_0dy09C,3:00O0O_iy9o4XJPesFz_0dL09D,3:00u0u_bCdtDYjJ3Syz_0c608d">
                <span class="result-price">$1,359</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:03" title="Thu 11 Nov 10:03:00 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/altoona-call-us-today-available-now/7406462471.html" data-id="7406462471" class="result-title hdrlnk" id="postid_7406462471" >CALL US TODAY! AVAILABLE NOW! Beautiful 2 Bed 2 Bath!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,359</span>

                <span class="housing">
                    2br -
                    1250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Altoona  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406494076">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-two-months-of-rent-for-free/7406494076.html" class="result-image gallery" data-ids="3:01010_jJEa0AOBxHXz_0CG0t2,3:00E0E_gYYXAtTUyIMz_07v04R,3:00I0I_fPc7NexvSJiz_0ak07K,3:00l0l_aty6utBRHM4z_0ak07K,3:01515_lL7YtMjltLkz_07x052,3:00P0P_9mKBGh6ItQ3z_0ak07K,3:00c0c_byX5pVIzJhtz_0ak07K,3:00F0F_kbDzWLqoK1Fz_0je0t2,3:00B0B_aQjSKYDpMuyz_0e809o,3:00J0J_7jNKZ2Xqwrsz_0ak07K,3:00J0J_ioYcCZnilAvz_0ak07K,3:00q0q_6XCbsQb7McGz_0oc0g8,3:00O0O_471FpQV1Ztmz_0ap07j">
                <span class="result-price">$976</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 10:01" title="Thu 11 Nov 10:01:25 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-two-months-of-rent-for-free/7406494076.html" data-id="7406494076" class="result-title hdrlnk" id="postid_7406494076" >Two Months of Rent for FREE! Tour Station 121 Today!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$976</span>

                <span class="housing">
                    1br -
                    541ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406492921">

        <a href="https://desmoines.craigslist.org/apa/d/waukee-the-living-is-easy-anytime-the/7406492921.html" class="result-image gallery" data-ids="3:00p0p_cQMeDLx1JO5z_0oc0i4,3:00G0G_edT5h4NgXD7z_0oc0gv,3:00606_7i4jR8YCSeAz_0oc0gC,3:00w0w_cLntFQuD3rkz_0iq0oc,3:00n0n_8lVqDEwKk0Dz_0oc0h0,3:00k0k_aXIx2pJkkCz_0oc0gy,3:00h0h_hQSRfyAmJHUz_0oc0g8,3:00V0V_cuWTuFXsLhSz_0oc0g8">
                <span class="result-price">$950</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:59" title="Thu 11 Nov 09:59:11 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/waukee-the-living-is-easy-anytime-the/7406492921.html" data-id="7406492921" class="result-title hdrlnk" id="postid_7406492921" >The living is easy ANYTIME &amp; the deals are great NOW.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    1br -
                    730ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Waukee  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400746368">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7400746368.html" class="result-image gallery" data-ids="3:00g0g_i6xetuy82J3z_0bi07v,3:01212_gnSY1l1xqpYz_07g042,3:00101_3fjdOLXURySz_0bi07v,3:00D0D_1IG6VokzbjAz_0bi07v,3:00606_8hH18vVIYgHz_0bi07v,3:00n0n_dtubfYc4W0Gz_0d40hq,3:00101_gpSRetP39zEz_0bi07v,3:01616_bEEgi1qz7JRz_0d40hq">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:56" title="Thu 11 Nov 09:56:05 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7400746368.html" data-id="7400746368" class="result-title hdrlnk" id="postid_7400746368" >Swimming Pool with Sundeck, On-Site Manager, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406490946">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-reduced-rates-at-maxwell/7406490946.html" class="result-image gallery" data-ids="3:00c0c_kpuKOWOCJhSz_0CG0t2,3:00z0z_cgpod0zw3lz_0oc0hT,3:00S0S_3BnDjB6ajXwz_0fe0oc,3:00n0n_4IqIBXSnVRxz_0g90oc,3:01212_8JhFEychJitz_0oc0gb,3:00Z0Z_73JTFHfxV5Sz_0g90oc,3:00p0p_fkGMUf6rJBfz_0fS0oc,3:00b0b_fFJ9u3lfTuJz_0i10oc,3:00u0u_hILwK1rVO4Bz_0g90oc,3:00t0t_3WhUrQhSeUzz_0k00dl,3:00p0p_f3aGaypnpSUz_0jm0t2,3:00Z0Z_2KYw3kF9tV0z_0iS0sj,3:00909_iHPlyiAAWnFz_0oc0g8,3:00O0O_1FGIljtYQIz_0oc0g8,3:01010_8JZ0noSi5QBz_0oc0g8,3:00t0t_4AQi5od4TjTz_0oc0g9,3:00000_4XLO8bBnToPz_0oc0g8,3:00T0T_enMwmkgfnYXz_0hM0oc,3:00O0O_471FpQV1Ztmz_0ap07j,3:00d0d_5YyoAu6LTENz_0CI0t2">
                <span class="result-price">$1,595</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:55" title="Thu 11 Nov 09:55:12 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-reduced-rates-at-maxwell/7406490946.html" data-id="7406490946" class="result-title hdrlnk" id="postid_7406490946" >Reduced rates at Maxwell! Skywalk Access, In-Unit W/D, Coffee Bar!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,595</span>

                <span class="housing">
                    2br -
                    960ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406489563" data-repost-of="7405301998">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-fast-easy-access-to-the/7406489563.html" class="result-image gallery" data-ids="3:00o0o_1O6x9McWSygz_0au07g,3:00K0K_a0cpeby61XAz_0CI0t2,3:00C0C_h61YPnMFOwcz_0CI0t2,3:00O0O_6OcCfo26803z_0CI0t2,3:00808_S9jVDEJUFsz_0CI0t2,3:00L0L_5sthmVIZ4Vcz_0CI0t2,3:00e0e_d03IClAYyMHz_0kP0cu,3:00L0L_2k2krjCBzeez_0j40cp,3:00s0s_ijmIlMal70Rz_0x20oM,3:00y0y_gLpW9S7Svmgz_0wg0lw,3:00303_4vwsgT64RMMz_0CI0lM,3:00V0V_aQzh2pmBEOBz_0CI0lM,3:00000_5euebjEPcerz_0CI0lM,3:00a0a_8OlgRt4QJ9sz_0CI0lM,3:00e0e_jJxbvh1pmgLz_0CI0lM,3:00Q0Q_apNkrFOUuz4z_0CI0lM,3:00U0U_d0FZyrYsZVZz_0CI0lM">
                <span class="result-price">$1,815</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:52" title="Thu 11 Nov 09:52:11 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-fast-easy-access-to-the/7406489563.html" data-id="7406489563" class="result-title hdrlnk" id="postid_7406489563" >Fast, easy access to the Downtown Core &amp; Gray&#39;s Lake.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,815</span>

                <span class="housing">
                    2br -
                    1250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406489330" data-repost-of="7403560771">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7406489330.html" class="result-image gallery" data-ids="3:01717_gj9324cpQPcz_0CG0t2,3:00B0B_eIp7ypo7nDzz_0CI0pg,3:00p0p_g2KiCFF9LnQz_09G07g,3:00x0x_6Uk317p4JCMz_09G07g,3:00909_gxsafyufIhrz_0CI0qQ,3:00101_4UDMrlDWcPuz_0CI0qD,3:00d0d_lfwZ7gQPAWbz_0CI0pM,3:00O0O_1e3EOoNRpp3z_0CI0pL,3:00b0b_9AEfX5UuFqTz_0CI0pM,3:00m0m_bSAUiG1xhX0z_0jm0cV,3:01212_4kyLJYyvva7z_09G07g,3:00A0A_5IDOmGxjnV8z_09G07g,3:00e0e_d2HN6ZcKqpJz_0eQ09U,3:00d0d_aFUIK5IoiZDz_0eQ09U,3:00q0q_4kWLxUx9zJjz_0gl0k7,3:00808_dUK0G0EPOFBz_0ak07K">
                <span class="result-price">$2,495</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:51" title="Thu 11 Nov 09:51:42 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-available-now-bedroom/7406489330.html" data-id="7406489330" class="result-title hdrlnk" id="postid_7406489330" >Available Now! 3 Bedroom Apartments at 5Fifty5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,495</span>

                <span class="housing">
                    3br -
                    2210ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406483827" data-repost-of="7029091132">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7406483827.html" class="result-image gallery" data-ids="1:00Y0Y_e0UClDWhIOz,1:00V0V_hhPXXpJCRZJ,1:00303_9XWpPgKoACa,1:00R0R_koVanxfOJHl,3:00B0B_9wenYw9Rqja_0k00dl,1:00707_1EFwlYTT96K,1:00a0a_5M2c2NtneNs,1:00e0e_5hGKtzORPdV,1:00v0v_gAOSYC3lKFd,1:00W0W_1sIUo5tXaEV,1:00F0F_440axA0rQo5,1:00n0n_9DGnaIUTbdI,1:00Y0Y_e1hIFi2GPUo,1:00a0a_zx1SxvpfLv,1:01111_2JFPSWkxExg,1:01616_hWwyBRZXil8,1:00s0s_lougoPUIB7f,1:00404_1V0zZdFd0Q5,1:00000_kYXIMyEn2S,1:01616_6DbDG7mcSB2,1:00x0x_jVOFMGkPoO2">
                <span class="result-price">$1,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:40" title="Thu 11 Nov 09:40:13 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7406483827.html" data-id="7406483827" class="result-title hdrlnk" id="postid_7406483827" >The living is easy ANYTIME &amp; the deals are great NOW.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,200</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406483723" data-repost-of="7029091132">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-your-dream-apartment-is-here/7406483723.html" class="result-image gallery" data-ids="3:00a0a_eBxx1wPXte9z_0po0hr,3:00B0B_9wenYw9Rqja_0k00dl,1:00Y0Y_e0UClDWhIOz,1:00V0V_hhPXXpJCRZJ,1:00303_9XWpPgKoACa,1:00R0R_koVanxfOJHl,1:00e0e_5hGKtzORPdV,1:00n0n_9DGnaIUTbdI,1:00Y0Y_e1hIFi2GPUo,1:00a0a_zx1SxvpfLv,1:01111_2JFPSWkxExg,1:01616_hWwyBRZXil8,1:00404_1V0zZdFd0Q5,1:00000_kYXIMyEn2S,1:01616_6DbDG7mcSB2,1:00x0x_jVOFMGkPoO2">
                <span class="result-price">$1,125</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:40" title="Thu 11 Nov 09:40:00 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-your-dream-apartment-is-here/7406483723.html" data-id="7406483723" class="result-title hdrlnk" id="postid_7406483723" >Your Dream Apartment is here at Cityville on 9th!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,125</span>

                <span class="housing">
                    1br -
                    694ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406483649" data-repost-of="7029091132">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-downtown-life-is-the-life/7406483649.html" class="result-image gallery" data-ids="3:00i0i_aEvIYNZ0lOqz_0bu06N,1:00V0V_hhPXXpJCRZJ,1:00303_9XWpPgKoACa,1:01111_2JFPSWkxExg,1:00n0n_9DGnaIUTbdI,1:00R0R_koVanxfOJHl,1:00707_1EFwlYTT96K,1:00v0v_gAOSYC3lKFd,1:00W0W_1sIUo5tXaEV,1:01616_hWwyBRZXil8,1:00a0a_5M2c2NtneNs,1:00s0s_lougoPUIB7f,1:00a0a_zx1SxvpfLv,3:00F0F_2GQF8Ja9n5kz_0jw0eE,3:00B0B_9wenYw9Rqja_0k00dl,3:00E0E_kvYcyDTIh5Jz_0po0j3,3:00S0S_9EFnjYXhqkez_0db09T">
                <span class="result-price">$1,595</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:39" title="Thu 11 Nov 09:39:51 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-downtown-life-is-the-life/7406483649.html" data-id="7406483649" class="result-title hdrlnk" id="postid_7406483649" >Downtown life is the life for you! Check us Out! $2,000 CREDIT!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,595</span>

                <span class="housing">
                    2br -
                    1092ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406483534" data-repost-of="7029091132">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-2000-free-available-now/7406483534.html" class="result-image gallery" data-ids="1:00S0S_4oWzdyUfwTv,3:00A0A_gHCBUdarDbJz_0cU0jm,1:00Y0Y_e0UClDWhIOz,1:00V0V_hhPXXpJCRZJ,1:00303_9XWpPgKoACa,1:00R0R_koVanxfOJHl,3:00B0B_9wenYw9Rqja_0k00dl,1:00e0e_5hGKtzORPdV,1:00F0F_440axA0rQo5,1:00a0a_zx1SxvpfLv,1:01111_2JFPSWkxExg,1:01616_hWwyBRZXil8,1:00s0s_lougoPUIB7f,1:00404_1V0zZdFd0Q5,1:00000_kYXIMyEn2S,1:01616_6DbDG7mcSB2,1:00x0x_jVOFMGkPoO2">
                <span class="result-price">$955</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:39" title="Thu 11 Nov 09:39:37 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-2000-free-available-now/7406483534.html" data-id="7406483534" class="result-title hdrlnk" id="postid_7406483534" >$2,000 FREE! Available Now! Studio Bedroom Apartments at Cityville</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$955</span>

                <span class="housing">
                    478ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406483481" data-repost-of="7029091132">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-2000-free-available-now/7406483481.html" class="result-image gallery" data-ids="1:00S0S_4oWzdyUfwTv,3:00A0A_gHCBUdarDbJz_0cU0jm,1:00Y0Y_e0UClDWhIOz,1:00V0V_hhPXXpJCRZJ,1:00303_9XWpPgKoACa,1:00R0R_koVanxfOJHl,3:00B0B_9wenYw9Rqja_0k00dl,1:00e0e_5hGKtzORPdV,1:00F0F_440axA0rQo5,1:00a0a_zx1SxvpfLv,1:01111_2JFPSWkxExg,1:01616_hWwyBRZXil8,1:00s0s_lougoPUIB7f,1:00404_1V0zZdFd0Q5,1:00000_kYXIMyEn2S,1:01616_6DbDG7mcSB2,1:00x0x_jVOFMGkPoO2">
                <span class="result-price">$955</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:39" title="Thu 11 Nov 09:39:29 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-2000-free-available-now/7406483481.html" data-id="7406483481" class="result-title hdrlnk" id="postid_7406483481" >$2,000 FREE! Available Now! Studio Bedroom Apartments at Cityville</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$955</span>

                <span class="housing">
                    478ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406480107">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-open-house/7406480107.html" class="result-image gallery" data-ids="3:00D0D_doDNaLTJuPez_0mr0t2,3:00C0C_br2Lib1vP1qz_0CI0pO,3:00R0R_ifxAZh71ncdz_0CI0pO,3:00v0v_22CmPwyyTR6z_0CI0pO,3:00X0X_eZn4CFFiBhCz_0CI0pO,3:00505_2b9TDIxDtfZz_0CI0pO,3:00k0k_6B9iuxjb8Ruz_0CI0pO,3:00A0A_2O1ogJsxI7Cz_0CI0pO,3:00g0g_1MhZNA9Nyfkz_0CI0pO,3:00505_a0ZGLfdqa6hz_0CI0pO">
                <span class="result-price">$900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:32" title="Thu 11 Nov 09:32:58 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-open-house/7406480107.html" data-id="7406480107" class="result-title hdrlnk" id="postid_7406480107" >Apartment Open House</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$900</span>

                <span class="housing">
                    2br -
                    947ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406479915">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479915.html" class="result-image gallery" data-ids="3:00000_9XgacKJ8DRrz_0d40hq,3:00r0r_hlR3NazDC0Yz_0bi07v,3:00b0b_4YCpbFDUMd3z_0d40hq,3:00E0E_koZZPbRgFinz_0bi07v,3:00G0G_fwOKBfhzy2mz_0bi07v,3:00C0C_GWfvkwiix9z_0bi07v,3:00s0s_6zVcLgrF1xWz_0bi07v,3:00V0V_ifhlI92YOFZz_0bi07v">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:32" title="Thu 11 Nov 09:32:33 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479915.html" data-id="7406479915" class="result-title hdrlnk" id="postid_7406479915" >Laundry in Each Building, New Ownership, Grilling &amp; Picnic Ares</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406479486">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479486.html" class="result-image gallery" data-ids="3:00D0D_1nl2L40Dthvz_0bi07v,3:00Q0Q_1rgvomr62orz_0bi07v,3:01212_kfepHcMK8BYz_0bi07v,3:00N0N_4WYcc3NRERPz_0bi07v,3:00X0X_4tIyU1nWJ1Iz_09O0hq,3:01414_95KR5OAzvAiz_0bi07v,3:00N0N_793g4AIAYIRz_09O0hq,3:01010_eWBiWvOfS54z_0ne0hq">
                <span class="result-price">$685</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:31" title="Thu 11 Nov 09:31:38 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-laundry-in-each-building-new/7406479486.html" data-id="7406479486" class="result-title hdrlnk" id="postid_7406479486" >Laundry in Each Building, New Ownership, On-Site Manager</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$685</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406471454">

        <a href="https://desmoines.craigslist.org/apa/d/minburn-bedroon-single-family-home/7406471454.html" class="result-image gallery" data-ids="3:00D0D_9406zeVU2mNz_0gw0co,3:00g0g_5Y01aDoRRK4z_0co09i,3:00606_d7Q1XE4QTstz_0co09i,3:00707_mdvjmiQBKEz_0co09i">
                <span class="result-price">$950</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:24" title="Thu 11 Nov 09:24:05 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/minburn-bedroon-single-family-home/7406471454.html" data-id="7406471454" class="result-title hdrlnk" id="postid_7406471454" >4 Bedroon Single Family Home</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    4br -
                    2970ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Minburn  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406475876">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-get-fit-at-crosswinds/7406475876.html" class="result-image gallery" data-ids="3:00U0U_9ugi4OPrMgFz_0uY0kE,3:00F0F_7rFKF0DZIutz_0uY0kE,3:00000_5TFXtLnshTUz_0uY0kE,3:00d0d_4hhraUxgyy7z_0uY0kE,3:00Q0Q_lSEpyJHa1Msz_0uY0kE,3:01010_bp06aOnlC8Nz_0uY0kE,3:01414_fB2lPnICdDiz_0uY0kE,3:00101_k2P21UF4Qfxz_0uY0kE,3:00J0J_bH2iyf6GL8sz_0uY0kE,3:00Q0Q_k8Q7BVTwO4vz_0uY0kE,3:00m0m_i5F3HzHEX4Qz_0uY0kE,3:00a0a_9QHbzp47FPOz_0CI0pO,3:00O0O_6ponX219QLvz_0uY0kE,3:00I0I_bRDy4LzxgcXz_0dk0bw">
                <span class="result-price">$704</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:23" title="Thu 11 Nov 09:23:51 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-get-fit-at-crosswinds/7406475876.html" data-id="7406475876" class="result-title hdrlnk" id="postid_7406475876" >Get Fit at Crosswinds Apartments Onsite Fitness Center. 1 BR Apt Home!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$704</span>

                <span class="housing">
                    1br -
                    663ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406471901" data-repost-of="7380701472">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-1470-sq-ft/7406471901.html" class="result-image gallery" data-ids="3:00u0u_ggYhtpK3jAFz_0au07g,3:00i0i_i72mfPKYxVlz_0CI0t2,3:00606_6bgvjHI4kA4z_08t06y,3:00U0U_8nxmBIL3e46z_08T06u,3:00a0a_1ASBrq8FTn8z_0CI0t2,3:00000_jXFyWWuxP6Qz_0CI0pO,3:00r0r_isjVMwn2t2Xz_0iK0t2,3:00F0F_9YfzP95Vjlzz_0uK0lo,3:00707_9VT7yaoiPduz_0jm0ew,3:00W0W_82OwE9DMKuKz_0CI0pO,3:00N0N_8iIw71AjXhAz_0tj0kl,3:00202_73w7YpKf3WVz_0w40jZ,3:00c0c_g0zsrmbzKF6z_0CI0lM,3:00e0e_eJlKLi9ZdaAz_0nV0et,3:01111_iRJu6Jlstdqz_0CI0t2,3:00o0o_8vrVPQF9q6uz_0fO0ax,3:00d0d_6ncBXPSoe7bz_0CI0lM,3:00505_dTQBNdLnTRhz_08N064,3:00Y0Y_cQ7vldmgkrz_0kt0bc,3:00y0y_gLpW9S7Svmgz_0wg0lw,3:01717_lrFrkn473d0z_0CI0pO">
                <span class="result-price">$2,295</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:15" title="Thu 11 Nov 09:15:05 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-gracious-1470-sq-ft/7406471901.html" data-id="7406471901" class="result-title hdrlnk" id="postid_7406471901" >Gracious 1470 Sq. Ft. apartment in Des Moines</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,295</span>

                <span class="housing">
                    3br -
                    1470ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406471768" data-repost-of="7377324717">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7406471768.html" class="result-image gallery" data-ids="3:00d0d_6ncBXPSoe7bz_0CI0lM,3:00606_6bgvjHI4kA4z_08t06y,3:00U0U_8nxmBIL3e46z_08T06u,3:00i0i_i72mfPKYxVlz_0CI0t2,3:00X0X_6qcpXPSoGVRz_0CI0t2,3:00n0n_aIYwodbdOI6z_0CI0t2,3:00a0a_1ASBrq8FTn8z_0CI0t2,3:00r0r_isjVMwn2t2Xz_0iK0t2,3:00F0F_9YfzP95Vjlzz_0uK0lo,3:00m0m_bUdyPXDnzEz_0w40lo,3:00C0C_6LDb5J8Q52rz_0uG0kd,3:00000_dlR8gmLAImyz_0w00ld,3:00S0S_73Gj78n8VPKz_0tG0ld,3:00N0N_8iIw71AjXhAz_0tj0kl,3:00202_73w7YpKf3WVz_0w40jZ,3:00C0C_bTYDS9M0LrCz_0w40k9,3:00c0c_g0zsrmbzKF6z_0CI0lM,3:00e0e_eJlKLi9ZdaAz_0nV0et,3:00o0o_8vrVPQF9q6uz_0fO0ax,3:00505_dTQBNdLnTRhz_08N064,3:01111_iRJu6Jlstdqz_0CI0t2,3:00Y0Y_cQ7vldmgkrz_0kt0bc,3:00y0y_gLpW9S7Svmgz_0wg0lw,3:01717_lrFrkn473d0z_0CI0pO">
                <span class="result-price">$1,815</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 09:14" title="Thu 11 Nov 09:14:48 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-the-living-is-easy-anytime/7406471768.html" data-id="7406471768" class="result-title hdrlnk" id="postid_7406471768" >The living is easy ANYTIME &amp; the deals are at 2 months FREE!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,815</span>

                <span class="housing">
                    2br -
                    1250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399533507">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-duplex-with/7399533507.html" class="result-image gallery" data-ids="3:01313_iTjEVMxBL2Kz_0CI0pE">
                <span class="result-price">$900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:55" title="Thu 11 Nov 08:55:20 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-duplex-with/7399533507.html" data-id="7399533507" class="result-title hdrlnk" id="postid_7399533507" >2 bedroom duplex with partially finished basement</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$900</span>

                <span class="housing">
                    2br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (947 Kenyon Ave  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399531762">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-cute-bedroom-bathroom-home/7399531762.html" class="result-image gallery" data-ids="3:01010_g43ST1VLjKxz_0CI0pE">
                <span class="result-price">$675</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:55" title="Thu 11 Nov 08:55:17 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-cute-bedroom-bathroom-home/7399531762.html" data-id="7399531762" class="result-title hdrlnk" id="postid_7399531762" >cute 1 bedroom 1 bathroom home</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$675</span>

                <span class="housing">
                    1br -
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (600 Mckinley  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394750297" data-repost-of="6644624324">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-houses-for-rent-some/7394750297.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:55" title="Thu 11 Nov 08:55:13 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-houses-for-rent-some/7394750297.html" data-id="7394750297" class="result-title hdrlnk" id="postid_7394750297" >Houses For Rent Some Available Today</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,000</span>

                <span class="housing">
                    3br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (4207 SW 9th Street  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394764601" data-repost-of="7274376513">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-this-week-with-approved/7394764601.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:55" title="Thu 11 Nov 08:55:07 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-this-week-with-approved/7394764601.html" data-id="7394764601" class="result-title hdrlnk" id="postid_7394764601" >Move This Week with Approved Application</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$900</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394762815" data-repost-of="6644624324">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-houses-for-rent-some/7394762815.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:54" title="Thu 11 Nov 08:54:51 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-houses-for-rent-some/7394762815.html" data-id="7394762815" class="result-title hdrlnk" id="postid_7394762815" >Houses For Rent Some Available Today</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,200</span>

                <span class="housing">
                    3br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (4207 SW 9th Street  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394825197" data-repost-of="7274376513">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-this-week-with-approved/7394825197.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:54" title="Thu 11 Nov 08:54:47 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-move-this-week-with-approved/7394825197.html" data-id="7394825197" class="result-title hdrlnk" id="postid_7394825197" >Move This Week with Approved Application</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$900</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394759980" data-repost-of="4866396859">

        <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7394759980.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:54" title="Thu 11 Nov 08:54:23 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/homesforrentdesmoinescom/7394759980.html" data-id="7394759980" class="result-title hdrlnk" id="postid_7394759980" >HOMESFORRENTDESMOINES.COM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$950</span>

                <span class="housing">
                    3br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406457380">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-apt-located-near/7406457380.html" class="result-image gallery" data-ids="3:00h0h_fWnGYq4a3uqz_0ak07K,3:00202_dArkOLOQ0aez_0ak07K,3:00F0F_cgM95D72HGxz_0ak07K,3:00D0D_jtlQ7UHHEG5z_0ak07K,3:00f0f_dNx9iI14Z8Vz_0ak07K,3:00I0I_2QCDWvMs4mjz_0ak07K">
                <span class="result-price">$854</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:45" title="Thu 11 Nov 08:45:03 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-apt-located-near/7406457380.html" data-id="7406457380" class="result-title hdrlnk" id="postid_7406457380" >2 Bedroom Apt Located Near Easter Lake Love Where You Live!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$854</span>

                <span class="housing">
                    2br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7397571228">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7397571228.html" class="result-image gallery" data-ids="3:00x0x_3Tz7dOm3ZKSz_0bi07v,3:01515_bYBgXTLY0X8z_0bi07v,3:00x0x_aBzOcgQO7gyz_07g042,3:00n0n_71tIl7rNS4Kz_0ne0hq,3:00K0K_1R7YkAMEglFz_0d40hq,3:00s0s_7zCw4o3FKChz_0bi07v,3:00A0A_bqfivAVG9RXz_0bi07v,3:00A0A_5ou0tvToRGzz_0d40hq">
                <span class="result-price">$705</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:44" title="Thu 11 Nov 08:44:27 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-swimming-pool-with-sundeck/7397571228.html" data-id="7397571228" class="result-title hdrlnk" id="postid_7397571228" >Swimming Pool with Sundeck, Ample Parking, New Ownership</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$705</span>

                <span class="housing">
                    1br -
                    650ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7393692085" data-repost-of="7299271238">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-beautiful-2nd-floor-coming/7393692085.html" class="result-image gallery" data-ids="3:00101_8w886XgMQjZz_0CI0t2,3:00H0H_hS8T6dZNhs6z_0CI0t2,3:00i0i_eZGtQIizk8cz_0CI0t2,3:01111_2VjfLxAIlgnz_0CI0t2,3:01313_ef0OFeCbg9Xz_0lM0t2,3:00v0v_9yNZPObsdTBz_0CI0t2,3:00s0s_aZWohWV7llpz_0CI0t2,3:00202_aso10jhv7MZz_0CI0t2,3:01616_5uI1ko4E2R2z_0lM0t2,3:00303_gjZauIrGi7Dz_0CI0t2">
                <span class="result-price">$1,175</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 08:36" title="Thu 11 Nov 08:36:43 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-beautiful-2nd-floor-coming/7393692085.html" data-id="7393692085" class="result-title hdrlnk" id="postid_7393692085" >Beautiful 2nd floor coming for Feb 5th Move in!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,175</span>

                <span class="housing">
                    2br -
                    1005ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Johnston  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405284342" data-repost-of="7389455346">

        <a href="https://desmoines.craigslist.org/apa/d/bondurant-780-mcintosh-ct-ne/7405284342.html" class="result-image gallery" data-ids="3:00o0o_hn1gE2Lylydz_0ww0oo,3:01313_bPZLvXYJ8krz_0ww0oo,3:00a0a_bImQIsXUmkIz_0ww0oo,3:00Y0Y_jTPZD50tmqVz_0ww0oo,3:00m0m_2waFVzQjjxz_0ww0oo,3:00x0x_8etxaGUd6taz_0ww0oo,3:00s0s_3ENdEQPOeYpz_0ww0oo,3:00N0N_1HqLEshzr26z_0ww0oo,3:00f0f_f6XILwaki6gz_0ww0oo,3:00I0I_aLwjFctNoRCz_0ww0oo,3:00y0y_f6Pj4vs25Vz_0ww0oo,3:00101_bKI0S0OfRbiz_0ww0oo,3:00H0H_kLQHJdu9kL1z_0ww0oo,3:00S0S_8a1qfljy0Nnz_0ww0oo,3:00Z0Z_gILtGh7EbhTz_0ww0oo,3:00X0X_3rIxJ5ZkXI4z_0ww0oo,3:00U0U_98thMIsF0rgz_0ww0oo,3:00o0o_2ZJLhvGaLFZz_0ww0oo,3:00R0R_f8E1xx9rvByz_0ww0oo">
                <span class="result-price">$1,695</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:36" title="Thu 11 Nov 07:36:01 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/bondurant-780-mcintosh-ct-ne/7405284342.html" data-id="7405284342" class="result-title hdrlnk" id="postid_7405284342" >780 MCINTOSH CT NE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,695</span>

                <span class="housing">
                    2br -
                    1475ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (BONDURANT  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396312054" data-repost-of="6886099568">

        <a href="https://desmoines.craigslist.org/apa/d/urbandale-th-st/7396312054.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:36" title="Thu 11 Nov 07:36:00 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/urbandale-th-st/7396312054.html" data-id="7396312054" class="result-title hdrlnk" id="postid_7396312054" >813 13TH ST</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,575</span>

                <span class="housing">
                    3br -
                    1370ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (WEST DES MOINES, IA  )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7393207730">

        <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-1109-52nd-st-1605/7393207730.html" class="result-image gallery" data-ids="3:01414_lxVvrWxMujUz_04w03o,3:00e0e_zDu7nYkvJyz_0ww0oo,3:00W0W_cZyvjddwdfnz_0ww0oo,3:00i0i_gdAXcTlmkhIz_0ww0oo,3:00D0D_cBdvG3OMiDHz_0ww0oo,3:00m0m_f3SEGF7cd0tz_0ww0oo,3:00u0u_fLzvHPdFPrNz_0ww0oo,3:00R0R_g1CrQBgVkE0z_0ww0oo,3:00909_cdztqpFGbSrz_0ww0oo,3:00Q0Q_aY6nVtSRkoAz_0ww0oo,3:00606_g4S4Eem4fl6z_0ww0oo,3:00H0H_i8NqfYlVBDwz_0ww0oo,3:00A0A_gjPsbOUWTPZz_0ww0oo,3:01717_du3dKMTFB2Fz_0ww0oo,3:00P0P_8qsq7iGBDlCz_0ww0oo,3:00k0k_kMXbG9r3Ei9z_0ww0oo,3:00K0K_3MSlz3FZphhz_0ww0oo,3:00C0C_kPyM82kGfbYz_0ww0oo,3:00B0B_kxBgfPlru75z_0ww0oo,3:00J0J_kgBZNsngc4Nz_0ww0oo">
                <span class="result-price">$1,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:36" title="Thu 11 Nov 07:36:00 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/west-des-moines-1109-52nd-st-1605/7393207730.html" data-id="7393207730" class="result-title hdrlnk" id="postid_7393207730" >1109 S 52ND ST #1605</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,350</span>

                <span class="housing">
                    2br -
                    1304ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (WEST DES MOINES  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7394127922">

        <a href="https://desmoines.craigslist.org/apa/d/johnston-8831-long-meadow-drive/7394127922.html" class="result-image gallery" data-ids="3:00V0V_iJpEjwaQqZ1z_0ww0oo,3:00z0z_djVT6QHcDYGz_0ww0oo,3:00K0K_lRx8abSb7bJz_0ww0oo,3:00p0p_k5U1tRsFYPlz_0ww0oo,3:00q0q_2f6CMbBvNvbz_0ww0oo,3:00W0W_cXaKUcOKIukz_0ww0oo,3:00A0A_9vMfCLggM5Yz_0ww0oo,3:00R0R_lam7RP9SGdUz_0ww0oo,3:00V0V_hSCvLVLJeuvz_0ww0oo,3:01212_8NZIs7UiVY3z_0ww0oo,3:00y0y_5LHBJjHl6bWz_0ww0oo,3:00N0N_gDODDiEyXzCz_0ww0oo,3:01515_ibxVrAkLH6nz_0ww0oo,3:00g0g_bbDK3EqQzgSz_0ww0oo,3:00w0w_c3pq8CetSZbz_0ww0oo,3:00j0j_gM55EFUoZMPz_0ww0oo,3:00T0T_fu4FZwcaOp3z_0ww0oo,3:00E0E_eVl2jruVccYz_0ww0oo,3:00I0I_g0a0L5H8O1oz_0ww0oo,3:00q0q_dgt8lN8zonUz_0ww0oo,3:01616_lg3pwlSJZ1ez_0ww0oo,3:00Q0Q_ih2wkgCvbePz_0ww0oo,3:00O0O_lpJr218b7qsz_0ww0oo">
                <span class="result-price">$2,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:35" title="Thu 11 Nov 07:35:48 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/johnston-8831-long-meadow-drive/7394127922.html" data-id="7394127922" class="result-title hdrlnk" id="postid_7394127922" >8831 LONG MEADOW DRIVE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,100</span>

                <span class="housing">
                    4br -
                    1869ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (JOHNSTON  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400224412" data-repost-of="7378036293">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-for-rent-bed-bath/7400224412.html" class="result-image gallery" data-ids="3:00A0A_h9eDbI2ETwsz_0dy08Z">
                <span class="result-price">$575</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:09" title="Thu 11 Nov 07:09:53 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-apartment-for-rent-bed-bath/7400224412.html" data-id="7400224412" class="result-title hdrlnk" id="postid_7400224412" >Apartment for Rent - 1 Bed / 1 Bath, Parking, Stove and Fridge Include</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$575</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (3225 5th Ave., Unit #2; Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401985258">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-house-for-rent-bed-bath-ac/7401985258.html" class="result-image gallery" data-ids="3:00909_bChWSSlF4K3z_08M05n,3:00c0c_8A60HVoczqCz_0CI0t2,3:01616_aLhPKPoVKcz_0CI0t2,3:00g0g_8ZQkebpqELmz_0CI0t2,3:00V0V_2AwN8MZFpBaz_0CI0t2,3:00z0z_daZYyxoBOt9z_0CI0t2,3:00m0m_2SD9LtgrSBFz_0CI0t2,3:00G0G_6ElpA33xxcpz_0CI0t2,3:00g0g_1iCu0rgX4OYz_0CI0t2,3:00707_guA6u8kBRxwz_0CI0t2,3:00w0w_kiWPJTvSptNz_0CI0t2,3:00B0B_7xomwtAHtcdz_0CI0t2,3:01010_3rLCdPrhKXiz_0CI0t2,3:00Q0Q_dcyjvJTsx5Uz_0CI0t2,3:00D0D_L02WU5gIDXz_0CI0t2,3:00t0t_9r3h74QCGtqz_0CI0t2,3:00D0D_lumu6DExN07z_0CI0t2">
                <span class="result-price">$1,195</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:09" title="Thu 11 Nov 07:09:49 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-house-for-rent-bed-bath-ac/7401985258.html" data-id="7401985258" class="result-title hdrlnk" id="postid_7401985258" >House for Rent - 4 Bed / 2 Bath, AC, Parking, Front Porch, Quality</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,195</span>

                <span class="housing">
                    4br -
                </span>

                <span class="result-hood"> (1600 Carpenter Ave., Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401992919">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-house-for-rent-bed-bath/7401992919.html" class="result-image gallery" data-ids="3:00505_gLzTgQrsrCwz_0qj0kz,3:00q0q_gDmQXXdBgeXz_0w00o0,3:00Q0Q_9396gUNRuutz_0w00o0,3:01515_3TP6DEs1FHpz_0w00o0,3:00s0s_4Tklb1kmlHnz_0w00o0,3:00i0i_bfrEYjcEgsjz_0w00o0,3:00e0e_kWMEeoxwvyJz_0w00o0,3:00w0w_jL1zRVngMbrz_0w00o0,3:00606_and4QYcIDUmz_0w00o0,3:00J0J_7hrFbNa6orGz_0w00o0,3:00e0e_eRxvZo0xXJMz_0w00o0,3:01212_jPDwqWEQpi9z_0w00o0,3:00202_bhYx7P1mkppz_0w00o0,3:01717_17naKixv2Ukz_0w00o0,3:00K0K_lLWXenbS5stz_0w00o0,3:00k0k_ocwrQH69Grz_0w00o0,3:00X0X_44VqzYYJPdhz_0w00o0,3:00s0s_6benfxilEbnz_0w00o0,3:00J0J_gTJqFIQwwqWz_0w00o0,3:00J0J_cLbtXT7elAfz_0w00o0,3:00x0x_5IgeuL28Vs0z_0w00o0,3:00g0g_8vNjIINAMBdz_0w00o0">
                <span class="result-price">$1,595</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:09" title="Thu 11 Nov 07:09:46 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-house-for-rent-bed-bath/7401992919.html" data-id="7401992919" class="result-title hdrlnk" id="postid_7401992919" >House for Rent - 5 Bed / 3 Bath, Basement, Garage, Fenced Yard, AC</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,595</span>

                <span class="housing">
                    5br -
                </span>

                <span class="result-hood"> (3745 Indianapolis Ave., Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405335485">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-house-for-rent-bed-bath-ac/7405335485.html" class="result-image gallery" data-ids="3:00v0v_hhTEzzICYBZz_0iy0eN,3:01414_izlmYXk4yrGz_0CI0lL,3:01414_eWnYbX4w0rZz_0CI0lL,3:01111_aoSGAsNATbVz_0CI0lL,3:00c0c_4PZufatLWsWz_0CI0lL,3:00Y0Y_9b49V4cKGEOz_0CI0lL,3:01717_g2qAF5UIWoVz_0CI0lL,3:00x0x_1YnJmLp2edCz_0CI0lL,3:00t0t_fEdsbcJWaVBz_0CI0lL,3:00606_jatkpMvggcCz_0lL0CI,3:00707_fJ2g0ExukrDz_0CI0lL,3:01414_2Y1Z0a86K6Tz_0CI0lL,3:01313_1j02p83nxZ1z_0CI0lL,3:00V0V_3yoQBdHKmZoz_0CI0lL,3:00z0z_kPxMFKZjbgfz_0lL0CI,3:00j0j_aNHHhh6SLDOz_0CI0lL,3:00C0C_esz58Rdi11Bz_0CI0lL,3:00X0X_le1dGGHamc4z_0CI0lL,3:00h0h_62EYAodWSYSz_0CI0lL,3:00V0V_bOKQLaykPNCz_0CI0lL">
                <span class="result-price">$1,295</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 07:09" title="Thu 11 Nov 07:09:43 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-house-for-rent-bed-bath-ac/7405335485.html" data-id="7405335485" class="result-title hdrlnk" id="postid_7405335485" >House for Rent - 5 Bed / 3 Bath, AC, Carpet, Garage, Porch, Dishwasher</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,295</span>

                <span class="housing">
                    5br -
                </span>

                <span class="result-hood"> (1108 17th Street, Des Moines, IA  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406401279">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-bath-ranch-with/7406401279.html" class="result-image gallery" data-ids="3:00808_gtSq0Awg1s6z_0dP09U,3:00x0x_7VS93zJ9kl0z_0dn0a2,3:01010_cBA6OUOG037z_07s09X,3:00A0A_dEEZwhzFf33z_0dp0a6,3:00e0e_7qcixjwzClHz_0do0a8,3:00V0V_8QnswRAaIhoz_0dn0a4,3:00V0V_dTY8u9ZB4kmz_0do0a1,3:00Z0Z_d0iwCzZuFtCz_07y0a6">
                <span class="result-price">$1,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 05:32" title="Thu 11 Nov 05:32:30 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-bath-ranch-with/7406401279.html" data-id="7406401279" class="result-title hdrlnk" id="postid_7406401279" >3 bedroom 1 bath ranch with upstairs.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406401239">

        <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-bath-ranch-with/7406401239.html" class="result-image gallery" data-ids="3:00x0x_7VS93zJ9kl0z_0dn0a2,3:01010_cBA6OUOG037z_07s09X,3:00A0A_dEEZwhzFf33z_0dp0a6,3:00808_gtSq0Awg1s6z_0dP09U,3:00e0e_7qcixjwzClHz_0do0a8,3:00V0V_8QnswRAaIhoz_0dn0a4,3:00V0V_dTY8u9ZB4kmz_0do0a1,3:00Z0Z_d0iwCzZuFtCz_07y0a6">
                <span class="result-price">$1,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 04:44" title="Thu 11 Nov 04:44:52 AM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://desmoines.craigslist.org/apa/d/des-moines-bedroom-bath-ranch-with/7406401239.html" data-id="7406401239" class="result-title hdrlnk" id="postid_7406401239" >3 bedroom 1 bath ranch with upstairs.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (E Granger Ave Des Moines  )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>

                    
                    
                </ul>
            </div>

            <div class="search-legend bottom">
                <div class="search-view">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="search-sort">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">1788</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/apa" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/apa" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">1788</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/apa?s=120" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

            </div>

            <section class="blurbs">
                
            </section>

            <div id="floater">
                <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                <img class="payload" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
            </div>
        </form>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>

<div class="slidemessage">
    <span class="fave">
        <span class="star"></span>
        favorited
    </span>
    <span class="unfave">
        <span class="star"></span>
        no longer favorited
    </span>
    <span class="hide">
        <span class="trash"></span>
        hidden
    </span>
    <span class="unhide">
        <span class="trash"></span>
        no longer hidden
    </span>
</div>

<footer>
    <ul class="clfooter">
        <li>&copy; 2021 <span class="desktop">craigslist</span><span class="mobile">CL</span></li>
        <li><a href="https://www.craigslist.org/about/help/">help</a></li>
        <li><a href="https://www.craigslist.org/about/scams">safety</a></li>
        <li class="desktop"><a href="https://www.craigslist.org/about/privacy.policy">privacy</a><sup class="neu">new</sup></li>
        <li class="desktop"><a href="https://forums.craigslist.org/?forumID=8">feedback</a></li>
        <li><a href="https://www.craigslist.org/about/terms.of.use">terms</a></li>
        <li><a href="https://www.craigslist.org/about/">about</a></li>
        <li class="fsel desktop linklike" data-mode="mobile">mobile</li>
        <li class="fsel mobile linklike" data-mode="regular">desktop</li>
    </ul>
</footer>
    </section>

<template id="gallerycarousel">
    <div class="slider-info"></div><div class="slider-back arrow">&lt;</div><div class="slider-forward arrow">&gt;</div>
</template>

<script type="text/template" id="clustertemplate">
    <li class="posting {visited}" data-pid="{PostingID}">
        <img src="{ImageThumb}">
        <div class="housing_bubble_banner">
            <span class="{hasPrice}price">{currencySymbol}{price}</span>
            <span class="bedrooms">{BedroomsContent}</span>
            <span class="postingtitle"><a>{PostingTitle}</a></span>
            <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                <span class="banish">
                    <span class="icon icon-trash" role="button"></span>
                    <span class="screen-reader-text">hide this posting</span>
                </span>
                <span class="unbanish">
                    <span class="icon icon-trash red" role="button"></span>
                    unhide
                </span>
            </span>
        </div>
    </li>
</script>
<script type="text/template" id="postingtemplate">
    <div class="viewcontainer pics loading">
        <div class="backtolist">
            &laquo; back to posting list
        </div>
        <div class="title">
            <span class="icon icon-star" data-pid="{PostingID}" role="button">
                <span class="screen-reader-text">favorite this post</span>
            </span>
            <span class="postingtitle">
                <a href="{PostingURL}" target="_blank">{PostingTitle}</a>
            </span>
            <div>
                <span class="{hasPrice}price">{currencySymbol}{price}</span>
                <span class="bedrooms">{BedroomsContent}</span>
                <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                    <span class="banish">
                        <span class="icon icon-trash" role="button"></span>
                        <span class="screen-reader-text">hide this posting</span>
                    </span>
                    <span class="unbanish">
                        <span class="icon icon-trash red" role="button"></span>
                        <span class="screen-reader-text">unhide</span>
                        unhide
                    </span>
                </span>
            </div>
        </div>
        <hr style="clear:both">
        <div class="picscontainer gallery">
            <span class="slider-back arrow">&lt;</span><span class="slider-info"></span><span class="slider-forward arrow">&gt;</span>
            <div class="swipe">
                <div class="swipe-wrap">
                    <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                </div>
            </div>
        </div>
        <div class="infocontainer"></div>
        <hr style="clear:both">
        <div class="timecontainer"></div>
        <a class="viewpostinglink" href="{PostingURL}" target="_blank">view posting</a>
        <div class="contenttoggle">
            <a class="moreinfo">more info</a>
            <a class="showpics">show images</a>
        </div>
    </div>
</script>
<script type="text/template" id="popuptemplate">
    <div id="mapbubble" class="posting">
        <ul id="clusterbubble"></ul>
        <div id="postbubble"></div>
    </div>
</script>


</body>
</html>

  recorded_at: Fri, 12 Nov 2021 03:15:33 GMT
recorded_with: VCR 6.0.0
