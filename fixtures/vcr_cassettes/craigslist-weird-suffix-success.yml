---
http_interactions:
- request:
    method: get
    uri: https://ipinfo.io/ip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - ipinfo.io
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Cloud-Trace-Context:
      - 13c23f434ec908a258a1343cf075a736/11360403201512164026
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '13'
      Date:
      - Tue, 23 Nov 2021 04:11:37 GMT
      X-Envoy-Upstream-Service-Time:
      - '1'
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
    body:
      encoding: UTF-8
      string: 185.220.101.9
  recorded_at: Tue, 23 Nov 2021 04:11:37 GMT
- request:
    method: get
    uri: https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - miami.craigslist.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Last-Modified:
      - Tue, 23 Nov 2021 04:11:39 GMT
      Cache-Control:
      - max-age=900, public
      Date:
      - Tue, 23 Nov 2021 04:11:39 GMT
      Vary:
      - Accept-Encoding
      Content-Length:
      - '30577'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - cl_b=4|0f6b89ddcae8fb1affa4c3b4ada5791a2541de65|1637640699Z7guA;path=/;domain=.craigslist.org;secure;expires=Fri,
        01-Jan-2038 00:00:00 GMT
      Server:
      - Apache
      Expires:
      - Tue, 23 Nov 2021 04:26:39 GMT
      Strict-Transport-Security:
      - max-age=63072000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html>
<head>
    
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta property="og:site_name" content="craigslist">
	<meta name="twitter:card" content="preview">
	<meta property="og:title" content="miami / dade apartments / housing for rent - craigslist">
	<meta name="description" content="miami / dade apartments / housing for rent - craigslist">
	<meta property="og:description" content="miami / dade apartments / housing for rent - craigslist">
	<meta property="og:url" content="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa">
	<title>miami / dade apartments / housing for rent - craigslist</title>
	<link rel="canonical" href="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa">
	<link rel="next" href="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa?s=120&amp;hasPic=1">



<script type="application/ld+json" id="ld_breadcrumb_data" >
    {"@context":"https://schema.org","itemListElement":[{"item":{"name":"miami.craigslist.org","@id":"https://miami.craigslist.org"},"position":1,"@type":"ListItem"},{"item":{"name":"miami / dade","@id":"https://miami.craigslist.org/mdc/"},"position":2,"@type":"ListItem"},{"item":{"name":"housing","@id":"https://miami.craigslist.org/d/housing/search/mdc/hhh"},"position":3,"@type":"ListItem"},{"item":{"name":"apartments / housing for rent","@id":"https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa"},"position":4,"@type":"ListItem"}],"@type":"BreadcrumbList"}
</script>

    <style type="text/css">
        body {
            font-family: sans-serif;
        }

        #no-js,
        #unsupported-browser {
            position: fixed;
            z-index: 10000;

            top: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        #no-js p,
        #unsupported-browser p {
            color: black;
            background-color: #FA8787;
            opacity: 0.8;
            text-align: center;
            margin: 0;
            border: 0;
            padding: 1em;
        }

        #unsupported-browser {
            display: none;
        }

        .unsupported-browser #unsupported-browser {
            display: block;
        }

        .no-js header,
        .no-js form,
        .no-js .tryapp,
        .no-js .tsb,
        .unsupported-browser header,
        .unsupported-browser form,
        .unsupported-browser .tryapp,
        .unsupported-browser .tsb {
            display: none;
        }

        #curtain {
            display: none;
            position: fixed;
            z-index: 9000;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        .show-curtain #curtain {
            display: block;
        }

        #curtain .cover,
        #curtain .content {
            position: absolute;
            display: block;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
        }

        #curtain .cover {
            z-index: 1;
            background-color: white;
        }

        .show-curtain #curtain .cover {
            opacity: 0.5;
        }

        .show-curtain.clear #curtain .cover {
            opacity: 0;
        }

        .show-curtain.opaque #curtain .cover {
            opacity: 1;
        }

        #curtain .content {
            z-index: 2;
            background: transparent;
            color: #00E;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(359deg);
            }
        }

        .pacify #curtain .icom- {
            font-size: 3em;
            animation: rotate 2s infinite linear;
        }

        .pacify #curtain .icom-:after {
            content: "\eb23";
        }

        #curtain .text {
            display: none;
            font-size: 2em;
        }

        .loading #curtain .text.loading,
        .reading #curtain .text.reading,
        .writing #curtain .text.writing,
        .saving #curtain .text.saving,
        .searching #curtain .text.searching,
        .unrecoverable #curtain .text.unrecoverable,
        .message #curtain .text.message {
            display: block;
        }
    </style>


    
     
     <script src="https://www.craigslist.org/static/www/030feed3cf43bf94976c889a1a0ceb5cdd7ebafa.js"></script>
     <script>
         window.cl.init(
             'https://www.craigslist.org/static/www/',
             '',
             'www',
             'browsePostings',
             {
areaCountry: "US",
areaID: "20",
areaRegion: "FL",
catAbb: "apa",
countOfTotalText: "image {count} of {total}",
currencySymbol: "&#x0024;",
defaultLocale: "en_US",
defaultView: "grid",
expiredFavIDs: null,
imageConfig: {"1":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"4":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"0":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450"]},"3":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"2":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]}},
lessInfoText: "less info",
locString: "",
maptileBaseUrl: "//map{s}.craigslist.org/t09/{z}/{x}/{y}.png",
maxResults: 3000,
noImageText: "no image",
pID: null,
postalLat: null,
postalLon: null,
purveyorCategories: null,
searchDistance: null,
sectionAbb: "hhh",
sectionBase: "hhh",
showInfoText: "show info",
showMapTabs: 1,
showingBanished: 0,
showingFavorites: 0,
starHint: "save this post in your favorites list",
subarea: "mdc",
zoomToPosting: null
},
             0
         );
     </script>
     
</head>
<body class="no-js show-curtain opaque search has-map" >
    
    <iframe id="cl-local-storage" src="https://www.craigslist.org/static/www/localStorage-092e9f9e2f09450529e744902aa7cdb3a5cc868d.html" style="display:none;"></iframe>
    

    <div id="curtain">
        <div class="cover"></div>
        <div class="content">
            <div class="icom-"></div>
            <div class="text loading">loading</div>
            <div class="text reading">reading</div>
            <div class="text writing">writing</div>
            <div class="text saving">saving</div>
            <div class="text searching">searching</div>
            <div class="text unrecoverable">
                There was an error loading the page; please try to
                <a id="cl-unrecoverable-hard-refresh" href="#" onclick="location.reload(true);">refresh the page.</a>
            </div>
            <div class="text message"></div>
        </div>
    </div>
    <noscript id="no-js"><div>
        <p>We've detected that JavaScript is not enabled in your browser.</p>
        <p>You must enable JavaScript to use craigslist.</p>
    </div></noscript>
    <div id="unsupported-browser">
        <p>We've detected you are using a browser that is missing critical features.</p>
        <p>Please visit craigslist from a modern browser.</p>
    </div>

    <section class="page-container" id="page-top" data-areaid="20">
        <div class="bglogo"></div>
        <div class="tryapp">
    try the craigslist app &raquo;
    <a class="appstorebtn"
    href="https://play.google.com/store/apps/details?id=org.craigslist.CraigslistMobile">
        Android
    </a>
    <a class="appstorebtn"
    href="https://apps.apple.com/us/app/craigslist/id1336642410">
        iOS
    </a>
</div>
<header class="global-header wide">
   <a class="header-logo" name="logoLink" href="https://miami.craigslist.org/mdc/">CL</a>

    <nav class="breadcrumbs-container">
<form id="breadcrumbform" class="breadcrumbs-form" method="get" action="/search/mdc/apa" data-action="/search/###/apa">
    <input type="hidden" name="hasPic" value="1">

    <ul class="breadcrumbs ">
        <li class="crumb area">
            
            <span class="no-js">
                <a href="/">south florida</a>
            </span>
                <select name="areaAbb" id="areaAbb" class="js-only">
                    <option value="miami">south florida</option>
                        <option value="keys">florida keys</option>
                        <option value="fortmyers">fort myers</option>
                        <option value="cfl">heartland FL</option>
                        <option value="lakeland">lakeland</option>
                        <option value="orlando">orlando</option>
                        <option value="sarasota">sarasota</option>
                        <option value="spacecoast">space coast</option>
                        <option value="tampa">tampa bay</option>
                        <option value="treasure">treasure coast</option>
                </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb subarea">
            <select id="subArea" name="subArea">
                <option value="">all south florida</option>
                <option value="brw">broward county</option>
                <option value="mdc" selected>miami / dade</option>
                <option value="pbc">palm beach co</option>
            </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb section">
                    <select name="catAbb" id="catAbb">
                        <option value="ccc">community</option>
                        <option value="eee">events</option>
                        <option value="sss">for sale</option>
                        <option value="ggg">gigs</option>
                        <option value="hhh" selected>housing</option>
                        <option value="jjj">jobs</option>
                        <option value="rrr">resumes</option>
                        <option value="bbb">services</option>
                    </select>
                <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb category">
            <select id="subcatAbb" class="js-only">
                <option value="hhh">all</option>
                    <option value="apa" selected>apartments / housing for rent</option>
                    <option value="swp">housing swap</option>
                    <option value="off">office &amp; commercial</option>
                    <option value="prk">parking &amp; storage</option>
                    <option value="reb">real estate - by broker</option>
                    <option value="reo">real estate - by owner</option>
                    <option value="roo">rooms &amp; shares</option>
                    <option value="sub">sublets &amp; temporary</option>
                    <option value="vac">vacation rentals</option>
                    <option value="hou">wanted: apts</option>
                    <option value="rew">wanted: real estate</option>
                    <option value="sha">wanted: room/share</option>
                    <option value="sbw">wanted: sublet/temp</option>
            </select><span class="no-js">apartments / housing for rent</span>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb no-js">
            <input type="submit" value="go">
        </li>
    </ul>
</form>
    </nav>

<div class="userlinks">
    <ul class="user-actions">
        <li class="user post">
            <a href="https://post.craigslist.org/c/mia">post</a>
        </li>
        <li class="user account">
            <a href="https://accounts.craigslist.org/login/home">account</a>
        </li>
    </ul>
    <ul class="user-favs-discards">
        <li class="user">
            <div class="favorites">
                <a href="#" class="favlink"><span class="icon icon-star fav" aria-hidden="true"></span><span class="fav-number">0</span><span class="fav-label"> favorites</span></a>
            </div>
        </li>
        <li class="user discards">
            <div class="to-banish-page">
                <a href="#" class="to-banish-page-link">
                    <span class="icon icon-trash red" aria-hidden="true"></span>
                    <span class="banished_count">0</span>
                    <span class="discards-label"> hidden</span>
                </a>
            </div>
        </li>
    </ul>
</div>

</header>
<header class="global-header narrow">
   <a class="header-logo" href="https://miami.craigslist.org/mdc/">CL</a>
    <nav class="breadcrumbs-container">

    <h1 class="breadcrumbs">

miami / dade            &gt;

apartments / housing for rent    </h1>


    </nav>
    <span class="linklike show-wide-header">...</span>
</header>


        <form id="searchform" class="search-form" action="/d/apartments-housing-for-rent/search/mdc/apa" >
            <div class="querybox">
                <div class="form-tab js-only"><span class="search-open" title="hide search">&laquo;</span><span class="search-closed" title="show search">&raquo;</span></div>
                <input type="text" placeholder="search apartments / housing for rent" name="query"
                    id="query" value="" autocorrect="off" class="flatinput ui-autocomplete-input"
                    autocapitalize="off" autocomplete="off" data-autocomplete="search">

                <button type="submit" class="searchbtn">
                    <span class="icon icon-search" aria-hidden="true"></span>
                    <span class="screen-reader-text">press to search craigslist</span>
                </button>
                    <div class="savealert">
                        <a class="saveme" data-action="save"  href="https://accounts.craigslist.org/savesearch/save?URL=https%3A%2F%2Fmiami%2Ecraigslist%2Eorg%2Fd%2Fapartments%2Dhousing%2Dfor%2Drent%2Fsearch%2Fmdc%2Fapa%3FhasPic%3D1"  title="save this search" >save search</a>
                    </div>
            </div>

            <div class="search-options-container">
    <h1 class="cattitle">
            <a href="/d/apartments-housing-for-rent/search/mdc/apa" title="clear all search parameters" class="reset">apartments / housing for rent</a>
    </h1>
    <div class="search-options-header linklike">
        <div class="icon icon-toggle-gear" aria-hidden="true"></div>
        options<span class="options-close">close</span>
    </div>
    <input id="excats" type="hidden" name="excats">
    <div class="search-options">
        <div class="searchgroup categories">
        </div>
        <input type="hidden" name="userid" value="" />





        <div class="searchgroup" id="basic-bools">
            <ul>
    <li>
       <label class="srchType">
           <input type="checkbox" name="srchType" class="" value="T" >
           search titles only
       </label>
    </li>
    <li>
       <label class="hasPic">
           <input type="checkbox" name="hasPic" class="autosubmit" value="1"  checked>
           has image
       </label>
    </li>
    <li>
       <label class="postedToday">
           <input type="checkbox" name="postedToday" class="autosubmit" value="1" >
           posted today
       </label>
    </li>
    <li>
       <label class="bundleDuplicates">
           <input type="checkbox" name="bundleDuplicates" class="autosubmit" value="1" >
           bundle duplicates
       </label>
    </li>
</ul>

                <ul class="js-only nearbyAreas ">

                </ul>
        </div>

            <div class="searchgroup">
                <span class="searchfieldlabel">miles from location</span>
                <input size="5" maxlength="5" inputmode="numeric"
                    class="flatinput searchInput search_distance" placeholder="miles"
                    name="search_distance"
                    value=""
                />
                <input type="text" class="flatinput searchInput postal" placeholder="from zip"
                    size="7" name="postal" value="">
                <span class="icon icon-locate"></span>
            </div>


    <div class="searchgroup minmax price" id="price">
<span class="searchfieldlabel">price</span>
    <input type="tel" name="min_price" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="max_price" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>


  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bedrooms</span>
    <select name="min_bedrooms" class="autosubmit">
      <option value="">min</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bedrooms" class="autosubmit">
      <option value="">max</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bathrooms</span>
    <select name="min_bathrooms" class="autosubmit">
      <option value="">min</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bathrooms" class="autosubmit">
      <option value="">max</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

    <div class="searchgroup minmax " id="">
<span class="searchfieldlabel">ft<sup>2</sup></span>
    <input type="tel" name="minSqft" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="maxSqft" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>

<div class="searchgroup">
  <span class="searchfieldlabel">availability</span>
  <select class="autosubmit" name="availabilityMode">
        <option value="0">all dates</option>
        <option value="1">within 30 days</option>
        <option value="2">beyond 30 days</option>
 </select>
</div>

<div class="searchgroup search-group-checkbox">
<label class="pets_cat">
        <input type="checkbox" name="pets_cat" value="1" class="autosubmit" />
    cats ok
</label><br>
<label class="pets_dog">
        <input type="checkbox" name="pets_dog" value="1" class="autosubmit" />
    dogs ok
</label><br>
<label class="is_furnished">
        <input type="checkbox" name="is_furnished" value="1" class="autosubmit" />
    furnished
</label><br>
<label class="no_smoking">
        <input type="checkbox" name="no_smoking" value="1" class="autosubmit" />
    no smoking
</label><br>
<label class="wheelchaccess">
        <input type="checkbox" name="wheelchaccess" value="1" class="autosubmit" />
    wheelchair access
</label><br>
<label class="airconditioning">
        <input type="checkbox" name="airconditioning" value="1" class="autosubmit" />
    air conditioning
</label><br>
<label class="ev_charging">
        <input type="checkbox" name="ev_charging" value="1" class="autosubmit" />
    EV charging
</label><br>
<label class="application_fee">
        <input type="checkbox" name="application_fee" value="1" class="autosubmit" />
    no application fee
</label><br>
<label class="broker_fee">
        <input type="checkbox" name="broker_fee" value="1" class="autosubmit" />
    no broker fee
</label><br>
</div>

<div class="searchgroup search-group-multi_checkbox">
<div class="search-attribute hide-list" data-attr="housing_type">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> housing type
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="housing_type_1" name="housing_type" class="multi_checkbox" value="1" type="checkbox"
                     />
                    apartment
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_2" name="housing_type" class="multi_checkbox" value="2" type="checkbox"
                     />
                    condo
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_3" name="housing_type" class="multi_checkbox" value="3" type="checkbox"
                     />
                    cottage/cabin
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_4" name="housing_type" class="multi_checkbox" value="4" type="checkbox"
                     />
                    duplex
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_5" name="housing_type" class="multi_checkbox" value="5" type="checkbox"
                     />
                    flat
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_6" name="housing_type" class="multi_checkbox" value="6" type="checkbox"
                     />
                    house
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_7" name="housing_type" class="multi_checkbox" value="7" type="checkbox"
                     />
                    in-law
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_8" name="housing_type" class="multi_checkbox" value="8" type="checkbox"
                     />
                    loft
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_9" name="housing_type" class="multi_checkbox" value="9" type="checkbox"
                     />
                    townhouse
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_10" name="housing_type" class="multi_checkbox" value="10" type="checkbox"
                     />
                    manufactured
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_11" name="housing_type" class="multi_checkbox" value="11" type="checkbox"
                     />
                    assisted living
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_12" name="housing_type" class="multi_checkbox" value="12" type="checkbox"
                     />
                    land
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="laundry">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> laundry
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="laundry_1" name="laundry" class="multi_checkbox" value="1" type="checkbox"
                     />
                    w/d in unit
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_4" name="laundry" class="multi_checkbox" value="4" type="checkbox"
                     />
                    w/d hookups
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_2" name="laundry" class="multi_checkbox" value="2" type="checkbox"
                     />
                    laundry in bldg
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_3" name="laundry" class="multi_checkbox" value="3" type="checkbox"
                     />
                    laundry on site
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_5" name="laundry" class="multi_checkbox" value="5" type="checkbox"
                     />
                    no laundry on site
                </label>
            </li>



    </ul>
</div>
<div class="search-attribute hide-list" data-attr="parking">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> parking
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="parking_1" name="parking" class="multi_checkbox" value="1" type="checkbox"
                     />
                    carport
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_2" name="parking" class="multi_checkbox" value="2" type="checkbox"
                     />
                    attached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_3" name="parking" class="multi_checkbox" value="3" type="checkbox"
                     />
                    detached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_4" name="parking" class="multi_checkbox" value="4" type="checkbox"
                     />
                    off-street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_5" name="parking" class="multi_checkbox" value="5" type="checkbox"
                     />
                    street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_6" name="parking" class="multi_checkbox" value="6" type="checkbox"
                     />
                    valet parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_7" name="parking" class="multi_checkbox" value="7" type="checkbox"
                     />
                    no parking
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="rent_period">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> rent period
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="rent_period_1" name="rent_period" class="multi_checkbox" value="1" type="checkbox"
                     />
                    daily
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_2" name="rent_period" class="multi_checkbox" value="2" type="checkbox"
                     />
                    weekly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_3" name="rent_period" class="multi_checkbox" value="3" type="checkbox"
                     />
                    monthly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_4" name="rent_period" class="multi_checkbox" value="4" type="checkbox"
                     />
                    yearly
                </label>
            </li>



    </ul>
</div>
</div>


            <div class="searchgroup">
                    <div class="searchfieldlabel">open house date</div>
                <select class="autosubmit" id="sale_date" name="sale_date">
                    <option>all dates</option>
                        <option value="2021-11-22">nov 22 - today</option>
                        <option value="2021-11-23">nov 23 - tomorrow</option>
                        <option value="2021-11-24">nov 24 - wednesday</option>
                        <option value="2021-11-25">nov 25 - thursday</option>
                        <option value="2021-11-26">nov 26 - friday</option>
                        <option value="2021-11-27">nov 27 - saturday</option>
                        <option value="2021-11-28">nov 28 - sunday</option>
                        <option value="2021-11-29">nov 29 - monday</option>
                        <option value="2021-11-30">nov 30 - tuesday</option>
                        <option value="2021-12-01">dec 1 - wednesday</option>
                        <option value="2021-12-02">dec 2 - thursday</option>
                        <option value="2021-12-03">dec 3 - friday</option>
                        <option value="2021-12-04">dec 4 - saturday</option>
                        <option value="2021-12-05">dec 5 - sunday</option>
                        <option value="2021-12-06">dec 6 - monday</option>
                        <option value="2021-12-07">dec 7 - tuesday</option>
                        <option value="2021-12-08">dec 8 - wednesday</option>
                        <option value="2021-12-09">dec 9 - thursday</option>
                        <option value="2021-12-10">dec 10 - friday</option>
                        <option value="2021-12-11">dec 11 - saturday</option>
                        <option value="2021-12-12">dec 12 - sunday</option>
                        <option value="2021-12-13">dec 13 - monday</option>
                        <option value="2021-12-14">dec 14 - tuesday</option>
                        <option value="2021-12-15">dec 15 - wednesday</option>
                        <option value="2021-12-16">dec 16 - thursday</option>
                        <option value="2021-12-17">dec 17 - friday</option>
                        <option value="2021-12-18">dec 18 - saturday</option>
                        <option value="2021-12-19">dec 19 - sunday</option>
                </select>
            </div>
        <div class="searchgroup resetsearch">
            <a href="/d/apartments-housing-for-rent/search/mdc/apa" title="clear all search parameters" class="reset linklike">reset</a>
            <button type="submit" class="searchlink linklike">update search</button>
        </div>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>
    </div>
</div>


            <div class="search-legend">
<div class="search-view js-only">
    <div class="dropdown dropdown-icons dropdown-arrows dropdown-view" role="toolbar" aria-label="view options" aria-expanded="false">
        <ul class="dropdown-list">
            <li class="dropdown-item mode sel">
                <button title="show results in a list" data-selection="list" id="listview">
                    <span class="view-list icon"></span>list
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results in a list with thumbnail pictures"  data-selection="pic"  id="picview" >
                    <span class="view-thumb icon"></span>thumb
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results side-by-side with larger pictures" data-selection="grid" id="gridview">
                    <span class="view-gallery icon"></span>gallery
                </button>
                <span class="toggle-arrow"></span>
            </li>
                <li class="dropdown-item mode">
                    <button title="show results on a map"  data-selection="map"  id="mapview" >
                        <span class="view-map icon"></span>map
                    </button>
                    <span class="toggle-arrow"></span>
                </li>
        </ul>
    </div>
</div>
                <div class="search-sort" >
    <div class="dropdown dropdown-sort dropdown-arrows" data-default-sort="date" role="toolbar" aria-label="sort options" aria-expanded="false">
        <ul class="dropdown-list">

            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="upcoming" title="show upcoming open houses" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=upcoming&amp;hasPic=1">upcoming <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode sel" aria-selected="true">
                <a data-selection="date" title="show newest matches first" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=date&amp;hasPic=1">newest <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="priceasc" title="sort by price, lowest to highest" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=priceasc&amp;hasPic=1">price ↑ <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="pricedsc" title="sort by price, highest to lowest" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=pricedsc&amp;hasPic=1">price ↓ <span class="toggle-arrow"></span></a>
            </li>

        </ul>
    </div>
</div>

                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">3000</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">3000</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/mdc/apa?s=120&amp;hasPic=1" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

                
            </div>
            <div class="content" id="sortable-results" >
                <section class="favlistsection">
                    <section class="favlistinfo">
                    </section>
                    <section class="banishlistinfo">
                    </section>
                </section>


                    


<div class="open-map-view-button">
    <span>see in map view</span>
</div>
<div id="mapcontainer" data-arealat="25.773899" data-arealon="-80.193901">
    <div id="noresult-overlay"></div>
    <div id="noresult-text">
        <span class="message">No mappable items found</span>
    </div>
    <div id="map" class="loading">
        <div class="close-full-screen-map-mode-button">close fullscreen</div>
    </div>
</div>

                <ul class="rows" id="search-results">
                             <li class="result-row" data-pid="7411617495">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-spacious-waterfront-bedroom/7411617495.html" class="result-image gallery" data-ids="3:01010_hHQjhrOaWvYz_0hq09O,3:00U0U_swzG5TTVeTz_0pO0ev,3:00y0y_cs6YBBJAvvDz_0ew0jm,3:01111_lFfUDlpCcR5z_0ew0jm,3:00w0w_1OKaP6zbdcJz_0ew0jm">
                <span class="result-price">$1,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 23:05" title="Mon 22 Nov 11:05:42 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-spacious-waterfront-bedroom/7411617495.html" data-id="7411617495" class="result-title hdrlnk" id="postid_7411617495" >spacious WATERFRONT 1 Bedroom/1.5 Bathrooms over looks the canal.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,350</span>

                <span class="housing">
                    1br -
                    841ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (MIAMI BEACH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405528455" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7405528455.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 23:04" title="Mon 22 Nov 11:04:07 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7405528455.html" data-id="7405528455" class="result-title hdrlnk" id="postid_7405528455" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,650</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411614009">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-bathroom-unit-with-tiles/7411614009.html" class="result-image gallery" data-ids="3:00B0B_et4NLLrv6uSz_0pO0jm,3:00K0K_8reji0isYUrz_0pO0jm,3:00w0w_aKy0gdp7SmCz_0pO0jm,3:00V0V_aYyZUsjWa1Rz_0pO0jm,3:00r0r_lahpiHHsS86z_0ew0jm">
                <span class="result-price">$1,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:59" title="Mon 22 Nov 10:59:04 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-bathroom-unit-with-tiles/7411614009.html" data-id="7411614009" class="result-title hdrlnk" id="postid_7411614009" >1 Bedroom / 1 bathroom unit with tiles throughout and stainless steel</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,350</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (NORTH MIAMI BEACH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406453275" data-repost-of="7400506086">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-move-with-only-1000-security/7406453275.html" class="result-image gallery" data-ids="3:00202_jIkCrf1vetvz_0lM0ex,3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:01313_ghZY78PdjJ0z_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00909_jUECqngSB0cz_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$4,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:59" title="Mon 22 Nov 10:59:02 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-move-with-only-1000-security/7406453275.html" data-id="7406453275" class="result-title hdrlnk" id="postid_7406453275" >*** MOVE WITH ONLY $1000 SECURITY DEPOSIT *** GREAT LOCATION</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,900</span>

                <span class="housing">
                    3br -
                    1315ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409339131" data-repost-of="7004870593">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7409339131.html" class="result-image gallery" data-ids="1:00C0C_2YeQkRpps7h,1:00Q0Q_kTv7hYhJFo4,1:01515_bMUU9cCRaeX,1:00G0G_fzRJ0IDdhFd,1:00B0B_lOVAiHuJG2W,1:01010_17C6h4FUGAZ,1:00404_95JVHThnKrm,1:00H0H_g6QdO2V8L5k,1:00Y0Y_2x3ledn5L2F,1:00S0S_3zthybUxeC3,1:00U0U_6PBpO09gW09,1:01717_aCKSxXVAgWD,1:00m0m_aFxs8IagJJu,1:00B0B_33i1SM2ZWsQ,1:00303_lKGormIg9ZW,1:00c0c_ljgojQ14ulM,1:00q0q_g41JWJTKxEY,1:00Y0Y_cfBcfBb235u,1:00u0u_5LciAKLqOxT,1:00p0p_6JwisQIx0FF,1:00x0x_2c5rWYQdS3C,1:00n0n_i1b8Wt56Fkq,1:00j0j_bbontHxb6tY,1:00909_9JESoC8BabT">
                <span class="result-price">$2,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:58" title="Mon 22 Nov 10:58:19 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7409339131.html" data-id="7409339131" class="result-title hdrlnk" id="postid_7409339131" >GORGEOUS 1/1 WITH W/D, PARKING, POOL, GYM ETC..( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,500</span>

                <span class="housing">
                    1br -
                    720ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (MIDTOWN / WYNWOOD miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409340135" data-repost-of="6146139567">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-1-with-d-parking-pool-gym-etc/7409340135.html" class="result-image gallery" data-ids="1:00404_5swzzxB7ENJ,1:00000_6WFn2RJWwuz,1:00d0d_SJxYMCgVuD,1:00J0J_bVnRySK6zrH,1:00m0m_4CBI8QJtQJT,1:00k0k_kHBR9DwLiJL,1:00z0z_8khURr1lNZN,1:00v0v_pudsEELpbT,1:00M0M_kLUJNFRjMD7,1:00000_bn72QUHAFTt,1:00c0c_fy50He22qN1,1:00k0k_49kwMyoyqAH,1:00I0I_i0TuKWp5QRu,1:00S0S_38ix6PRQiBi,1:00404_bztrUN2cIe,1:00m0m_ej1UtQyD7vd,1:00I0I_huMf5HoXlG7,1:00j0j_5AdSF9t1wv1,1:01212_4pRaVMK0KgZ">
                <span class="result-price">$2,385</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:58" title="Mon 22 Nov 10:58:16 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-1-with-d-parking-pool-gym-etc/7409340135.html" data-id="7409340135" class="result-title hdrlnk" id="postid_7409340135" >GORGEOUS 1/1 WITH W/D, PARKING, POOL, GYM, ETC...( ONLY $700 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,385</span>

                <span class="housing">
                    1br -
                    834ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (AVENTURA miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409338985" data-repost-of="6184441099">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-studio-with-d-parking-pool-gym/7409338985.html" class="result-image gallery" data-ids="1:00E0E_6grcBH01jBX,1:01313_gyZX4gxXKeX,1:00000_e3n5Z6yK5VG,1:00E0E_92tKQ9WPMIm,1:00b0b_kYG2Ym59vIA,1:00V0V_6Roky8DgQua,1:00U0U_8Pckseq3xs2,1:00c0c_6YmROrBTryA,1:00808_efJaETgF4OO,1:01010_42y7vQilnA5,1:00f0f_ihtS0Jm2Nk3,1:01717_dWocjXh9PJY,1:00e0e_k6q9p7T02Lf,1:00n0n_cnBTPrbMwDS,1:00o0o_jH7dGgxO6vb,1:00202_eGUiCznypk3,1:00u0u_2aoUkGzQMtH,1:00E0E_9gruWIybHfV,1:00U0U_4PxVAPLeYwj">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:58" title="Mon 22 Nov 10:58:10 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-studio-with-d-parking-pool-gym/7409338985.html" data-id="7409338985" class="result-title hdrlnk" id="postid_7409338985" >GORGEOUS STUDIO WITH W/D , PARKING, POOL, GYM.. ( ONLY $600 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    594ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DORAL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409337116" data-repost-of="6615797015">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7409337116.html" class="result-image gallery" data-ids="1:00N0N_kHqycxtRvZ3,1:00g0g_bkSa8ZcZJ3i,1:00a0a_ePd8eaUyXVT,1:00c0c_3bcNCLjso0s,1:00j0j_coC978ww1ad,1:00X0X_32dSBmBygxn,1:00707_ikeZ5tc2FqC,1:00d0d_3jTGm0NODo9,1:00h0h_6hMZ2k2y6j9,1:00V0V_f6zO0gmRhOQ,1:00M0M_i4wFezmj3iK,1:00R0R_4hl7aJhoDFm,1:00R0R_7QGW35c0SJm,1:00r0r_1lhMqbyQJmT,1:00S0S_fbVPirCJI72,1:00p0p_hc4Lot3PBOq,1:00u0u_jc1Xi9bXrRs">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:58" title="Mon 22 Nov 10:58:07 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7409337116.html" data-id="7409337116" class="result-title hdrlnk" id="postid_7409337116" >GORGEOUS 2/2 WITH W/D, PARKING, POOL, GYM, ETC..( ONLY $1000 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    2br -
                    1100ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN / MIAMI RIVER miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409303328" data-repost-of="6184446832">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-with-d-parking-pool-gym-only/7409303328.html" class="result-image gallery" data-ids="1:00G0G_ap5cH1n57gt,1:01313_gyZX4gxXKeX,1:00b0b_kYG2Ym59vIA,1:00000_e3n5Z6yK5VG,1:00V0V_6Roky8DgQua,1:00U0U_8Pckseq3xs2,1:00c0c_6YmROrBTryA,1:00808_efJaETgF4OO,1:01010_42y7vQilnA5,1:00f0f_ihtS0Jm2Nk3,1:01717_dWocjXh9PJY,1:00e0e_k6q9p7T02Lf,1:00n0n_cnBTPrbMwDS,1:00808_da1HRdwCT5O,1:00o0o_jH7dGgxO6vb,1:00I0I_dHnlXBXUITb,1:00q0q_fgPQFUr2cZt,1:00c0c_5foS0YZ9UyL,1:00e0e_3C36g70hceH,1:00U0U_4PxVAPLeYwj,1:00V0V_9Q61UWZH5J7,1:00000_5bZ3hrqoD8v,1:00t0t_iAvrNXC94Ma,1:00V0V_jf2kAVrhSoo">
                <span class="result-price">$3,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:58" title="Mon 22 Nov 10:58:01 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-with-d-parking-pool-gym-only/7409303328.html" data-id="7409303328" class="result-title hdrlnk" id="postid_7409303328" >GORGEOUS 3/2 WITH W/D , PARKING, POOL, GYM.. ( ONLY $600 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,200</span>

                <span class="housing">
                    3br -
                    1500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DORAL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407360163" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7407360163.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:53" title="Mon 22 Nov 10:53:58 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7407360163.html" data-id="7407360163" class="result-title hdrlnk" id="postid_7407360163" >*** ONLY ONE MONTH DEPOSIT *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,250</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402320565" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-only-one-month-deposit-fast/7402320565.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:48" title="Mon 22 Nov 10:48:54 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-only-one-month-deposit-fast/7402320565.html" data-id="7402320565" class="result-title hdrlnk" id="postid_7402320565" >*** ONLY ONE MONTH DEPOSIT *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,250</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405527902" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-one-month-free/7405527902.html" class="result-image gallery" data-ids="3:00i0i_awzVTbesYa1z_0lM0gk,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev">
                <span class="result-price">$2,420</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:43" title="Mon 22 Nov 10:43:50 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-one-month-free/7405527902.html" data-id="7405527902" class="result-title hdrlnk" id="postid_7405527902" >BRAND NEW BUILDING *** ONE MONTH FREE *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,420</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406458697" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7406458697.html" class="result-image gallery" data-ids="3:00j0j_4cTJdRZl58yz_0CI0t2,3:00n0n_foIsXPWzIoEz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$3,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:38" title="Mon 22 Nov 10:38:45 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7406458697.html" data-id="7406458697" class="result-title hdrlnk" id="postid_7406458697" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,200</span>

                <span class="housing">
                    2br -
                    1040ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401899463" data-repost-of="7375869684">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-remodeled-1bed-15bath-condo/7401899463.html" class="result-image gallery" data-ids="3:01717_h22sxOgP1PUz_0x20oM,3:00J0J_7JNck8r7SZ6z_0x20oM,3:00k0k_9ollGIWPca3z_0x20oM,3:00S0S_16eITaot8sGz_0x20oM,3:00a0a_fgXwDWT61Rfz_0x20oM,3:00b0b_kuQHzuGLzjbz_0x20oM,3:00c0c_81jJCvN8GdDz_0x20oM,3:00e0e_5wdsrFesfPlz_0x20oM,3:00909_9QM87Ww82VPz_0lM0t2,3:00d0d_6j7sjegfq4Sz_0lM0t2,3:00v0v_g5ZTSOcgQXfz_0x20oM,3:01717_cQ7LTfUcG8qz_0lM0t2">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:36" title="Mon 22 Nov 10:36:02 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-remodeled-1bed-15bath-condo/7401899463.html" data-id="7401899463" class="result-title hdrlnk" id="postid_7401899463" >NEW REMODELED 1BED 1.5BATH CONDO  AVENTURA $1,800/MO 6+MO LEASE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    1br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Next to Aventura Mall miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407648019" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407648019.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:33" title="Mon 22 Nov 10:33:41 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407648019.html" data-id="7407648019" class="result-title hdrlnk" id="postid_7407648019" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407648183" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-only-one-month-deposit/7407648183.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:28" title="Mon 22 Nov 10:28:37 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-only-one-month-deposit/7407648183.html" data-id="7407648183" class="result-title hdrlnk" id="postid_7407648183" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410662011">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-immediate-move-in-1st-floor/7410662011.html" class="result-image gallery" data-ids="3:00U0U_eQyxGa2Ksqkz_0ad07m,3:00L0L_9Znh3NTYTCDz_0db09F,3:00l0l_5KuIclz5H6Vz_0g808U,3:01313_3FMbhzrAPhiz_0g80aL,3:00b0b_Lj3dKGv7uhz_0g80aL,3:00O0O_50BFQTob5avz_0g80af,3:00H0H_aVFSLHmLuUAz_0d709Q,3:00q0q_kvsu2xuFjR6z_0d709J">
                <span class="result-price">$1,814</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:27" title="Mon 22 Nov 10:27:09 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-immediate-move-in-1st-floor/7410662011.html" data-id="7410662011" class="result-title hdrlnk" id="postid_7410662011" >IMMEDIATE MOVE IN**  1st floor, ceiling fans, stackable w&amp;d</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,814</span>

                <span class="housing">
                    1br -
                    738ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407653848" data-repost-of="7400496735">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7407653848.html" class="result-image gallery" data-ids="3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00202_jIkCrf1vetvz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00808_iXudo37GRAZz_0lM0ey,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$2,450</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:23" title="Mon 22 Nov 10:23:33 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7407653848.html" data-id="7407653848" class="result-title hdrlnk" id="postid_7407653848" >*** GREAT LOCATION *** MOVE WITH ONLY $1000 SECURITY DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,450</span>

                <span class="housing">
                    1br -
                    683ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405918463">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-condos-with-star/7405918463.html" class="result-image gallery" data-ids="3:00k0k_4rl6x9iWluOz_0pO0jm,3:00O0O_9Osfmsz8bjsz_0pO0jm,3:00q0q_40n0pi7y37Xz_0pO0jm,3:00E0E_cQmddj332fzz_0pO0jm,3:00z0z_jD95LZviyL5z_0pO0jm,3:00x0x_huqIenFqUBMz_0pO0jm,3:00404_7e8J3sXvTWfz_0pO0jm,3:00D0D_kDb9rE5JOdYz_0pO0jm,3:00x0x_5aNlmH8rZ5Dz_0pO0jm,3:00b0b_7Sl6oDylUH7z_0pO0jm,3:01616_jgINsxH9fCpz_0pO0jm,3:00202_g94s77mVm2fz_0pO0jm,3:00S0S_k9LQgc7V3jQz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:22" title="Mon 22 Nov 10:22:02 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-condos-with-star/7405918463.html" data-id="7405918463" class="result-title hdrlnk" id="postid_7405918463" >Gorgeous 2 bedroom condos with 5 star amenities. Only $700 Sec Deposit</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,650</span>

                <span class="housing">
                    2br -
                    1194ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409018127">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-condos-with-star/7409018127.html" class="result-image gallery" data-ids="3:00F0F_8rI1D4lEv6Xz_0pO0jm,3:00202_2d4P9kqdsn5z_0pO0jm,3:00707_fapfriKdNPYz_0pO0jm,3:00u0u_7L6GT44YH2Dz_0pO0jm,3:01717_jWyMDKeUCeFz_0pO0jm,3:00p0p_a6tCCEDbsNez_0pO0jm,3:00q0q_cQUcgtkHgWZz_0pO0jm,3:00b0b_cruItRAEvr6z_0pO0jm,3:00H0H_dAsp09ydD1uz_0pO0jm,3:00l0l_gVcmsBVvxHKz_0pO0jm,3:00Z0Z_eJa7S5l20sVz_0pO0jm,3:00P0P_8mQqmFck19lz_0pO0jm,3:00R0R_73Fi7nRwgY7z_0pO0jm,3:00K0K_e4O6HgrGFg3z_0pO0jm,3:00S0S_ax7Og7cT1s4z_0pO0jm,3:00s0s_icfemzEs2kTz_0pO0jm,3:00a0a_flWnxfnfJcvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:21" title="Mon 22 Nov 10:21:52 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-condos-with-star/7409018127.html" data-id="7409018127" class="result-title hdrlnk" id="postid_7409018127" >Gorgeous 2 bedroom condos with 5 star amenities.***$700 Sec Deposit***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,150</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408008586">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-700new/7408008586.html" class="result-image gallery" data-ids="3:00u0u_2iV6Bq3LzGpz_0pO0jm,3:00v0v_iwwPSqAKF90z_0pO0jm,3:00c0c_8EMsuD4ofHgz_0pO0jm,3:00a0a_kmNdP0BEj1Bz_0pO0jm,3:00j0j_cRpEPMTm5tZz_0pO0jm,3:00Q0Q_4B9np06iPg5z_0pO0jm,3:00C0C_4jYmhwVaocxz_0pO0jm,3:00i0i_dIiOyB0XHZ9z_0pO0jm,3:01111_hUFLKyVSZP2z_0pO0jm,3:00707_bQBbSnGUKVz_0pO0jm,3:00V0V_cmEj5YfKiAUz_0pO0jm,3:00l0l_gtgJh9SoCXhz_0pO0jm,3:00j0j_dEx0CF5QOuEz_0pO0jm,3:00G0G_jmJ1f4Fbt8Mz_0pO0jm,3:00K0K_7Jw3rjAVHjaz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:21" title="Mon 22 Nov 10:21:46 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-700new/7408008586.html" data-id="7408008586" class="result-title hdrlnk" id="postid_7408008586" >**Security Deposit ONLY $700**NEW building w/ pool, 24hr gym, and more</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,200</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405988559">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7405988559.html" class="result-image gallery" data-ids="3:01313_dCNmg4AbAAPz_0hq0hq,3:00N0N_4LLXSi8C8cjz_0hq0hq,3:00b0b_SFLXbuggF0z_0hq0hq,3:00M0M_gTwtRNkXQtTz_0hq0hq">
                <span class="result-price">$2,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:21" title="Mon 22 Nov 10:21:37 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7405988559.html" data-id="7405988559" class="result-title hdrlnk" id="postid_7405988559" >Find Your 1-Bedroom Brickell Condo - Get Up-To-Date Listings For FREE!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,500</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409016932">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7409016932.html" class="result-image gallery" data-ids="3:00E0E_gTIqsOzPoL6z_0pO0jm,3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$2,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:21" title="Mon 22 Nov 10:21:07 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7409016932.html" data-id="7409016932" class="result-title hdrlnk" id="postid_7409016932" >Find Your 1-Bedroom Brickell Condo - Work with a Professional For FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408006657">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7408006657.html" class="result-image gallery" data-ids="3:00O0O_1xWKMiojdL5z_0pO0jm,3:01212_dDIITD9jMmUz_0pO0jm,3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:00000_574ewIRGaT3z_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:01313_gElHVjlReRaz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$2,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:20" title="Mon 22 Nov 10:20:39 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7408006657.html" data-id="7408006657" class="result-title hdrlnk" id="postid_7408006657" >Find Your 1-Bedroom Brickell Condo - Get Up-To-Date Listings For FREE!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,500</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409016074">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-brickell-condos-get-up-to/7409016074.html" class="result-image gallery" data-ids="3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:00000_574ewIRGaT3z_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$2,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:20" title="Mon 22 Nov 10:20:14 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-brickell-condos-get-up-to/7409016074.html" data-id="7409016074" class="result-title hdrlnk" id="postid_7409016074" >1-Bedroom Brickell Condos - Get Up-To-Date Listings! FREE Service</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405997705">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-condo-in/7405997705.html" class="result-image gallery" data-ids="3:00N0N_4LLXSi8C8cjz_0hq0hq,3:00b0b_SFLXbuggF0z_0hq0hq,3:01313_dCNmg4AbAAPz_0hq0hq,3:00M0M_gTwtRNkXQtTz_0hq0hq">
                <span class="result-price">$6,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:19" title="Mon 22 Nov 10:19:51 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-condo-in/7405997705.html" data-id="7405997705" class="result-title hdrlnk" id="postid_7405997705" >Find Your 3-Bedroom Condo in Brickell | FREE Apartment Locator Service</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,500</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409013827">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-condos-in-brickell-get/7409013827.html" class="result-image gallery" data-ids="3:01212_dDIITD9jMmUz_0pO0jm,3:00E0E_gTIqsOzPoL6z_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$6,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:19" title="Mon 22 Nov 10:19:06 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-condos-in-brickell-get/7409013827.html" data-id="7409013827" class="result-title hdrlnk" id="postid_7409013827" >3-Bedroom Condos in Brickell | Get Access To Condo Listings For FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,800</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408005137">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-condo-in/7408005137.html" class="result-image gallery" data-ids="3:01111_bf8Wa0PIEMOz_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:00101_dCl3uxuuCLxz_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00E0E_gTIqsOzPoL6z_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$6,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:18" title="Mon 22 Nov 10:18:40 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-condo-in/7408005137.html" data-id="7408005137" class="result-title hdrlnk" id="postid_7408005137" >Find Your 3-Bedroom Condo in Brickell | FREE Apartment Locator Service</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,500</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409012914">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-condo-in/7409012914.html" class="result-image gallery" data-ids="3:00O0O_1xWKMiojdL5z_0pO0jm,3:00101_dCl3uxuuCLxz_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$6,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:18" title="Mon 22 Nov 10:18:22 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-condo-in/7409012914.html" data-id="7409012914" class="result-title hdrlnk" id="postid_7409012914" >Find Your 3-Bedroom Condo in Brickell | FREE Apartment Locator Service</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,700</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407651549" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-one-month-free-brand/7407651549.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:18" title="Mon 22 Nov 10:18:20 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-one-month-free-brand/7407651549.html" data-id="7407651549" class="result-title hdrlnk" id="postid_7407651549" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409012312">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-700new/7409012312.html" class="result-image gallery" data-ids="3:00a0a_kmNdP0BEj1Bz_0pO0jm,3:00v0v_iwwPSqAKF90z_0pO0jm,3:00c0c_8EMsuD4ofHgz_0pO0jm,3:00j0j_cRpEPMTm5tZz_0pO0jm,3:00Q0Q_4B9np06iPg5z_0pO0jm,3:00C0C_4jYmhwVaocxz_0pO0jm,3:00i0i_dIiOyB0XHZ9z_0pO0jm,3:01111_hUFLKyVSZP2z_0pO0jm,3:00707_bQBbSnGUKVz_0pO0jm,3:00u0u_2iV6Bq3LzGpz_0pO0jm,3:00V0V_cmEj5YfKiAUz_0pO0jm,3:00l0l_gtgJh9SoCXhz_0pO0jm,3:01616_h5NfnhKzgUDz_0pO0jm,3:00j0j_dEx0CF5QOuEz_0pO0jm,3:00G0G_jmJ1f4Fbt8Mz_0pO0jm,3:00K0K_7Jw3rjAVHjaz_0pO0jm,3:00303_aHOgne1H2hBz_0pO0jm,3:00Z0Z_9Nde1ONcErkz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:18" title="Mon 22 Nov 10:18:15 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-700new/7409012312.html" data-id="7409012312" class="result-title hdrlnk" id="postid_7409012312" >**Security Deposit ONLY $700**NEW building w/ pool, 24hr gym, and more</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407718171">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-700new/7407718171.html" class="result-image gallery" data-ids="3:00v0v_iwwPSqAKF90z_0pO0jm,3:00a0a_kmNdP0BEj1Bz_0pO0jm,3:00c0c_8EMsuD4ofHgz_0pO0jm,3:00j0j_cRpEPMTm5tZz_0pO0jm,3:00Q0Q_4B9np06iPg5z_0pO0jm,3:00C0C_4jYmhwVaocxz_0pO0jm,3:00i0i_dIiOyB0XHZ9z_0pO0jm,3:01111_hUFLKyVSZP2z_0pO0jm,3:00707_bQBbSnGUKVz_0pO0jm,3:00u0u_2iV6Bq3LzGpz_0pO0jm,3:00l0l_gtgJh9SoCXhz_0pO0jm,3:01616_h5NfnhKzgUDz_0pO0jm,3:00j0j_dEx0CF5QOuEz_0pO0jm,3:00G0G_jmJ1f4Fbt8Mz_0pO0jm,3:00303_aHOgne1H2hBz_0pO0jm,3:00Z0Z_9Nde1ONcErkz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,985</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:18" title="Mon 22 Nov 10:18:09 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-700new/7407718171.html" data-id="7407718171" class="result-title hdrlnk" id="postid_7407718171" >**Security Deposit ONLY $700**NEW building w/ pool, 24hr gym, and more</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,985</span>

                <span class="housing">
                    2br -
                    1090ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407705921">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500quick/7407705921.html" class="result-image gallery" data-ids="3:00E0E_dSm5LxMiz6tz_0pO0jm,3:00W0W_189bTFHsEARz_0pO0jm,3:00i0i_L4YeG1FWJZz_0pO0jm,3:00u0u_s8NauVlV77z_0pO0jm,3:00o0o_3bFd1rhcVyLz_0pO0jm,3:00a0a_93vWCrQE8g7z_0pO0jm,3:00t0t_jY8bVAIBADCz_0pO0jm,3:00303_5vlRFaj1rilz_0pO0jm,3:00101_hx4u8ovr8Fxz_0pO0jm,3:01010_1ebgKyg7eXfz_0pO0jm,3:00E0E_cX648ralHTBz_0pO0jm,3:00V0V_gBpkO68F6pYz_0pO0jm">
                <span class="result-price">$3,075</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:18" title="Mon 22 Nov 10:18:01 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500quick/7407705921.html" data-id="7407705921" class="result-title hdrlnk" id="postid_7407705921" >**Security Deposit ONLY $500**Quick Approval.NEW Building w/ Amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,075</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409011249">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500new/7409011249.html" class="result-image gallery" data-ids="3:00W0W_189bTFHsEARz_0pO0jm,3:00E0E_dSm5LxMiz6tz_0pO0jm,3:00i0i_L4YeG1FWJZz_0pO0jm,3:00u0u_s8NauVlV77z_0pO0jm,3:00o0o_3bFd1rhcVyLz_0pO0jm,3:00a0a_93vWCrQE8g7z_0pO0jm,3:00t0t_jY8bVAIBADCz_0pO0jm,3:00303_5vlRFaj1rilz_0pO0jm,3:01515_4b0wMpnPP34z_0pO0jm,3:00A0A_551LcBlDksRz_0pO0jm,3:00e0e_ioMZnBuYZ1Az_0pO0jm,3:00505_9cGeTFjyOs5z_0pO0jm,3:00s0s_wYLXqiKhX8z_0pO0jm,3:00B0B_dT1iuyzyPYBz_0pO0jm,3:00I0I_knddRRb4In4z_0pO0jm,3:00m0m_jqixP9HagPTz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:17" title="Mon 22 Nov 10:17:51 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500new/7409011249.html" data-id="7409011249" class="result-title hdrlnk" id="postid_7409011249" >**Security Deposit ONLY $500**NEW Building w/ Pool, Gym, Jacuzzi</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,100</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407700677">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500quick/7407700677.html" class="result-image gallery" data-ids="3:00000_hoJYj7Endqqz_0pO0jm,3:00k0k_lkhYx0EuKDdz_0pO0jm,3:00Q0Q_jVkBZgMHeNUz_0pO0jm,3:00606_gMuGkLfXPeQz_0pO0jm,3:00t0t_lmqekkoQcRZz_0pO0jm,3:01515_3EUS5S9ZIkwz_0pO0jm,3:00v0v_bBE8cZ68Bl5z_0pO0jm,3:00t0t_8b6IMJPSkWwz_0pO0jm,3:00707_k1NninpSLVAz_0pO0jm,3:00t0t_5TIOfUr2nC9z_0pO0jm,3:00Z0Z_9vfuc6l3C9Xz_0pO0jm,3:00404_osVWWnjmpuz_0pO0jm,3:01313_gElHVjlReRaz_0pO0jm,3:00a0a_iq5JFzc64uoz_0pO0jm,3:01212_gEfdBp3NE1Fz_0pO0jm,3:00N0N_je3HqpZmjxCz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,631</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:17" title="Mon 22 Nov 10:17:40 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500quick/7407700677.html" data-id="7407700677" class="result-title hdrlnk" id="postid_7407700677" >**Security Deposit ONLY $500**Quick Approval.NEW Building w/ Amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,631</span>

                <span class="housing">
                    2br -
                    881ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409009974">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500quick/7409009974.html" class="result-image gallery" data-ids="3:00k0k_lkhYx0EuKDdz_0pO0jm,3:00000_hoJYj7Endqqz_0pO0jm,3:00606_gMuGkLfXPeQz_0pO0jm,3:00t0t_lmqekkoQcRZz_0pO0jm,3:00Q0Q_jVkBZgMHeNUz_0pO0jm,3:01515_3EUS5S9ZIkwz_0pO0jm,3:00v0v_bBE8cZ68Bl5z_0pO0jm,3:00707_k1NninpSLVAz_0pO0jm,3:00t0t_8b6IMJPSkWwz_0pO0jm,3:00t0t_5TIOfUr2nC9z_0pO0jm,3:00Z0Z_9vfuc6l3C9Xz_0pO0jm,3:00404_osVWWnjmpuz_0pO0jm,3:01515_4b0wMpnPP34z_0pO0jm,3:00A0A_551LcBlDksRz_0pO0jm,3:00e0e_ioMZnBuYZ1Az_0pO0jm,3:00505_9cGeTFjyOs5z_0pO0jm,3:00s0s_wYLXqiKhX8z_0pO0jm,3:00B0B_dT1iuyzyPYBz_0pO0jm,3:00I0I_knddRRb4In4z_0pO0jm,3:00m0m_jqixP9HagPTz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:17" title="Mon 22 Nov 10:17:22 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-only-500quick/7409009974.html" data-id="7409009974" class="result-title hdrlnk" id="postid_7409009974" >**Security Deposit ONLY $500**Quick Approval.NEW Building w/ Amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407646845">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-available-brickell-apartments/7407646845.html" class="result-image gallery" data-ids="3:00000_574ewIRGaT3z_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:00101_dCl3uxuuCLxz_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:00O0O_1xWKMiojdL5z_0pO0jm,3:00E0E_gTIqsOzPoL6z_0pO0jm,3:01212_dDIITD9jMmUz_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:17" title="Mon 22 Nov 10:17:15 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-available-brickell-apartments/7407646845.html" data-id="7407646845" class="result-title hdrlnk" id="postid_7407646845" >***Available Brickell Apartments Rentals*** Locate Your Perfect Condo!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411606794">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-1-close-to-everything/7411606794.html" class="result-image gallery" data-ids="3:00M0M_ldjSTSmblk8z_0i909Y,3:00q0q_kkKQoZXUXUez_07K0ak,3:00d0d_jpHDNQ6DRozz_07K0ak,3:00b0b_YIZ4Y0IKSpz_0aS0jm,3:00P0P_8BG15QPHsqcz_07K0ak">
                <span class="result-price">$1,325</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:16" title="Mon 22 Nov 10:16:26 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-1-close-to-everything/7411606794.html" data-id="7411606794" class="result-title hdrlnk" id="postid_7411606794" >Great 1/1 close to everything</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,325</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411608418">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-stylish-2bdr-condo-rentals-in/7411608418.html" class="result-image gallery" data-ids="3:01111_bf8Wa0PIEMOz_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00E0E_gTIqsOzPoL6z_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:16" title="Mon 22 Nov 10:16:10 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-stylish-2bdr-condo-rentals-in/7411608418.html" data-id="7411608418" class="result-title hdrlnk" id="postid_7411608418" >Stylish 2BDR condo rentals in Brickell buildings. Find Your Condo!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,800</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Brickell miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409008478">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-available-brickell-apartments/7409008478.html" class="result-image gallery" data-ids="3:00z0z_lfDypoqMKJz_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00000_574ewIRGaT3z_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:14" title="Mon 22 Nov 10:14:57 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-available-brickell-apartments/7409008478.html" data-id="7409008478" class="result-title hdrlnk" id="postid_7409008478" >***Available Brickell Apartments Rentals*** Locate Your Perfect Condo!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407651828" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7407651828.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:13" title="Mon 22 Nov 10:13:12 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7407651828.html" data-id="7407651828" class="result-title hdrlnk" id="postid_7407651828" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411604196">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-bathroom-condo-tile/7411604196.html" class="result-image gallery" data-ids="3:00a0a_18f0wTxvSVsz_0ak07K,3:00j0j_3KNisciJlV2z_0ak07K,3:00v0v_9EVjmfsZuUVz_0ak07K,3:00404_dNT4byKUmiBz_0ak07K,3:00F0F_17SO4yi9O8z_0ak07K">
                <span class="result-price">$1,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:08" title="Mon 22 Nov 10:08:40 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-bathroom-condo-tile/7411604196.html" data-id="7411604196" class="result-title hdrlnk" id="postid_7411604196" >1 BEDROOM 1 BATHROOM CONDO, TILE THROUGHOUT, SECOND FLOOR,</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,300</span>

                <span class="housing">
                    1br -
                    633ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI BEACH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407648918" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407648918.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:08" title="Mon 22 Nov 10:08:08 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407648918.html" data-id="7407648918" class="result-title hdrlnk" id="postid_7407648918" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411606371">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-downtown-miami-luxury-apartments/7411606371.html" class="result-image gallery" data-ids="3:00101_v7mXg7jwmqz_0pO0jm,3:00i0i_aPEkZtoDrs6z_0pO0jm,3:00909_gNydOiOzb3kz_0pO0jm,3:00Z0Z_i064JzbOJIPz_0pO0jm,3:00k0k_eJX8WrX8n7oz_0pO0jm,3:00O0O_eudhUA0VEjbz_0pO0jm,3:00t0t_fGx0txjxT6fz_0pO0jm,3:00m0m_bbS8TsICdmzz_0pO0jm,3:00w0w_dO1gpNDmHHLz_0pO0jm,3:00M0M_g8tR2xdz2Laz_0pO0jm,3:01414_6wT4b57CvA4z_0pO0jm,3:00v0v_d7syJIIYMSNz_0pO0jm,3:00Z0Z_6sK4nZOGyGTz_0pO0jm,3:01515_g5flvYkgYomz_0pO0jm,3:00V0V_hHT9LoD2m6Nz_0pO0jm,3:00o0o_izUBViqgP4vz_0pO0jm,3:01414_fxEo8vJXEeXz_0pO0jm,3:00H0H_ga6vQnDJ0rjz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:07" title="Mon 22 Nov 10:07:35 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-downtown-miami-luxury-apartments/7411606371.html" data-id="7411606371" class="result-title hdrlnk" id="postid_7411606371" >Downtown Miami Luxury Apartments For Rent **ONLY $1,000 Deposit**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,350</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Downtown miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407648605" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7407648605.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:03" title="Mon 22 Nov 10:03:04 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7407648605.html" data-id="7407648605" class="result-title hdrlnk" id="postid_7407648605" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409007289">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-1000stylish/7409007289.html" class="result-image gallery" data-ids="3:00i0i_aPEkZtoDrs6z_0pO0jm,3:00101_v7mXg7jwmqz_0pO0jm,3:01717_dNzjg7baNEBz_0pO0jm,3:00Z0Z_i064JzbOJIPz_0pO0jm,3:00k0k_eJX8WrX8n7oz_0pO0jm,3:00O0O_eudhUA0VEjbz_0pO0jm,3:00t0t_fGx0txjxT6fz_0pO0jm,3:00m0m_bbS8TsICdmzz_0pO0jm,3:00w0w_dO1gpNDmHHLz_0pO0jm,3:00M0M_g8tR2xdz2Laz_0pO0jm,3:01414_6wT4b57CvA4z_0pO0jm,3:00v0v_d7syJIIYMSNz_0pO0jm,3:00Z0Z_6sK4nZOGyGTz_0pO0jm,3:01515_g5flvYkgYomz_0pO0jm,3:00V0V_hHT9LoD2m6Nz_0pO0jm,3:00o0o_izUBViqgP4vz_0pO0jm,3:01414_fxEo8vJXEeXz_0pO0jm,3:00H0H_ga6vQnDJ0rjz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:02" title="Mon 22 Nov 10:02:37 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-security-deposit-1000stylish/7409007289.html" data-id="7409007289" class="result-title hdrlnk" id="postid_7409007289" >***SECURITY DEPOSIT $1,000***Stylish condo in superb Downtown building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,350</span>

                <span class="housing">
                    2br -
                    1056ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411604967">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-credit-my-team-will-help-you/7411604967.html" class="result-image gallery" data-ids="3:00c0c_eTRoi2fohsBz_0pO0jm,3:00H0H_39hLWSDH88nz_0pO0jm,3:00B0B_kswcIaHCCG4z_0pO0jm,3:00h0h_hPBY9Lr1pzcz_0pO0jm,3:00u0u_92N4HJP2TYoz_0pO0jm,3:00C0C_fyEWSdxd8FNz_0ew0jm,3:00c0c_eSgsLdceJTFz_0pO0jm,3:00O0O_gI8EVSa9pR0z_0pO0jm,3:01717_j1f4g7xWOfWz_0pO0jm,3:00w0w_jD2zD8t0defz_0ew0jm,3:00e0e_9vj7qOYDtXHz_0ew0jm,3:00505_eBteUTckIN8z_0ew0jm,3:00g0g_j1VRNK3vPpbz_0pO0jm,3:00808_ewdKphMXzgz_0pO0jm">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 22:02" title="Mon 22 Nov 10:02:00 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-credit-my-team-will-help-you/7411604967.html" data-id="7411604967" class="result-title hdrlnk" id="postid_7411604967" >No credit ?, My team will help you, Call me and program your visit°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    5br -
                </span>

                <span class="result-hood"> (6743 SW 163rd Pl miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407656491" data-repost-of="7400496735">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7407656491.html" class="result-image gallery" data-ids="3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00202_jIkCrf1vetvz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00808_iXudo37GRAZz_0lM0ey,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$2,450</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:58" title="Mon 22 Nov 09:58:00 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7407656491.html" data-id="7407656491" class="result-title hdrlnk" id="postid_7407656491" >*** GREAT LOCATION *** MOVE WITH ONLY $1000 SECURITY DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,450</span>

                <span class="housing">
                    1br -
                    683ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406351623">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartment-ny-inspired/7406351623.html" class="result-image gallery" data-ids="3:00i0i_d9yLkjsyXQRz_0pO0jm,3:00q0q_3CUh5yuQWwMz_0pO0jm,3:00e0e_exKy6rLhbNJz_0pO0jm,3:00t0t_jCoN4N9pKuWz_0pO0jm,3:00m0m_kt3mGIg6yixz_0pO0jm,3:00j0j_6uUvk1qlkW6z_0pO0jm,3:00u0u_cBVNNUw6wqjz_0pO0jm,3:00f0f_gJ1m2HqCjn1z_0pO0jm,3:00E0E_9DOsubMelnEz_0pO0jm,3:00303_dZReJRNYIZez_0pO0jm,3:00y0y_ig6suLFpfKQz_0pO0jm,3:00606_jmCBBziwkRwz_0pO0jm,3:00Q0Q_js4c47wgKmiz_0pO0jm,3:00o0o_gPKLtj6zJ4Pz_0pO0jm">
                <span class="result-price">$3,075</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:56" title="Mon 22 Nov 09:56:02 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartment-ny-inspired/7406351623.html" data-id="7406351623" class="result-title hdrlnk" id="postid_7406351623" >BRAND NEW Apartment, NY inspired luxury building *ONLY $500 DEPOSIT*</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,075</span>

                <span class="housing">
                    1br -
                    637ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409001905">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-500-depositbrand-new/7409001905.html" class="result-image gallery" data-ids="3:00W0W_189bTFHsEARz_0pO0jm,3:00E0E_dSm5LxMiz6tz_0pO0jm,3:00i0i_L4YeG1FWJZz_0pO0jm,3:00u0u_s8NauVlV77z_0pO0jm,3:00o0o_3bFd1rhcVyLz_0pO0jm,3:00a0a_93vWCrQE8g7z_0pO0jm,3:00t0t_jY8bVAIBADCz_0pO0jm,3:00303_5vlRFaj1rilz_0pO0jm,3:01515_4b0wMpnPP34z_0pO0jm,3:00A0A_551LcBlDksRz_0pO0jm,3:00e0e_ioMZnBuYZ1Az_0pO0jm,3:00505_9cGeTFjyOs5z_0pO0jm,3:00s0s_wYLXqiKhX8z_0pO0jm,3:00B0B_dT1iuyzyPYBz_0pO0jm,3:00I0I_knddRRb4In4z_0pO0jm,3:00m0m_jqixP9HagPTz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,075</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:55" title="Mon 22 Nov 09:55:48 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-500-depositbrand-new/7409001905.html" data-id="7409001905" class="result-title hdrlnk" id="postid_7409001905" >***ONLY $500 DEPOSIT***BRAND NEW Apartment. NY model luxury building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,075</span>

                <span class="housing">
                    1br -
                    637ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Downtown Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411603160">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-condos-in-brand-new/7411603160.html" class="result-image gallery" data-ids="3:00a0a_93vWCrQE8g7z_0pO0jm,3:00t0t_jY8bVAIBADCz_0pO0jm,3:00303_5vlRFaj1rilz_0pO0jm,3:00o0o_3bFd1rhcVyLz_0pO0jm,3:00u0u_s8NauVlV77z_0pO0jm,3:00i0i_L4YeG1FWJZz_0pO0jm,3:00W0W_189bTFHsEARz_0pO0jm,3:00E0E_dSm5LxMiz6tz_0pO0jm,3:00A0A_551LcBlDksRz_0pO0jm,3:00505_9cGeTFjyOs5z_0pO0jm,3:00I0I_knddRRb4In4z_0pO0jm,3:00m0m_jqixP9HagPTz_0pO0jm,3:00B0B_dT1iuyzyPYBz_0pO0jm,3:00s0s_wYLXqiKhX8z_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:54" title="Mon 22 Nov 09:54:34 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-condos-in-brand-new/7411603160.html" data-id="7411603160" class="result-title hdrlnk" id="postid_7411603160" >Luxury condos in brand new building. **ONLY $500 Security Deposit**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,150</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Downtown miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407652569" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407652569.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:52" title="Mon 22 Nov 09:52:55 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407652569.html" data-id="7407652569" class="result-title hdrlnk" id="postid_7407652569" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407654526" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7407654526.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:47" title="Mon 22 Nov 09:47:51 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7407654526.html" data-id="7407654526" class="result-title hdrlnk" id="postid_7407654526" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409816907">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-amazing-15-for-rent-33016/7409816907.html" class="result-image gallery" data-ids="3:00o0o_aZu6LarWD8Uz_0co0gw,3:00Y0Y_5olQaHgnvk3z_0co0gw,3:01111_2oqh2c6ys8Pz_0co0gw,3:00r0r_ccHyEicC6Gtz_0co0gw">
                <span class="result-price">$1,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:45" title="Mon 22 Nov 09:45:38 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-amazing-15-for-rent-33016/7409816907.html" data-id="7409816907" class="result-title hdrlnk" id="postid_7409816907" >AMAZING  2/1.5 FOR RENT (33016)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409820626">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-beautiful-townhouse-for-rent/7409820626.html" class="result-image gallery" data-ids="3:00a0a_dIxnIYpkQ5Lz_0ak07K,3:00m0m_gcY1I4MzxfRz_0pO0jm,3:00M0M_hiRw8F3WBTQz_0ew0jm,3:00404_cDaiolq4GP2z_0ew0jm,3:00b0b_fdVQeTPiNAOz_0ew0jm,3:00s0s_8Tt7McPRKX1z_0ew0jm,3:00u0u_kPQ3I8OCmJgz_0pO0jm">
                <span class="result-price">$3,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:45" title="Mon 22 Nov 09:45:38 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-beautiful-townhouse-for-rent/7409820626.html" data-id="7409820626" class="result-title hdrlnk" id="postid_7409820626" >BEAUTIFUL  TOWNHOUSE  FOR RENT 3/2.5 (33015)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,300</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIAMI LAKES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409824467">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-coral-gate-east/7409824467.html" class="result-image gallery" data-ids="3:00z0z_4boV0bpPp0lz_0co0gw,3:00707_haCpNA5tha4z_0co0gw,3:01414_zWYHWif3Cvz_0co0gw,3:00A0A_6AgHNvv1Qqsz_0co0gw,3:00808_1drajsvfkqtz_0co0gw,3:00505_aGNuuyhxHw5z_0co0gw,3:00909_ayQJn7jCSlsz_0co0gw,3:00U0U_2ajDncLAMDgz_0co0gw,3:00g0g_6yl9BZAivCAz_0co0gw,3:00N0N_flOmjhbwJmqz_0co0gw,3:00l0l_1XQ2A2g2tMiz_0co0gw">
                <span class="result-price">$1,450</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:45" title="Mon 22 Nov 09:45:06 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-coral-gate-east/7409824467.html" data-id="7409824467" class="result-title hdrlnk" id="postid_7409824467" >CORAL GATE EAST  1/1 (33015)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,450</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409831998">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-beautiful-house-for-rent/7409831998.html" class="result-image gallery" data-ids="3:00S0S_3bljUcXUk54z_0pO0jm,3:00T0T_1WwzxcgCD5Nz_0pO0jm,3:00707_9551I5f2Fviz_0pO0jm,3:00202_2hxRusxDvvZz_0ew0jm,3:00C0C_aeHhV5JkjLZz_0ew0jm,3:01515_coBs1wq2Immz_0ew0jm,3:00f0f_1JPuc8dTGBqz_0ew0jm,3:01313_8l6aXOL95Phz_0ew0jm,3:00J0J_bjk47jSdtcIz_0ew0jm,3:00K0K_culPORz6XAKz_0pO0jm,3:00p0p_1SoEIGSCMxez_0pO0jm,3:00t0t_cMqBvtnxTcxz_0pO0jm">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:44" title="Mon 22 Nov 09:44:47 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-beautiful-house-for-rent/7409831998.html" data-id="7409831998" class="result-title hdrlnk" id="postid_7409831998" >BEAUTIFUL HOUSE  FOR RENT 4/2 (33015)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    4br -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402793773">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-amazing-2-for-rent-33016/7402793773.html" class="result-image gallery" data-ids="3:00X0X_5kyluV7xWHzz_07K0ak,3:00I0I_h7n7X0n6c0fz_0ak05O,3:00505_3IaJ7it7LDoz_0ak06T,3:00606_4O60vX3mAypz_0ak05O,3:00q0q_7l6DZPAVk8zz_0ak06T,3:00T0T_1OwuSC1iQhtz_0ak06U,3:01717_i4VePQbVd1Lz_0pO0hc,3:01414_6rc153kfTMiz_0ak06T,3:00s0s_7gPHSUtzBAUz_0ew0jm,3:00t0t_aUdpy1yWcPcz_0i90h1,3:00m0m_cWvPFFRicPxz_0co0gw">
                <span class="result-price">$2,295</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:44" title="Mon 22 Nov 09:44:10 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-amazing-2-for-rent-33016/7402793773.html" data-id="7402793773" class="result-title hdrlnk" id="postid_7402793773" >AMAZING  3/2 FOR RENT (33016)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,295</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409018766">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-ready-to-move-miami-lakes-rent/7409018766.html" class="result-image gallery" data-ids="3:00n0n_hk6GQN1Pk0Mz_0hw0bF,3:01414_5cPml72x8OHz_0hz0bD,3:00202_7cEVOzaIwczz_0hv0bF,3:00606_gKWHfowrRKxz_0hv0bF,3:00J0J_dVntyt8UTf1z_0hw0bF,3:00o0o_3Km7EfJtUGlz_0hw0bG,3:00j0j_kPd0qpvTUDzz_0hw0bF,3:00w0w_iX4TX76vKbNz_0hw0bG,3:00000_h8XIWsD1Nddz_0bG0hw,3:00f0f_3iV3Jxp1dWpz_0hv0bG,3:00w0w_kwtHYbNSLcz_0hw0bG,3:00X0X_5yPhvXnHEsVz_0hw0bG,3:00101_2EsgvB5Qj2cz_0gX0c3,3:00X0X_41B1bPiJ0Psz_0hv0bF">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:43" title="Mon 22 Nov 09:43:47 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-ready-to-move-miami-lakes-rent/7409018766.html" data-id="7409018766" class="result-title hdrlnk" id="postid_7409018766" >Ready to move MIAMI LAKES RENT 3/2 (33016)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIAMI LAKES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406609042">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-venetia-villas-2-for-rent-33015/7406609042.html" class="result-image gallery" data-ids="3:00101_3EHwVNQJEZIz_0pO0jm,3:01313_88xPVgbQJAfz_0pO0jm,3:00G0G_d83lIwR5r1oz_0pO0jm,3:00F0F_7zRg2t28jtUz_0pO0jm,3:00505_9At0NoHhsxxz_0pO0jm,3:00808_54y5zphjDM5z_0pO0jm,3:00k0k_4XnL6kq2uQ2z_0ew0jm,3:00101_btZmwJonSEhz_0pO0jm">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:43" title="Mon 22 Nov 09:43:19 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-venetia-villas-2-for-rent-33015/7406609042.html" data-id="7406609042" class="result-title hdrlnk" id="postid_7406609042" >VENETIA VILLAS 3/2 For rent (33015)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407652357" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7407652357.html" class="result-image gallery" data-ids="3:00j0j_4cTJdRZl58yz_0CI0t2,3:00n0n_foIsXPWzIoEz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$3,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:42" title="Mon 22 Nov 09:42:47 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7407652357.html" data-id="7407652357" class="result-title hdrlnk" id="postid_7407652357" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,200</span>

                <span class="housing">
                    2br -
                    1040ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7407655234" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407655234.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:37" title="Mon 22 Nov 09:37:43 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7407655234.html" data-id="7407655234" class="result-title hdrlnk" id="postid_7407655234" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411598305">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1bdr-condos-in-brickell/7411598305.html" class="result-image gallery" data-ids="3:00z0z_lfDypoqMKJz_0pO0jm,3:01212_dDIITD9jMmUz_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00O0O_1xWKMiojdL5z_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$2,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:35" title="Mon 22 Nov 09:35:10 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1bdr-condos-in-brickell/7411598305.html" data-id="7411598305" class="result-title hdrlnk" id="postid_7411598305" >Gorgeous 1BDR condos in Brickell. Find Your Condo Today! GYM, POOL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Brickell miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411597801">

        <a href="https://miami.craigslist.org/mdc/apa/d/fort-lauderdale-condo-featuring-with/7411597801.html" class="result-image gallery" data-ids="3:01111_fmiaHclA1cTz_0fu0bC,3:00e0e_cYaiJSST4Tiz_0ak07K,3:00Z0Z_9cSwm5qV50Gz_0gw0co,3:00U0U_gSfpNlOxBtOz_0gw0co,3:00a0a_1DUX0N8iNi3z_0ak07K,3:01010_iCnnZYzGW29z_0ak07K,3:00707_icEa9wKHmiWz_0ak07K,3:00j0j_5Jim08OS2BWz_0ak07K,3:00808_bE8Z6p32Q8jz_0ak07K">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:33" title="Mon 22 Nov 09:33:18 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/fort-lauderdale-condo-featuring-with/7411597801.html" data-id="7411597801" class="result-title hdrlnk" id="postid_7411597801" >CONDO FEATURING WITH ALL AMENITIES FOR ENJOY IN FAMILY, COME SEE°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    4br -
                </span>

                <span class="result-hood"> (544 Cascade Falls Dr miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404692326" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7404692326.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:32" title="Mon 22 Nov 09:32:39 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7404692326.html" data-id="7404692326" class="result-title hdrlnk" id="postid_7404692326" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408020066">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-apartments-in/7408020066.html" class="result-image gallery" data-ids="3:00E0E_gTIqsOzPoL6z_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:00O0O_1xWKMiojdL5z_0pO0jm,3:00U0U_9ExP9zFUdsLz_0pO0jm,3:00000_574ewIRGaT3z_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00R0R_73Fi7nRwgY7z_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:32" title="Mon 22 Nov 09:32:12 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-apartments-in/7408020066.html" data-id="7408020066" class="result-title hdrlnk" id="postid_7408020066" >Gorgeous 1 Bedroom apartments in building w/ pool,gym, and more!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Brickell miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404692957" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7404692957.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:27" title="Mon 22 Nov 09:27:34 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7404692957.html" data-id="7404692957" class="result-title hdrlnk" id="postid_7404692957" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410409736">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-las-brisas-apt-for-rent/7410409736.html" class="result-image gallery" data-ids="3:00h0h_aREjujJwx3mz_0ew0jm,3:00707_6e5bRoV6u2wz_0co0gw,3:00q0q_9lawfPH7j7Sz_0co0gw,3:00U0U_9kY3zd3Rctxz_0ew0jm,3:00202_lt98iQIR6iHz_0pO0jm,3:00D0D_5GC8EBYlDYlz_0ew0jm,3:01616_1WbIOSA3jThz_0ew0jm,3:00Q0Q_3c04Jk0IoSyz_0ew0jm,3:00H0H_hLLlGvHXXcPz_0ew0jm,3:00Z0Z_2CnMZpKQ0S0z_0ew0jm,3:00W0W_5fx6Kq3qKVEz_0co0gw">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:26" title="Mon 22 Nov 09:26:18 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-las-brisas-apt-for-rent/7410409736.html" data-id="7410409736" class="result-title hdrlnk" id="postid_7410409736" >LAS BRISAS  APT FOR RENT 2/2 (33015)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411595917">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-rental-quick-occupancy-good/7411595917.html" class="result-image gallery" data-ids="3:00V0V_eyZ1KIAWRU1z_0gg0cc,3:00g0g_aOoNiwzHNFNz_0cc0gg,3:01717_5SUnHmCxohBz_0gg0cc,3:00i0i_iJNJlatbFoWz_0gg0cc,3:00404_DR0krUM4rAz_0gg0cc,3:00M0M_igXfU8ucSFMz_0cc0gg,3:01212_jK5fYDO1vmMz_0dW0iA,3:00z0z_71PcELDvhhMz_0cc0gg,3:00y0y_gWKsHv7QKriz_0cc0gg,3:00c0c_249iFYXg87Qz_0cc0gg,3:00808_lmFEgluY1fkz_0cc0gg,3:00404_8aOvK1HMVUAz_0cc0gg,3:00E0E_8zt7egumaVNz_0cc0gg">
                <span class="result-price">$3,990</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:26" title="Mon 22 Nov 09:26:13 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-rental-quick-occupancy-good/7411595917.html" data-id="7411595917" class="result-title hdrlnk" id="postid_7411595917" >Fast rental. Quick occupancy. Good ubication come to see now°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,990</span>

                <span class="housing">
                    5br -
                </span>

                <span class="result-hood"> (16431 SW 60th Ter miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411595090">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-brand-new-condos-resort/7411595090.html" class="result-image gallery" data-ids="3:00v0v_iwwPSqAKF90z_0pO0jm,3:00a0a_kmNdP0BEj1Bz_0pO0jm,3:00j0j_cRpEPMTm5tZz_0pO0jm,3:00Q0Q_4B9np06iPg5z_0pO0jm,3:00C0C_4jYmhwVaocxz_0pO0jm,3:00i0i_dIiOyB0XHZ9z_0pO0jm,3:01111_hUFLKyVSZP2z_0pO0jm,3:00707_bQBbSnGUKVz_0pO0jm,3:00u0u_2iV6Bq3LzGpz_0pO0jm,3:00V0V_cmEj5YfKiAUz_0pO0jm,3:00l0l_gtgJh9SoCXhz_0pO0jm,3:01616_h5NfnhKzgUDz_0pO0jm,3:00j0j_dEx0CF5QOuEz_0pO0jm,3:00G0G_jmJ1f4Fbt8Mz_0pO0jm,3:00K0K_7Jw3rjAVHjaz_0pO0jm,3:00303_aHOgne1H2hBz_0pO0jm,3:00Z0Z_9Nde1ONcErkz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:22" title="Mon 22 Nov 09:22:59 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-brand-new-condos-resort/7411595090.html" data-id="7411595090" class="result-title hdrlnk" id="postid_7411595090" >Luxury brand new condos w/ resort style gym, pool **$700 Sec Deposit**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,150</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411595009">

        <a href="https://miami.craigslist.org/mdc/apa/d/fort-lauderdale-enjoy-open-views-to/7411595009.html" class="result-image gallery" data-ids="3:00A0A_8Li5L8fK3XBz_0hx0bF,3:00w0w_6ey8ZQajrDGz_0hx0bF,3:00O0O_cf65U0Q0ro3z_0hx0bE,3:00g0g_iqL5iglL55bz_0hx0bF,3:00I0I_cRTbkdltxOfz_0hx0bF,3:00S0S_aIpsCICLe7mz_0hy0bE,3:00X0X_ifZXIGJ0RATz_0hx0bE,3:00606_8m20U8Si4cSz_0hx0bF,3:01717_lhNTTjTcDrmz_0hx0bE,3:01515_2CDikW15HNtz_0hx0bE,3:00a0a_ald6lGnbNIAz_0hx0bE">
                <span class="result-price">$9,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:22" title="Mon 22 Nov 09:22:40 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/fort-lauderdale-enjoy-open-views-to/7411595009.html" data-id="7411595009" class="result-title hdrlnk" id="postid_7411595009" >Enjoy open views to Miami Skyline.Easy access to all public transport°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$9,900</span>

                <span class="housing">
                    5br -
                </span>

                <span class="result-hood"> (2898 Medinah miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404692018" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7404692018.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:22" title="Mon 22 Nov 09:22:30 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7404692018.html" data-id="7404692018" class="result-title hdrlnk" id="postid_7404692018" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403578998" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403578998.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:17" title="Mon 22 Nov 09:17:26 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403578998.html" data-id="7403578998" class="result-title hdrlnk" id="postid_7403578998" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404688735" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7404688735.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:12" title="Mon 22 Nov 09:12:22 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7404688735.html" data-id="7404688735" class="result-title hdrlnk" id="postid_7404688735" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411591572">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-live-in-luxury-club-with-resort/7411591572.html" class="result-image gallery" data-ids="3:00E0E_hkKdNCx5zs3z_0pO0hc,3:00C0C_536KBqct3opz_0pO0hc,3:00Y0Y_9NQTuefDu3Pz_0pO0hc,3:00T0T_8yvEmwNkyG8z_0pO0hc,3:00n0n_f3IYWe5SiuRz_0pO0hc,3:00G0G_1EA13g5XHM1z_0pO0hc,3:00F0F_d7RFxXoNHgJz_0pO0hc,3:00v0v_y7gEObZNHtz_0pO0hc,3:00e0e_ln94xQ99JHqz_0pO0hc,3:00f0f_jkQCzuMJnCVz_0pO0hc,3:00h0h_fexx0rOT9Wuz_0pO0hc,3:01515_hei5nNLhYTpz_0pO0hc,3:00x0x_9DrQDM5nwcUz_0pO0hc,3:00r0r_iwGpNU2soTQz_0pO0hc,3:00L0L_fEv86AToOE3z_0pO0hc">
                <span class="result-price">$4,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:09" title="Mon 22 Nov 09:09:59 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-live-in-luxury-club-with-resort/7411591572.html" data-id="7411591572" class="result-title hdrlnk" id="postid_7411591572" >Live in Luxury Club with resort style. Immediate move in°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,700</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (6435 NW 105th Ct #6435 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405898089">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-bedroom-condo-high/7405898089.html" class="result-image gallery" data-ids="3:00C0C_1i17sw2utPnz_0pO0jm,3:00C0C_8pqruMTsaDXz_0pO0jm,3:00D0D_jDelrFyskkUz_0pO0jm,3:00L0L_385iQMZ2tARz_0pO0jm,3:01111_cpEMSAN5wykz_0pO0jm,3:00G0G_dCYsi435jJez_0pO0jm,3:00000_kRf5TlVRUtSz_0pO0jm,3:01717_365z6MSFKvNz_0pO0jm,3:01616_aRNvDBJebsez_0pO0jm,3:01414_e52E1TR3Vfdz_0pO0jm,3:01717_lBzMoz4KYLFz_0pO0jm,3:00f0f_9K6cd1XfWGHz_0pO0jm,3:00S0S_ffDLcS6U8UNz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,612</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:08" title="Mon 22 Nov 09:08:49 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-bedroom-condo-high/7405898089.html" data-id="7405898089" class="result-title hdrlnk" id="postid_7405898089" >Brand new 2 bedroom condo w/ high ceilings, balcony. Only $700 Sec Dep</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,612</span>

                <span class="housing">
                    2br -
                    1051ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402866460" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402866460.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:07" title="Mon 22 Nov 09:07:18 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402866460.html" data-id="7402866460" class="result-title hdrlnk" id="postid_7402866460" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411589679">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-bedroom-luxury-riverfront/7411589679.html" class="result-image gallery" data-ids="3:00a0a_kmNdP0BEj1Bz_0pO0jm,3:00v0v_iwwPSqAKF90z_0pO0jm,3:00c0c_8EMsuD4ofHgz_0pO0jm,3:00Q0Q_4B9np06iPg5z_0pO0jm,3:00j0j_cRpEPMTm5tZz_0pO0jm,3:00C0C_4jYmhwVaocxz_0pO0jm,3:00i0i_dIiOyB0XHZ9z_0pO0jm,3:01111_hUFLKyVSZP2z_0pO0jm,3:00707_bQBbSnGUKVz_0pO0jm,3:00u0u_2iV6Bq3LzGpz_0pO0jm,3:00V0V_cmEj5YfKiAUz_0pO0jm,3:00l0l_gtgJh9SoCXhz_0pO0jm,3:01616_h5NfnhKzgUDz_0pO0jm,3:00j0j_dEx0CF5QOuEz_0pO0jm,3:00G0G_jmJ1f4Fbt8Mz_0pO0jm,3:00K0K_7Jw3rjAVHjaz_0pO0jm,3:00303_aHOgne1H2hBz_0pO0jm,3:00Z0Z_9Nde1ONcErkz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:03" title="Mon 22 Nov 09:03:39 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-bedroom-luxury-riverfront/7411589679.html" data-id="7411589679" class="result-title hdrlnk" id="postid_7411589679" >NEW 2 Bedroom Luxury Riverfront Condos w/ high ceilings, pool, gym!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409562468" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7409562468.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 21:02" title="Mon 22 Nov 09:02:13 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7409562468.html" data-id="7409562468" class="result-title hdrlnk" id="postid_7409562468" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402866045" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-only-one-month-deposit/7402866045.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:57" title="Mon 22 Nov 08:57:09 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-only-one-month-deposit/7402866045.html" data-id="7402866045" class="result-title hdrlnk" id="postid_7402866045" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408018113">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-bedroom-condo-high/7408018113.html" class="result-image gallery" data-ids="3:00K0K_7Jw3rjAVHjaz_0pO0jm,3:00c0c_8EMsuD4ofHgz_0pO0jm,3:00a0a_kmNdP0BEj1Bz_0pO0jm,3:00v0v_iwwPSqAKF90z_0pO0jm,3:00j0j_cRpEPMTm5tZz_0pO0jm,3:00C0C_4jYmhwVaocxz_0pO0jm,3:00i0i_dIiOyB0XHZ9z_0pO0jm,3:01111_hUFLKyVSZP2z_0pO0jm,3:00707_bQBbSnGUKVz_0pO0jm,3:00u0u_2iV6Bq3LzGpz_0pO0jm,3:00l0l_gtgJh9SoCXhz_0pO0jm,3:00j0j_dEx0CF5QOuEz_0pO0jm,3:00303_aHOgne1H2hBz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:55" title="Mon 22 Nov 08:55:49 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-bedroom-condo-high/7408018113.html" data-id="7408018113" class="result-title hdrlnk" id="postid_7408018113" >Brand new 2 bedroom condo w/ high ceilings, balcony. Only $700 Deposit</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400545868" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7400545868.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:52" title="Mon 22 Nov 08:52:04 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7400545868.html" data-id="7400545868" class="result-title hdrlnk" id="postid_7400545868" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405905848">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7405905848.html" class="result-image gallery" data-ids="3:00N0N_4LLXSi8C8cjz_0hq0hq,3:00b0b_SFLXbuggF0z_0hq0hq,3:01313_dCNmg4AbAAPz_0hq0hq,3:00M0M_gTwtRNkXQtTz_0hq0hq">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:48" title="Mon 22 Nov 08:48:04 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell-condo/7405905848.html" data-id="7405905848" class="result-title hdrlnk" id="postid_7405905848" >Find Your 2 Bedroom Brickell Condo Today! Gorgeous condo w/ amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400546218" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7400546218.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,050</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:47" title="Mon 22 Nov 08:47:00 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7400546218.html" data-id="7400546218" class="result-title hdrlnk" id="postid_7400546218" >*** ONLY ONE MONTH DEPOSIT *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,050</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411584588">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-condo-rentals-in-brickell/7411584588.html" class="result-image gallery" data-ids="3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:00000_574ewIRGaT3z_0pO0jm,3:00O0O_1xWKMiojdL5z_0pO0jm,3:00z0z_lfDypoqMKJz_0pO0jm,3:01212_dDIITD9jMmUz_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:45" title="Mon 22 Nov 08:45:59 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-bedroom-condo-rentals-in-brickell/7411584588.html" data-id="7411584588" class="result-title hdrlnk" id="postid_7411584588" >2 Bedroom Condo Rentals in Brickell. Find Your Perfect Condo!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411584171" data-repost-of="6882194245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-efficiency-studio-for-rent/7411584171.html" class="result-image gallery" data-ids="3:00Q0Q_e22cpKu36mLz_0lM0t2,3:00p0p_VitIdMgv5Vz_0lM0t2,3:00j0j_1mwCjTIu60Xz_0lM0t2,3:00505_64vCIj1XPLBz_0lM0t2,3:00303_1Ym8aGDaCSvz_0lM0t2">
                <span class="result-price">$1,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:44" title="Mon 22 Nov 08:44:27 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-efficiency-studio-for-rent/7411584171.html" data-id="7411584171" class="result-title hdrlnk" id="postid_7411584171" >EFFICIENCY/STUDIO FOR RENT - PRIVATE ENTRANCE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,400</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIAMI/KENDALL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408016141">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell/7408016141.html" class="result-image gallery" data-ids="3:00U0U_9ExP9zFUdsLz_0pO0jm,3:01212_dDIITD9jMmUz_0pO0jm,3:00F0F_5TlE3Qoxiwpz_0pO0jm,3:01111_bf8Wa0PIEMOz_0pO0jm,3:00O0O_1xWKMiojdL5z_0pO0jm,3:00R0R_73Fi7nRwgY7z_0pO0jm,3:00d0d_9UETJuK40mvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:43" title="Mon 22 Nov 08:43:46 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-find-your-bedroom-brickell/7408016141.html" data-id="7408016141" class="result-title hdrlnk" id="postid_7408016141" >Find Your 2 Bedroom Brickell Apartment. Gorgeous condo w/ pool,gym</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Brickell Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402872290" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7402872290.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:41" title="Mon 22 Nov 08:41:56 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7402872290.html" data-id="7402872290" class="result-title hdrlnk" id="postid_7402872290" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411582714">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-free-advice-fast-move-in-bad/7411582714.html" class="result-image gallery" data-ids="3:00y0y_1jjWnyphMEGz_0ew0jm,3:00f0f_gSJ6uFdL7Z4z_0ew0jm,3:00101_2Y8gbJ1M82Yz_07K0ak,3:00e0e_3PNUjVz7yS1z_07K0ak,3:00g0g_gAufNvIrybSz_0ak0dL,3:00R0R_8AzUkFNVrYlz_0ak0dL,3:00202_gJ1l0lR8TZ1z_07K0ak,3:00p0p_25EYtVwq4ZCz_0ak0dL,3:00x0x_au8weDGD4Dqz_0ak0dL">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:39" title="Mon 22 Nov 08:39:08 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-free-advice-fast-move-in-bad/7411582714.html" data-id="7411582714" class="result-title hdrlnk" id="postid_7411582714" >Free advice, fast move in, bad credit, no credit, call me and ask°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    4br -
                </span>

                <span class="result-hood"> (915 SW 155th Ct miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400545220" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7400545220.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:36" title="Mon 22 Nov 08:36:52 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7400545220.html" data-id="7400545220" class="result-title hdrlnk" id="postid_7400545220" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411580906">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-gated-community-with-24/7411580906.html" class="result-image gallery" data-ids="3:00t0t_fqGd1y78CIBz_0pO0hc,3:00101_ih0zeNipMJ2z_0pO0hc,3:00c0c_7LikOKi7u3ez_0pO0hc,3:00d0d_fixd0YiY12Hz_0pO0hc,3:00l0l_eMIHFDirRtez_0pO0hc,3:00909_gfhBJrEi2KEz_0pO0hc,3:00K0K_WpU6sqKh1bz_0pO0hc,3:00505_7ux3X59DB8Yz_0pO0hc,3:00f0f_aadSmzgbaYcz_0pO0hc,3:00M0M_g5ljECymcXDz_0pO0hc,3:00o0o_eqqjkv2smRez_0pO0hc,3:00n0n_3sd1JCaEIkPz_0pO0hc">
                <span class="result-price">$3,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:33" title="Mon 22 Nov 08:33:12 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-gated-community-with-24/7411580906.html" data-id="7411580906" class="result-title hdrlnk" id="postid_7411580906" >Gated community with 24/7 security. Located near major highways°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,700</span>

                <span class="housing">
                    4br -
                </span>

                <span class="result-hood"> (15822 NW 91st Ave miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400623694" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7400623694.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:31" title="Mon 22 Nov 08:31:47 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7400623694.html" data-id="7400623694" class="result-title hdrlnk" id="postid_7400623694" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400601657" data-repost-of="7379514907">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-remodeled-1bed-15bath/7400601657.html" class="result-image gallery" data-ids="3:00u0u_k2fr9g5wcHjz_0x20oM,3:00c0c_81jJCvN8GdDz_0x20oM,3:00a0a_1wRhvfnFDb9z_0x20oM,3:00k0k_9ollGIWPca3z_0x20oM,3:00J0J_7JNck8r7SZ6z_0x20oM,3:00a0a_fgXwDWT61Rfz_0x20oM,3:01717_h22sxOgP1PUz_0x20oM,3:00909_9QM87Ww82VPz_0lM0t2,3:00d0d_6j7sjegfq4Sz_0lM0t2,3:01717_cQ7LTfUcG8qz_0lM0t2,3:00Y0Y_4R666Tuw0ixz_0x20oM,3:00v0v_g5ZTSOcgQXfz_0x20oM,3:00S0S_16eITaot8sGz_0x20oM">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:30" title="Mon 22 Nov 08:30:46 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-remodeled-1bed-15bath/7400601657.html" data-id="7400601657" class="result-title hdrlnk" id="postid_7400601657" >BEAUTIFUL REMODELED 1BED 1.5BATH CONDO $1,800/MO 12MO LEASE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    1br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Heart of Aventura, next to AVENTURA mall miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7411579845">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-bedroom-condos-with/7411579845.html" class="result-image gallery" data-ids="3:00H0H_dAsp09ydD1uz_0pO0jm,3:00F0F_8rI1D4lEv6Xz_0pO0jm,3:00202_2d4P9kqdsn5z_0pO0jm,3:00505_ewkFKUGjjPzz_0pO0jm,3:00707_fapfriKdNPYz_0pO0jm,3:01717_jWyMDKeUCeFz_0pO0jm,3:00p0p_a6tCCEDbsNez_0pO0jm,3:00b0b_cruItRAEvr6z_0pO0jm,3:00u0u_7L6GT44YH2Dz_0pO0jm,3:00q0q_cQUcgtkHgWZz_0pO0jm,3:00Z0Z_eJa7S5l20sVz_0pO0jm,3:00l0l_gVcmsBVvxHKz_0pO0jm,3:00R0R_73Fi7nRwgY7z_0pO0jm,3:00S0S_ax7Og7cT1s4z_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,965</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:29" title="Mon 22 Nov 08:29:35 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-bedroom-condos-with/7411579845.html" data-id="7411579845" class="result-title hdrlnk" id="postid_7411579845" >Amazing 2 bedroom condos with resort amenities **ONLY $700 Deposit**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,965</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403573253" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7403573253.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:26" title="Mon 22 Nov 08:26:42 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7403573253.html" data-id="7403573253" class="result-title hdrlnk" id="postid_7403573253" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7408012984">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-condos-with-star/7408012984.html" class="result-image gallery" data-ids="3:00707_fapfriKdNPYz_0pO0jm,3:00202_2d4P9kqdsn5z_0pO0jm,3:00F0F_8rI1D4lEv6Xz_0pO0jm,3:00u0u_7L6GT44YH2Dz_0pO0jm,3:00505_ewkFKUGjjPzz_0pO0jm,3:01717_jWyMDKeUCeFz_0pO0jm,3:00p0p_a6tCCEDbsNez_0pO0jm,3:00q0q_cQUcgtkHgWZz_0pO0jm,3:00b0b_cruItRAEvr6z_0pO0jm,3:00H0H_dAsp09ydD1uz_0pO0jm,3:00l0l_gVcmsBVvxHKz_0pO0jm,3:00Z0Z_eJa7S5l20sVz_0pO0jm,3:00P0P_8mQqmFck19lz_0pO0jm,3:00R0R_73Fi7nRwgY7z_0pO0jm,3:00K0K_e4O6HgrGFg3z_0pO0jm,3:00S0S_ax7Og7cT1s4z_0pO0jm,3:00s0s_icfemzEs2kTz_0pO0jm,3:00a0a_flWnxfnfJcvz_0pO0jm,3:00J0J_YxLLXX91kBz_0pO0jm">
                <span class="result-price">$3,950</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:25" title="Mon 22 Nov 08:25:28 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-condos-with-star/7408012984.html" data-id="7408012984" class="result-title hdrlnk" id="postid_7408012984" >Gorgeous 2 bedroom condos with 5 star amenities **Only $700 Deposit**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,950</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402668111" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7402668111.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:21" title="Mon 22 Nov 08:21:38 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7402668111.html" data-id="7402668111" class="result-title hdrlnk" id="postid_7402668111" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7410666445">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-2nd-floor-stainless-steel/7410666445.html" class="result-image gallery" data-ids="3:00f0f_3meDjmWhRmpz_0d709J,3:00S0S_djFH8kfaeTMz_0do09O,3:00M0M_jvzrRLzxTLwz_0ad07m,3:00z0z_lfPZA1kJztPz_0g80aL,3:00N0N_cvxgtYidypOz_0cP09K,3:01010_1PtvpkEl8VJz_0g80aL,3:00g0g_e2QizQWUNuaz_0g80af,3:00k0k_luo5ohfqzBGz_0d309L">
                <span class="result-price">$1,843</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:20" title="Mon 22 Nov 08:20:07 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-2nd-floor-stainless-steel/7410666445.html" data-id="7410666445" class="result-title hdrlnk" id="postid_7410666445" >2nd floor, stainless steel appliances, 24hr fitness center</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,843</span>

                <span class="housing">
                    1br -
                    738ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403580749" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403580749.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:16" title="Mon 22 Nov 08:16:34 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403580749.html" data-id="7403580749" class="result-title hdrlnk" id="postid_7403580749" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405955144" data-repost-of="7239666434">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-university-coral-gables-doral/7405955144.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:15" title="Mon 22 Nov 08:15:30 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-university-coral-gables-doral/7405955144.html" data-id="7405955144" class="result-title hdrlnk" id="postid_7405955144" >University Coral Gables Doral Miami Efficiency Studio 3146 rc177</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405943014" data-repost-of="7239265139">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-pool-hot-tub-spa-and-gym/7405943014.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:11" title="Mon 22 Nov 08:11:55 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-pool-hot-tub-spa-and-gym/7405943014.html" data-id="7405943014" class="result-title hdrlnk" id="postid_7405943014" >Pool Hot Tub Spa and Gym Private Entrance Private Entry 3002 rc166</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405942917" data-repost-of="7239263089">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-aventura-ajus-ocean-blvd-collins/7405942917.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:11" title="Mon 22 Nov 08:11:51 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-aventura-ajus-ocean-blvd-collins/7405942917.html" data-id="7405942917" class="result-title hdrlnk" id="postid_7405942917" >Aventura Ajus Ocean Blvd. Collins Avenue Efficiency Studio 3132 rc166</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405942964" data-repost-of="7239260191">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-north-miami-miami-gardens/7405942964.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:11" title="Mon 22 Nov 08:11:46 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-north-miami-miami-gardens/7405942964.html" data-id="7405942964" class="result-title hdrlnk" id="postid_7405942964" >North Miami Miami Gardens Efficiency Studio Apartment 3015 rc166</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405272372" data-repost-of="7400496735">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7405272372.html" class="result-image gallery" data-ids="3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00202_jIkCrf1vetvz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00808_iXudo37GRAZz_0lM0ey,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$2,450</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:11" title="Mon 22 Nov 08:11:29 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7405272372.html" data-id="7405272372" class="result-title hdrlnk" id="postid_7405272372" >*** GREAT LOCATION *** MOVE WITH ONLY $1000 SECURITY DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,450</span>

                <span class="housing">
                    1br -
                    683ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405942234" data-repost-of="7239247571">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-small-deposit-efficiency/7405942234.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:10" title="Mon 22 Nov 08:10:00 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-small-deposit-efficiency/7405942234.html" data-id="7405942234" class="result-title hdrlnk" id="postid_7405942234" >Small Deposit Efficiency Efficiency Studio Apartment 3002 rc165</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405942453" data-repost-of="7239250960">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-nice-apartment-with-garage/7405942453.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:09" title="Mon 22 Nov 08:09:39 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-nice-apartment-with-garage/7405942453.html" data-id="7405942453" class="result-title hdrlnk" id="postid_7405942453" >Nice apartment with Garage Parking Efficiency Studio 3002 rc165</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405494715" data-repost-of="6200045167">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-cutler-bay-efficiency-studio/7405494715.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:07" title="Mon 22 Nov 08:07:11 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-cutler-bay-efficiency-studio/7405494715.html" data-id="7405494715" class="result-title hdrlnk" id="postid_7405494715" >Cutler Bay Efficiency Studio Apartment Miami Beach 3157 rc21</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Cutler Bay miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405494599" data-repost-of="6693774603">

        <a href="https://miami.craigslist.org/mdc/apa/d/homestead-rentals-from-private/7405494599.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:06" title="Mon 22 Nov 08:06:36 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/homestead-rentals-from-private/7405494599.html" data-id="7405494599" class="result-title hdrlnk" id="postid_7405494599" >Rentals from PRIVATE LANDLORDS Florida City  3034 rc21</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403589212" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403589212.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:06" title="Mon 22 Nov 08:06:25 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403589212.html" data-id="7403589212" class="result-title hdrlnk" id="postid_7403589212" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405500429" data-repost-of="6200045167">

        <a href="https://miami.craigslist.org/mdc/apa/d/doral-efficiency-apartment-miami-beach/7405500429.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:06" title="Mon 22 Nov 08:06:10 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/doral-efficiency-apartment-miami-beach/7405500429.html" data-id="7405500429" class="result-title hdrlnk" id="postid_7405500429" >Doral Efficiency Apartment Miami Beach Cutler Bay 3172 rc21</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405500295" data-repost-of="6415469906">

        <a href="https://miami.craigslist.org/mdc/apa/d/country-setting-in-the-city-efficiency/7405500295.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:05" title="Mon 22 Nov 08:05:47 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/country-setting-in-the-city-efficiency/7405500295.html" data-id="7405500295" class="result-title hdrlnk" id="postid_7405500295" >Country Setting in the City Efficiency Studio Apartment 3030 rc21</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405494312" data-repost-of="6222669344">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-hialeah-efficiency-studio/7405494312.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:03" title="Mon 22 Nov 08:03:02 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-hialeah-efficiency-studio/7405494312.html" data-id="7405494312" class="result-title hdrlnk" id="postid_7405494312" >Hialeah Efficiency Studio Apartment 3018 rc12</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405494372" data-repost-of="6411173327">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-dadeland-mall-efficiency-studio/7405494372.html" class="result-image gallery" data-ids="3:00f0f_ba8qGESxyp8z_09u0c6">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:02" title="Mon 22 Nov 08:02:49 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-dadeland-mall-efficiency-studio/7405494372.html" data-id="7405494372" class="result-title hdrlnk" id="postid_7405494372" >Dadeland Mall Efficiency Studio Apartment 3156 rc12</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Pinecrest miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403587324" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-fast-approval-only-one/7403587324.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 20:01" title="Mon 22 Nov 08:01:21 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-fast-approval-only-one/7403587324.html" data-id="7403587324" class="result-title hdrlnk" id="postid_7403587324" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403060708" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7403060708.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 19:56" title="Mon 22 Nov 07:56:17 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7403060708.html" data-id="7403060708" class="result-title hdrlnk" id="postid_7403060708" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,150</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403245091" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7403245091.html" class="result-image gallery" data-ids="3:00j0j_4cTJdRZl58yz_0CI0t2,3:00n0n_foIsXPWzIoEz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$3,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 19:51" title="Mon 22 Nov 07:51:12 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7403245091.html" data-id="7403245091" class="result-title hdrlnk" id="postid_7403245091" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,250</span>

                <span class="housing">
                    2br -
                    1040ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7403059461" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403059461.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 19:46" title="Mon 22 Nov 07:46:08 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7403059461.html" data-id="7403059461" class="result-title hdrlnk" id="postid_7403059461" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401299739" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401299739.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 19:41" title="Mon 22 Nov 07:41:04 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401299739.html" data-id="7401299739" class="result-title hdrlnk" id="postid_7401299739" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405282048" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7405282048.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 19:36" title="Mon 22 Nov 07:36:00 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7405282048.html" data-id="7405282048" class="result-title hdrlnk" id="postid_7405282048" >*** ONLY ONE MONTH DEPOSIT *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,250</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7409564618" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7409564618.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-22 19:30" title="Mon 22 Nov 07:30:56 PM">Nov 22</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7409564618.html" data-id="7409564618" class="result-title hdrlnk" id="postid_7409564618" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>

                    
                    
                </ul>
            </div>


            <div class="search-legend bottom">
                <div class="search-view">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="search-sort">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">3000</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">3000</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/mdc/apa?s=120&amp;hasPic=1" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

            </div>

            <section class="blurbs">
                
            </section>

            <div id="floater">
                <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                <img class="payload" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
            </div>
        </form>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>

<div class="slidemessage">
    <span class="fave">
        <span class="star"></span>
        favorited
    </span>
    <span class="unfave">
        <span class="star"></span>
        no longer favorited
    </span>
    <span class="hide">
        <span class="trash"></span>
        hidden
    </span>
    <span class="unhide">
        <span class="trash"></span>
        no longer hidden
    </span>
</div>

<footer>
    <ul class="clfooter">
        <li>&copy; 2021 <span class="desktop">craigslist</span><span class="mobile">CL</span></li>
        <li><a href="https://www.craigslist.org/about/help/">help</a></li>
        <li><a href="https://www.craigslist.org/about/scams">safety</a></li>
        <li class="desktop"><a href="https://www.craigslist.org/about/privacy.policy">privacy</a><sup class="neu">new</sup></li>
        <li class="desktop"><a href="https://forums.craigslist.org/?forumID=8">feedback</a></li>
        <li><a href="https://www.craigslist.org/about/terms.of.use">terms</a></li>
        <li><a href="https://www.craigslist.org/about/">about</a></li>
        <li class="fsel desktop linklike" data-mode="mobile">mobile</li>
        <li class="fsel mobile linklike" data-mode="regular">desktop</li>
    </ul>
</footer>
    </section>

<template id="gallerycarousel">
    <div class="slider-info"></div><div class="slider-back arrow">&lt;</div><div class="slider-forward arrow">&gt;</div>
</template>

<script type="text/template" id="clustertemplate">
    <li class="posting {visited}" data-pid="{PostingID}">
        <img src="{ImageThumb}">
        <div class="housing_bubble_banner">
            <span class="{hasPrice}price">{currencySymbol}{price}</span>
            <span class="bedrooms">{BedroomsContent}</span>
            <span class="postingtitle"><a>{PostingTitle}</a></span>
            <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                <span class="banish">
                    <span class="icon icon-trash" role="button"></span>
                    <span class="screen-reader-text">hide this posting</span>
                </span>
                <span class="unbanish">
                    <span class="icon icon-trash red" role="button"></span>
                    unhide
                </span>
            </span>
        </div>
    </li>
</script>
<script type="text/template" id="postingtemplate">
    <div class="viewcontainer pics loading">
        <div class="backtolist">
            &laquo; back to posting list
        </div>
        <div class="title">
            <span class="icon icon-star" data-pid="{PostingID}" role="button">
                <span class="screen-reader-text">favorite this post</span>
            </span>
            <span class="postingtitle">
                <a href="{PostingURL}" target="_blank">{PostingTitle}</a>
            </span>
            <div>
                <span class="{hasPrice}price">{currencySymbol}{price}</span>
                <span class="bedrooms">{BedroomsContent}</span>
                <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                    <span class="banish">
                        <span class="icon icon-trash" role="button"></span>
                        <span class="screen-reader-text">hide this posting</span>
                    </span>
                    <span class="unbanish">
                        <span class="icon icon-trash red" role="button"></span>
                        <span class="screen-reader-text">unhide</span>
                        unhide
                    </span>
                </span>
            </div>
        </div>
        <hr style="clear:both">
        <div class="picscontainer gallery">
            <span class="slider-back arrow">&lt;</span><span class="slider-info"></span><span class="slider-forward arrow">&gt;</span>
            <div class="swipe">
                <div class="swipe-wrap">
                    <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                </div>
            </div>
        </div>
        <div class="infocontainer"></div>
        <hr style="clear:both">
        <div class="timecontainer"></div>
        <a class="viewpostinglink" href="{PostingURL}" target="_blank">view posting</a>
        <div class="contenttoggle">
            <a class="moreinfo">more info</a>
            <a class="showpics">show images</a>
        </div>
    </div>
</script>
<script type="text/template" id="popuptemplate">
    <div id="mapbubble" class="posting">
        <ul id="clusterbubble"></ul>
        <div id="postbubble"></div>
    </div>
</script>


</body>
</html>

  recorded_at: Tue, 23 Nov 2021 04:11:40 GMT
recorded_with: VCR 6.0.0
