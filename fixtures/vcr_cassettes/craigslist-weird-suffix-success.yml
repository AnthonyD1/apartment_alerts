---
http_interactions:
- request:
    method: get
    uri: https://ipinfo.io/ip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14'
      Date:
      - Fri, 12 Nov 2021 03:16:27 GMT
      X-Envoy-Upstream-Service-Time:
      - '1'
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
    body:
      encoding: UTF-8
      string: 94.230.208.147
  recorded_at: Fri, 12 Nov 2021 03:16:27 GMT
- request:
    method: get
    uri: https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Last-Modified:
      - Fri, 12 Nov 2021 03:12:52 GMT
      Cache-Control:
      - max-age=900, public
      Date:
      - Fri, 12 Nov 2021 03:12:52 GMT
      Vary:
      - Accept-Encoding
      Content-Length:
      - '35206'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Server:
      - Apache
      Expires:
      - Fri, 12 Nov 2021 03:27:52 GMT
      Set-Cookie:
      - cl_b=4|6dbc79a095aab69cdc70d60eb7ad46eb2493131f|1636686990X6kZo;path=/;domain=.craigslist.org;secure;expires=Fri,
        01-Jan-2038 00:00:00 GMT
      Strict-Transport-Security:
      - max-age=63072000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html>
<head>
    
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta property="og:site_name" content="craigslist">
	<meta name="twitter:card" content="preview">
	<meta property="og:title" content="miami / dade apartments / housing for rent - craigslist">
	<meta name="description" content="miami / dade apartments / housing for rent - craigslist">
	<meta property="og:description" content="miami / dade apartments / housing for rent - craigslist">
	<meta property="og:url" content="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa">
	<title>miami / dade apartments / housing for rent - craigslist</title>
	<link rel="canonical" href="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa">
	<link rel="next" href="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa?s=120">



<script type="application/ld+json" id="ld_breadcrumb_data" >
    {"@context":"https://schema.org","itemListElement":[{"item":{"name":"miami.craigslist.org","@id":"https://miami.craigslist.org"},"position":1,"@type":"ListItem"},{"item":{"name":"miami / dade","@id":"https://miami.craigslist.org/mdc/"},"position":2,"@type":"ListItem"},{"item":{"name":"housing","@id":"https://miami.craigslist.org/d/housing/search/mdc/hhh"},"position":3,"@type":"ListItem"},{"item":{"name":"apartments / housing for rent","@id":"https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa"},"position":4,"@type":"ListItem"}],"@type":"BreadcrumbList"}
</script>

    <style type="text/css">
        body {
            font-family: sans-serif;
        }

        #no-js,
        #unsupported-browser {
            position: fixed;
            z-index: 10000;

            top: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        #no-js p,
        #unsupported-browser p {
            color: black;
            background-color: #FA8787;
            opacity: 0.8;
            text-align: center;
            margin: 0;
            border: 0;
            padding: 1em;
        }

        #unsupported-browser {
            display: none;
        }

        .unsupported-browser #unsupported-browser {
            display: block;
        }

        .no-js header,
        .no-js form,
        .no-js .tryapp,
        .no-js .tsb,
        .unsupported-browser header,
        .unsupported-browser form,
        .unsupported-browser .tryapp,
        .unsupported-browser .tsb {
            display: none;
        }

        #curtain {
            display: none;
            position: fixed;
            z-index: 9000;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        .show-curtain #curtain {
            display: block;
        }

        #curtain .cover,
        #curtain .content {
            position: absolute;
            display: block;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
        }

        #curtain .cover {
            z-index: 1;
            background-color: white;
        }

        .show-curtain #curtain .cover {
            opacity: 0.5;
        }

        .show-curtain.clear #curtain .cover {
            opacity: 0;
        }

        .show-curtain.opaque #curtain .cover {
            opacity: 1;
        }

        #curtain .content {
            z-index: 2;
            background: transparent;
            color: #00E;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(359deg);
            }
        }

        .pacify #curtain .icom- {
            font-size: 3em;
            animation: rotate 2s infinite linear;
        }

        .pacify #curtain .icom-:after {
            content: "\eb23";
        }

        #curtain .text {
            display: none;
            font-size: 2em;
        }

        .loading #curtain .text.loading,
        .reading #curtain .text.reading,
        .writing #curtain .text.writing,
        .saving #curtain .text.saving,
        .searching #curtain .text.searching,
        .unrecoverable #curtain .text.unrecoverable,
        .message #curtain .text.message {
            display: block;
        }
    </style>


    
     
     <script src="https://www.craigslist.org/static/www/030feed3cf43bf94976c889a1a0ceb5cdd7ebafa.js"></script>
     <script>
         window.cl.init(
             'https://www.craigslist.org/static/www/',
             '',
             'www',
             'browsePostings',
             {
areaCountry: "US",
areaID: "20",
areaRegion: "FL",
catAbb: "apa",
countOfTotalText: "image {count} of {total}",
currencySymbol: "&#x0024;",
defaultLocale: "en_US",
defaultView: "grid",
expiredFavIDs: null,
imageConfig: {"1":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"4":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"0":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450"]},"3":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"2":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]}},
lessInfoText: "less info",
locString: "",
maptileBaseUrl: "//map{s}.craigslist.org/t09/{z}/{x}/{y}.png",
maxResults: 3000,
noImageText: "no image",
pID: null,
postalLat: null,
postalLon: null,
purveyorCategories: null,
searchDistance: null,
sectionAbb: "hhh",
sectionBase: "hhh",
showInfoText: "show info",
showMapTabs: 1,
showingBanished: 0,
showingFavorites: 0,
starHint: "save this post in your favorites list",
subarea: "mdc",
zoomToPosting: null
},
             0
         );
     </script>
     
</head>
<body class="no-js show-curtain opaque search has-map" >
    
    <iframe id="cl-local-storage" src="https://www.craigslist.org/static/www/localStorage-092e9f9e2f09450529e744902aa7cdb3a5cc868d.html" style="display:none;"></iframe>
    

    <div id="curtain">
        <div class="cover"></div>
        <div class="content">
            <div class="icom-"></div>
            <div class="text loading">loading</div>
            <div class="text reading">reading</div>
            <div class="text writing">writing</div>
            <div class="text saving">saving</div>
            <div class="text searching">searching</div>
            <div class="text unrecoverable">
                There was an error loading the page; please try to
                <a id="cl-unrecoverable-hard-refresh" href="#" onclick="location.reload(true);">refresh the page.</a>
            </div>
            <div class="text message"></div>
        </div>
    </div>
    <noscript id="no-js"><div>
        <p>We've detected that JavaScript is not enabled in your browser.</p>
        <p>You must enable JavaScript to use craigslist.</p>
    </div></noscript>
    <div id="unsupported-browser">
        <p>We've detected you are using a browser that is missing critical features.</p>
        <p>Please visit craigslist from a modern browser.</p>
    </div>

    <section class="page-container" id="page-top" data-areaid="20">
        <div class="bglogo"></div>
        <div class="tryapp">
    try the craigslist app &raquo;
    <a class="appstorebtn"
    href="https://play.google.com/store/apps/details?id=org.craigslist.CraigslistMobile">
        Android
    </a>
    <a class="appstorebtn"
    href="https://apps.apple.com/us/app/craigslist/id1336642410">
        iOS
    </a>
</div>
<header class="global-header wide">
   <a class="header-logo" name="logoLink" href="https://miami.craigslist.org/mdc/">CL</a>

    <nav class="breadcrumbs-container">
<form id="breadcrumbform" class="breadcrumbs-form" method="get" action="/search/mdc/apa" data-action="/search/###/apa">
    
    <ul class="breadcrumbs ">
        <li class="crumb area">
            
            <span class="no-js">
                <a href="/">south florida</a>
            </span>
                <select name="areaAbb" id="areaAbb" class="js-only">
                    <option value="miami">south florida</option>
                        <option value="keys">florida keys</option>
                        <option value="fortmyers">fort myers</option>
                        <option value="cfl">heartland FL</option>
                        <option value="lakeland">lakeland</option>
                        <option value="orlando">orlando</option>
                        <option value="sarasota">sarasota</option>
                        <option value="spacecoast">space coast</option>
                        <option value="tampa">tampa bay</option>
                        <option value="treasure">treasure coast</option>
                </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb subarea">
            <select id="subArea" name="subArea">
                <option value="">all south florida</option>
                <option value="brw">broward county</option>
                <option value="mdc" selected>miami / dade</option>
                <option value="pbc">palm beach co</option>
            </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb section">
                    <select name="catAbb" id="catAbb">
                        <option value="ccc">community</option>
                        <option value="eee">events</option>
                        <option value="sss">for sale</option>
                        <option value="ggg">gigs</option>
                        <option value="hhh" selected>housing</option>
                        <option value="jjj">jobs</option>
                        <option value="rrr">resumes</option>
                        <option value="bbb">services</option>
                    </select>
                <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb category">
            <select id="subcatAbb" class="js-only">
                <option value="hhh">all</option>
                    <option value="apa" selected>apartments / housing for rent</option>
                    <option value="swp">housing swap</option>
                    <option value="off">office &amp; commercial</option>
                    <option value="prk">parking &amp; storage</option>
                    <option value="reb">real estate - by broker</option>
                    <option value="reo">real estate - by owner</option>
                    <option value="roo">rooms &amp; shares</option>
                    <option value="sub">sublets &amp; temporary</option>
                    <option value="vac">vacation rentals</option>
                    <option value="hou">wanted: apts</option>
                    <option value="rew">wanted: real estate</option>
                    <option value="sha">wanted: room/share</option>
                    <option value="sbw">wanted: sublet/temp</option>
            </select><span class="no-js">apartments / housing for rent</span>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb no-js">
            <input type="submit" value="go">
        </li>
    </ul>
</form>
    </nav>

<div class="userlinks">
    <ul class="user-actions">
        <li class="user post">
            <a href="https://post.craigslist.org/c/mia">post</a>
        </li>
        <li class="user account">
            <a href="https://accounts.craigslist.org/login/home">account</a>
        </li>
    </ul>
    <ul class="user-favs-discards">
        <li class="user">
            <div class="favorites">
                <a href="#" class="favlink"><span class="icon icon-star fav" aria-hidden="true"></span><span class="fav-number">0</span><span class="fav-label"> favorites</span></a>
            </div>
        </li>
        <li class="user discards">
            <div class="to-banish-page">
                <a href="#" class="to-banish-page-link">
                    <span class="icon icon-trash red" aria-hidden="true"></span>
                    <span class="banished_count">0</span>
                    <span class="discards-label"> hidden</span>
                </a>
            </div>
        </li>
    </ul>
</div>

</header>
<header class="global-header narrow">
   <a class="header-logo" href="https://miami.craigslist.org/mdc/">CL</a>
    <nav class="breadcrumbs-container">

    <h1 class="breadcrumbs">

miami / dade            &gt;

apartments / housing for rent    </h1>


    </nav>
    <span class="linklike show-wide-header">...</span>
</header>


        <form id="searchform" class="search-form" action="/d/apartments-housing-for-rent/search/mdc/apa" >
            <div class="querybox">
                <div class="form-tab js-only"><span class="search-open" title="hide search">&laquo;</span><span class="search-closed" title="show search">&raquo;</span></div>
                <input type="text" placeholder="search apartments / housing for rent" name="query"
                    id="query" value="" autocorrect="off" class="flatinput ui-autocomplete-input"
                    autocapitalize="off" autocomplete="off" data-autocomplete="search">

                <button type="submit" class="searchbtn">
                    <span class="icon icon-search" aria-hidden="true"></span>
                    <span class="screen-reader-text">press to search craigslist</span>
                </button>
                    <div class="savealert">
                        <a class="saveme" data-action="save"  href="https://accounts.craigslist.org/savesearch/save?URL=https%3A%2F%2Fmiami%2Ecraigslist%2Eorg%2Fd%2Fapartments%2Dhousing%2Dfor%2Drent%2Fsearch%2Fmdc%2Fapa"  title="save this search" >save search</a>
                    </div>
            </div>

            <div class="search-options-container">
    <h1 class="cattitle">
            <a href="/d/apartments-housing-for-rent/search/mdc/apa" title="clear all search parameters" class="reset">apartments / housing for rent</a>
    </h1>
    <div class="search-options-header linklike">
        <div class="icon icon-toggle-gear" aria-hidden="true"></div>
        options<span class="options-close">close</span>
    </div>
    <input id="excats" type="hidden" name="excats">
    <div class="search-options">
        <div class="searchgroup categories">
        </div>
        <input type="hidden" name="userid" value="" />





        <div class="searchgroup" id="basic-bools">
            <ul>
    <li>
       <label class="srchType">
           <input type="checkbox" name="srchType" class="" value="T" >
           search titles only
       </label>
    </li>
    <li>
       <label class="hasPic">
           <input type="checkbox" name="hasPic" class="autosubmit" value="1" >
           has image
       </label>
    </li>
    <li>
       <label class="postedToday">
           <input type="checkbox" name="postedToday" class="autosubmit" value="1" >
           posted today
       </label>
    </li>
    <li>
       <label class="bundleDuplicates">
           <input type="checkbox" name="bundleDuplicates" class="autosubmit" value="1" >
           bundle duplicates
       </label>
    </li>
</ul>

                <ul class="js-only nearbyAreas ">

                </ul>
        </div>

            <div class="searchgroup">
                <span class="searchfieldlabel">miles from location</span>
                <input size="5" maxlength="5" inputmode="numeric"
                    class="flatinput searchInput search_distance" placeholder="miles"
                    name="search_distance"
                    value=""
                />
                <input type="text" class="flatinput searchInput postal" placeholder="from zip"
                    size="7" name="postal" value="">
                <span class="icon icon-locate"></span>
            </div>


    <div class="searchgroup minmax price" id="price">
<span class="searchfieldlabel">price</span>
    <input type="tel" name="min_price" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="max_price" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>


  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bedrooms</span>
    <select name="min_bedrooms" class="autosubmit">
      <option value="">min</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bedrooms" class="autosubmit">
      <option value="">max</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bathrooms</span>
    <select name="min_bathrooms" class="autosubmit">
      <option value="">min</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bathrooms" class="autosubmit">
      <option value="">max</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

    <div class="searchgroup minmax " id="">
<span class="searchfieldlabel">ft<sup>2</sup></span>
    <input type="tel" name="minSqft" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="maxSqft" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>

<div class="searchgroup">
  <span class="searchfieldlabel">availability</span>
  <select class="autosubmit" name="availabilityMode">
        <option value="0">all dates</option>
        <option value="1">within 30 days</option>
        <option value="2">beyond 30 days</option>
 </select>
</div>

<div class="searchgroup search-group-checkbox">
<label class="pets_cat">
        <input type="checkbox" name="pets_cat" value="1" class="autosubmit" />
    cats ok
</label><br>
<label class="pets_dog">
        <input type="checkbox" name="pets_dog" value="1" class="autosubmit" />
    dogs ok
</label><br>
<label class="is_furnished">
        <input type="checkbox" name="is_furnished" value="1" class="autosubmit" />
    furnished
</label><br>
<label class="no_smoking">
        <input type="checkbox" name="no_smoking" value="1" class="autosubmit" />
    no smoking
</label><br>
<label class="wheelchaccess">
        <input type="checkbox" name="wheelchaccess" value="1" class="autosubmit" />
    wheelchair access
</label><br>
<label class="airconditioning">
        <input type="checkbox" name="airconditioning" value="1" class="autosubmit" />
    air conditioning
</label><br>
<label class="ev_charging">
        <input type="checkbox" name="ev_charging" value="1" class="autosubmit" />
    EV charging
</label><br>
<label class="application_fee">
        <input type="checkbox" name="application_fee" value="1" class="autosubmit" />
    no application fee
</label><br>
<label class="broker_fee">
        <input type="checkbox" name="broker_fee" value="1" class="autosubmit" />
    no broker fee
</label><br>
</div>

<div class="searchgroup search-group-multi_checkbox">
<div class="search-attribute hide-list" data-attr="housing_type">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> housing type
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="housing_type_1" name="housing_type" class="multi_checkbox" value="1" type="checkbox"
                     />
                    apartment
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_2" name="housing_type" class="multi_checkbox" value="2" type="checkbox"
                     />
                    condo
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_3" name="housing_type" class="multi_checkbox" value="3" type="checkbox"
                     />
                    cottage/cabin
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_4" name="housing_type" class="multi_checkbox" value="4" type="checkbox"
                     />
                    duplex
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_5" name="housing_type" class="multi_checkbox" value="5" type="checkbox"
                     />
                    flat
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_6" name="housing_type" class="multi_checkbox" value="6" type="checkbox"
                     />
                    house
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_7" name="housing_type" class="multi_checkbox" value="7" type="checkbox"
                     />
                    in-law
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_8" name="housing_type" class="multi_checkbox" value="8" type="checkbox"
                     />
                    loft
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_9" name="housing_type" class="multi_checkbox" value="9" type="checkbox"
                     />
                    townhouse
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_10" name="housing_type" class="multi_checkbox" value="10" type="checkbox"
                     />
                    manufactured
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_11" name="housing_type" class="multi_checkbox" value="11" type="checkbox"
                     />
                    assisted living
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_12" name="housing_type" class="multi_checkbox" value="12" type="checkbox"
                     />
                    land
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="laundry">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> laundry
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="laundry_1" name="laundry" class="multi_checkbox" value="1" type="checkbox"
                     />
                    w/d in unit
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_4" name="laundry" class="multi_checkbox" value="4" type="checkbox"
                     />
                    w/d hookups
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_2" name="laundry" class="multi_checkbox" value="2" type="checkbox"
                     />
                    laundry in bldg
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_3" name="laundry" class="multi_checkbox" value="3" type="checkbox"
                     />
                    laundry on site
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_5" name="laundry" class="multi_checkbox" value="5" type="checkbox"
                     />
                    no laundry on site
                </label>
            </li>



    </ul>
</div>
<div class="search-attribute hide-list" data-attr="parking">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> parking
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="parking_1" name="parking" class="multi_checkbox" value="1" type="checkbox"
                     />
                    carport
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_2" name="parking" class="multi_checkbox" value="2" type="checkbox"
                     />
                    attached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_3" name="parking" class="multi_checkbox" value="3" type="checkbox"
                     />
                    detached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_4" name="parking" class="multi_checkbox" value="4" type="checkbox"
                     />
                    off-street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_5" name="parking" class="multi_checkbox" value="5" type="checkbox"
                     />
                    street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_6" name="parking" class="multi_checkbox" value="6" type="checkbox"
                     />
                    valet parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_7" name="parking" class="multi_checkbox" value="7" type="checkbox"
                     />
                    no parking
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="rent_period">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> rent period
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="rent_period_1" name="rent_period" class="multi_checkbox" value="1" type="checkbox"
                     />
                    daily
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_2" name="rent_period" class="multi_checkbox" value="2" type="checkbox"
                     />
                    weekly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_3" name="rent_period" class="multi_checkbox" value="3" type="checkbox"
                     />
                    monthly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_4" name="rent_period" class="multi_checkbox" value="4" type="checkbox"
                     />
                    yearly
                </label>
            </li>



    </ul>
</div>
</div>


            <div class="searchgroup">
                    <div class="searchfieldlabel">open house date</div>
                <select class="autosubmit" id="sale_date" name="sale_date">
                    <option>all dates</option>
                        <option value="2021-11-11">nov 11 - today</option>
                        <option value="2021-11-12">nov 12 - tomorrow</option>
                        <option value="2021-11-13">nov 13 - saturday</option>
                        <option value="2021-11-14">nov 14 - sunday</option>
                        <option value="2021-11-15">nov 15 - monday</option>
                        <option value="2021-11-16">nov 16 - tuesday</option>
                        <option value="2021-11-17">nov 17 - wednesday</option>
                        <option value="2021-11-18">nov 18 - thursday</option>
                        <option value="2021-11-19">nov 19 - friday</option>
                        <option value="2021-11-20">nov 20 - saturday</option>
                        <option value="2021-11-21">nov 21 - sunday</option>
                        <option value="2021-11-22">nov 22 - monday</option>
                        <option value="2021-11-23">nov 23 - tuesday</option>
                        <option value="2021-11-24">nov 24 - wednesday</option>
                        <option value="2021-11-25">nov 25 - thursday</option>
                        <option value="2021-11-26">nov 26 - friday</option>
                        <option value="2021-11-27">nov 27 - saturday</option>
                        <option value="2021-11-28">nov 28 - sunday</option>
                        <option value="2021-11-29">nov 29 - monday</option>
                        <option value="2021-11-30">nov 30 - tuesday</option>
                        <option value="2021-12-01">dec 1 - wednesday</option>
                        <option value="2021-12-02">dec 2 - thursday</option>
                        <option value="2021-12-03">dec 3 - friday</option>
                        <option value="2021-12-04">dec 4 - saturday</option>
                        <option value="2021-12-05">dec 5 - sunday</option>
                        <option value="2021-12-06">dec 6 - monday</option>
                        <option value="2021-12-07">dec 7 - tuesday</option>
                        <option value="2021-12-08">dec 8 - wednesday</option>
                </select>
            </div>
        <div class="searchgroup resetsearch">
            <a href="/d/apartments-housing-for-rent/search/mdc/apa" title="clear all search parameters" class="reset linklike">reset</a>
            <button type="submit" class="searchlink linklike">update search</button>
        </div>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>
    </div>
</div>


            <div class="search-legend">
<div class="search-view js-only">
    <div class="dropdown dropdown-icons dropdown-arrows dropdown-view" role="toolbar" aria-label="view options" aria-expanded="false">
        <ul class="dropdown-list">
            <li class="dropdown-item mode sel">
                <button title="show results in a list" data-selection="list" id="listview">
                    <span class="view-list icon"></span>list
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results in a list with thumbnail pictures"  data-selection="pic"  id="picview" >
                    <span class="view-thumb icon"></span>thumb
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results side-by-side with larger pictures" data-selection="grid" id="gridview">
                    <span class="view-gallery icon"></span>gallery
                </button>
                <span class="toggle-arrow"></span>
            </li>
                <li class="dropdown-item mode">
                    <button title="show results on a map"  data-selection="map"  id="mapview" >
                        <span class="view-map icon"></span>map
                    </button>
                    <span class="toggle-arrow"></span>
                </li>
        </ul>
    </div>
</div>
                <div class="search-sort" >
    <div class="dropdown dropdown-sort dropdown-arrows" data-default-sort="date" role="toolbar" aria-label="sort options" aria-expanded="false">
        <ul class="dropdown-list">

            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="upcoming" title="show upcoming open houses" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=upcoming&amp;">upcoming <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode sel" aria-selected="true">
                <a data-selection="date" title="show newest matches first" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=date&amp;">newest <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="priceasc" title="sort by price, lowest to highest" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=priceasc&amp;">price ↑ <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="pricedsc" title="sort by price, highest to lowest" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=pricedsc&amp;">price ↓ <span class="toggle-arrow"></span></a>
            </li>

        </ul>
    </div>
</div>

                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">3000</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/mdc/apa" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/mdc/apa" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">3000</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/mdc/apa?s=120" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

                
            </div>
            <div class="content" id="sortable-results" >
                <section class="favlistsection">
                    <section class="favlistinfo">
                    </section>
                    <section class="banishlistinfo">
                    </section>
                </section>


                    


<div class="open-map-view-button">
    <span>see in map view</span>
</div>
<div id="mapcontainer" data-arealat="25.773899" data-arealon="-80.193901">
    <div id="noresult-overlay"></div>
    <div id="noresult-text">
        <span class="message">No mappable items found</span>
    </div>
    <div id="map" class="loading">
        <div class="close-full-screen-map-mode-button">close fullscreen</div>
    </div>
</div>

                <ul class="rows" id="search-results">
                             <li class="result-row" data-pid="7406803401">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-2bd-2ba-sought-after/7406803401.html" class="result-image gallery" data-ids="3:00r0r_lls82ifocCuz_0pO0hW,3:00707_cIsBJkPa4oDz_0pO0gv,3:00n0n_fv0t6gvL6kkz_0pO0hc,3:00F0F_aap2ebnFAFEz_0pO0gK,3:00i0i_b6UYSNcLw0zz_0pO0hc,3:00A0A_e98l6sL3Wobz_0cT0jm,3:01717_jRsu4OsE6hgz_0cT0jm,3:00Z0Z_lGRbEY1WOLpz_0pO0hc,3:00B0B_ePPS9srqBODz_0cT0jm,3:00202_32dB8QOPflDz_0cT0jm">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 22:08" title="Thu 11 Nov 10:08:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-2bd-2ba-sought-after/7406803401.html" data-id="7406803401" class="result-title hdrlnk" id="postid_7406803401" >Beautiful 2BD/2BA sought after Southwest corner unit. Easy to show°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (50 Biscayne Blvd #3611 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405522982" data-repost-of="7400496735">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7405522982.html" class="result-image gallery" data-ids="3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00202_jIkCrf1vetvz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00808_iXudo37GRAZz_0lM0ey,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$2,450</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 22:06" title="Thu 11 Nov 10:06:38 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7405522982.html" data-id="7405522982" class="result-title hdrlnk" id="postid_7405522982" >*** GREAT LOCATION *** MOVE WITH ONLY $1000 SECURITY DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,450</span>

                <span class="housing">
                    1br -
                    683ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406802705">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-welcome-to-modern-living-with/7406802705.html" class="result-image gallery" data-ids="3:01717_9sCSDgbkEyCz_0cU0jm,3:00m0m_22sF4RB2gbHz_0pO0ev,3:00E0E_aOaK6fWsGxoz_0gw0co,3:00I0I_7pDAPDcqsxsz_0gw0co,3:00v0v_gmwdawqarmDz_0gw0co,3:00H0H_auc78sz8dW1z_0gw0co,3:00p0p_5b3vsAco1ZJz_0gw0co">
                <span class="result-price">$4,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 22:05" title="Thu 11 Nov 10:05:19 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-welcome-to-modern-living-with/7406802705.html" data-id="7406802705" class="result-title hdrlnk" id="postid_7406802705" >Welcome to modern living with amazing views in this spectacular condo°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,650</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (488 NE 18th St #2711 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396129524" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7396129524.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:59" title="Thu 11 Nov 09:59:51 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7396129524.html" data-id="7396129524" class="result-title hdrlnk" id="postid_7396129524" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396780994" data-repost-of="6615856434">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-2-with-d-pool-gym-parking/7396780994.html" class="result-image gallery" data-ids="1:00q0q_dCkdS2Mi36n,1:01111_YgPoL00Ovd,1:00b0b_hSBSmt32jq8,1:00y0y_ihOBnpzq46A,1:00B0B_duz2ILchHPg,1:00U0U_1uvMGVQlvZO,1:00N0N_iKekjN0VpDm,1:00505_4iUtlxRrqrE,1:00A0A_kO02khaXYq1,1:00s0s_f5LIhs9D90b,1:00R0R_lzaFYv6LAe6,1:00404_1finoRYLg8e,1:00W0W_7kGRGWpAdlh,1:00404_a5sCIptMdyK,1:00p0p_1wjt5uZetHT,1:00Z0Z_3ilrZZLpgYU,1:00606_lXfrf5rE72I,1:00404_8IJSDnsEcdM,1:00x0x_eWDLSxyXga0,1:00A0A_4vpmqG8Otmd,1:00g0g_9QkAME6tEJ3,1:01717_jlkFFF34Cg3,1:00N0N_fLxAARvDU0r,1:00c0c_86gk0VEKOAC">
                <span class="result-price">$2,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:59" title="Thu 11 Nov 09:59:07 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-2-with-d-pool-gym-parking/7396780994.html" data-id="7396780994" class="result-title hdrlnk" id="postid_7396780994" >LUXURY 2/2 WITH W/D, POOL, GYM, PARKING, ETC....(ONLY $750 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,500</span>

                <span class="housing">
                    2br -
                    1250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DADELAND miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396762061" data-repost-of="6837042272">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-pool-gym/7396762061.html" class="result-image gallery" data-ids="1:00303_hbXqOVZYLuI,1:00505_hE5goop1WH5,1:00z0z_26TB9473csn,1:00S0S_fQv89mn7xic,1:00y0y_7z20uuK10X6,1:00U0U_lLkOJlTHKZ3,1:00J0J_jTnZGeyL07F,1:00d0d_f92WQBBsj36,1:00C0C_dthDaHgXGSV,1:00B0B_a6UtXAqf8PR,1:00V0V_gxoqpn1plWb,1:00f0f_2sMzc60qzZ2,1:01010_3ajOkGejKOb,1:00j0j_7tjw6Dk3R3T,1:00M0M_fNj6dfZyKiP,1:00w0w_fsUR91V1hHP,1:00Q0Q_gz9jzi5c57s,1:00606_2fEwEDcs1bm,1:00W0W_bgHS76su9Fm,1:00C0C_jk9VJyw60w,1:00D0D_hwdEzUo3lq5,1:00000_hXe9N0goV44">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:59" title="Thu 11 Nov 09:59:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-pool-gym/7396762061.html" data-id="7396762061" class="result-title hdrlnk" id="postid_7396762061" >GORGEOUS 2/2 WITH W/D, POOL, GYM, PARKING, ETC...( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    2br -
                    1020ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (BLUE LAGOON miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396761838" data-repost-of="6951021862">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7396761838.html" class="result-image gallery" data-ids="1:00h0h_3cNLjMlif2S,1:00N0N_aKWEGRXD8mo,1:00u0u_lOD8ksEVrnS,1:00808_oBTECNb7g8,1:00606_9zzUESVdsJU,1:00g0g_jTQV2R2sjV8,1:00W0W_lpYPF2Xc2Rd,1:00S0S_fQJpuHhad49,1:01515_5S3kuWoN4uy,1:00w0w_7JdHphW5HfH,1:00G0G_5qCGbxaExzU">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:56 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7396761838.html" data-id="7396761838" class="result-title hdrlnk" id="postid_7396761838" >GORGEOUS 2/2 WITH W/D, PARKING, POOL, GYM.. ( ONLY $1500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (BRICKELL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396772923" data-repost-of="6622337040">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7396772923.html" class="result-image gallery" data-ids="1:00h0h_3Kh7Bb4GkXI,1:00U0U_4p14SknioZs,1:00808_lERAMdBiSwo,3:00707_5JW7k9NgzH4_0jK0d3,3:00W0W_dT3IH1hKhuZ_0jH0cV,1:01313_kWBwpnfUBRb,3:00202_9p6N39bGprG_0jN0cS,3:00303_32ExJ7ur504_0jV0d9,3:00m0m_3duCpZHoDVd_0jN0dj,1:00i0i_iqVlCt9Fu9M,1:00R0R_3659HOQ9gz2,1:00d0d_bRKzehoNWSP,1:00w0w_5v32kpZmbxt,1:00A0A_g4sYDVv7iaa,1:00I0I_dG3ldh0Sl4T,1:00k0k_kl1z7pKVKHQ,1:00x0x_9KYkcuUVbf5,1:00C0C_j2g6f9j7igG,1:00606_gjMJw6Gr7Rg,1:00q0q_jKd5ek2lD9N,1:00V0V_1CwRrb2OpfW,3:00G0G_bOa5RlqWpwl_0jO0cW">
                <span class="result-price">$2,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:51 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7396772923.html" data-id="7396772923" class="result-title hdrlnk" id="postid_7396772923" >GORGEOUS 1/1 WITH W/D, PARKING, POOL, GYM, ETC..( BAD CREDIT OK )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,300</span>

                <span class="housing">
                    1br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (BRICKELL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395887586" data-repost-of="6056868170">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-with-d-parking-pool-gym-only/7395887586.html" class="result-image gallery" data-ids="1:00L0L_1MNR90w0oyq,1:00j0j_7C8TrIiTnKY,1:00707_gEhRYhlJRZd,1:00r0r_4yxeZ9sOVAv,1:01313_q1SEA8ly1V,1:01616_i5Knu60eaLn,1:00w0w_kNRBgDLuaN1,1:00J0J_j0OsRAFjvXN,1:00w0w_bkqdasjDsYg,1:00E0E_8Metj92G5eZ,1:00I0I_iN40DOuEXTV,1:00T0T_feqDhb7oWd0,1:01111_gfntgQWRmTR,1:00H0H_c39tS1tg6UK,1:00o0o_alsz8TD1x87,1:00505_9a5zCkkkYXl,1:00D0D_dr2jcgJ1cJp,1:00i0i_aKCqUSgAIHe,1:00Q0Q_37bnfW9OcCW,1:00f0f_ilf2EEwSY5F,1:00X0X_3XbCQexSPuD,1:01414_krTB4am90hM,1:00Q0Q_91EuyJt241A,1:00505_kYeNUjvb5K1">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:37 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-with-d-parking-pool-gym-only/7395887586.html" data-id="7395887586" class="result-title hdrlnk" id="postid_7395887586" >GORGEOUS 3/2 WITH W/D , PARKING, POOL, GYM.. ( ONLY $600 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    3br -
                    1270ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DORAL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7397129038" data-repost-of="7196057741">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-luxury-2-with-d-parking-pool/7397129038.html" class="result-image gallery" data-ids="3:00K0K_4VBNiutlNHz_0sK0gF,3:01616_fPBXk3kiVYj_0sG0ac,3:00r0r_h63Qt0rUGb6_0m60ek,3:00o0o_5nXChOc9Yiz_0sF0gL,3:00101_iyHAdJOIRvE_0sF0h0,3:00U0U_bra3IkAd9rG_0lS0el,3:00202_9kd9qsosO4e_0m30es,3:00z0z_knkYvW8lPIO_0lO0er,3:00v0v_9clfFa35vXl_09G0eu,3:00D0D_1MVTNfbNUnH_0sz0gL,3:00g0g_5bKeeBjeAr3_0sK0gZ,3:00X0X_afuDu9fuZlj_0sH0gE,3:00j0j_lSsk1fv3YjQ_0lL0ep,3:00u0u_1cHoPlIgNon_0sB0gR,3:01414_29sFCZyK900_0sz0gB,3:00808_e3hD4OUP66Q_0sE0gA,3:00X0X_3WEmgHvCxRE_0sI0hd,3:00E0E_lV816JJ1IZ6_0so0gy,3:00N0N_8Ai5FcBBAj6_0sI0gP,3:00x0x_d22SQZQjrcY_0sx0gF,3:00D0D_e7XtIWSr8Do_0sQ0gW,3:00a0a_ieBYQCe4DEk_0sD0gI,3:00707_6gFqcejwnyI_0lT0ej,3:00O0O_cWKGOiX0DZM_0sG0gU">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:34 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-luxury-2-with-d-parking-pool/7397129038.html" data-id="7397129038" class="result-title hdrlnk" id="postid_7397129038" >LUXURY 3/2 WITH W/D, PARKING, POOL, GYM, ETC.. ( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    3br -
                    1400ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (HIALEAH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396307321" data-repost-of="6717401630">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7396307321.html" class="result-image gallery" data-ids="1:00I0I_9JoAfcvoelP,1:00q0q_jTafpT4XpOR,1:00303_8Zx0etRM1s1,1:01515_9Weet1jhBv4,1:00k0k_iDCuyvxGRfo,1:00c0c_7PpEeVFChvU,1:00D0D_5FqvS0vyWdw,1:00202_6konYXePYeL,1:00303_5JtRvhiwaSx,1:00J0J_1CQE9U8OEUo,1:00000_32HhF6Tf4GY,1:00O0O_as6Skqg5XRT,1:01010_7Hac05foXhW,1:00I0I_4OBWzvuIAh5,1:00808_86U2sYvuLnQ,1:00A0A_cL0PlPJy0hh,1:00u0u_8f2nbnXc9ZU,1:00b0b_6SB3BRunXtd,1:00d0d_3wtfJ36PurJ,1:00505_8CtVu7RrRdT,1:00Q0Q_llDs4t6dFFT,1:00C0C_epZMUw7uMY8,1:00b0b_9FvDRCEQL55">
                <span class="result-price">$2,070</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:30 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7396307321.html" data-id="7396307321" class="result-title hdrlnk" id="postid_7396307321" >GORGEOUS 1/1 WITH W/D, PARKING, POOL, GYM ETC (ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,070</span>

                <span class="housing">
                    1br -
                    731ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (KENDALL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396752264" data-repost-of="6622484863">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7396752264.html" class="result-image gallery" data-ids="1:00h0h_63Q65p7XLhV,1:00O0O_f1syDTggcwD,1:00z0z_8c854HAuV5t,1:00x0x_3JT3ITaqnrF,1:00y0y_aY80o1POjDt,1:00a0a_eLBWPGfhQvs,1:00N0N_bqZcjeoTLKw,1:00H0H_gZFGjJIEQ8v,1:00m0m_ddjtUUiQzCW,1:00R0R_h0qkfzTEae6,1:00f0f_9XpXPvhRpnX,1:00H0H_lDTn7PznuKT,1:00n0n_ldQXOjFU0uL,1:00a0a_6TYah9K2xBn,1:00L0L_4SliE3Cp3Jl,1:00Y0Y_kyelq9s0KvZ,1:00H0H_65FTnDNMFYv,1:00b0b_hABKyjkDw8d,1:01717_bZMLT6Feslp,1:00B0B_eAAIwyLbmil">
                <span class="result-price">$1,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:13 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-1-with-d-parking-pool/7396752264.html" data-id="7396752264" class="result-title hdrlnk" id="postid_7396752264" >GORGEOUS 1/1 WITH W/D, PARKING, POOL, GYM,(NO DEPOSIT OR LAST MONTH )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,750</span>

                <span class="housing">
                    1br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (FONTAINEBLEAU miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396752393" data-repost-of="6038295417">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-1-with-d-parking-pool-gym-only/7396752393.html" class="result-image gallery" data-ids="1:00w0w_7BPs1YHRKZ1,1:01010_itpE3NJx00s,1:00707_d9wQz4rb57o,1:00w0w_c1dK9opDBnF,1:00E0E_3tcuap84Ez6,1:00q0q_9FdPxupk6QG,1:00W0W_lOVULhcBDEH,1:00O0O_22GhYOJP2Pi,1:00b0b_8nkfQ3bVoiY,1:01313_4FR1nw5uEwV,1:00b0b_7x4pkMxNVo0,1:01414_2Jp1fssSDSu,1:00i0i_ehyB8LAytqL,1:00p0p_8R04o0DWoIY,1:00101_2mjEwT8JbFH,1:00n0n_fMf9Mknz162,1:00j0j_jM1Ql9APJ6S,1:00m0m_75javHuOvWW,1:00909_8xDw3lbVvSM,1:00x0x_fO0MuUFpO0a,1:00a0a_cV7OWWRd61c">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:06 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-1-with-d-parking-pool-gym-only/7396752393.html" data-id="7396752393" class="result-title hdrlnk" id="postid_7396752393" >GORGEOUS 1/1 WITH W/D , PARKING, POOL, GYM( ONLY 2 MONTHS TO MOVE IN )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    1br -
                    700ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (BRICKELL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396618128" data-repost-of="7129673244">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-1-with-d-parking-pool-gym/7396618128.html" class="result-image gallery" data-ids="3:00E0E_dMBTcOSYx1W_0jD0cR,3:00D0D_9dP4FIZrZQm_0jI0cV,3:00Z0Z_jWkYEedv50w_0sw0mP,3:00O0O_hfTXGzdtdW1_0jA0d5,3:00M0M_73XDBcGbguN_0jX0da,3:00808_63hX1TAsh2d_0jI0cX,3:00d0d_9gzGeSYMURZ_0jD0cT,3:00d0d_85AI6lmsPan_0jI0d3,3:00w0w_eWhu7zkw3Jm_0jK0cV,3:01616_4z90Urn3Tyy_0jH0cS,3:00101_c8OkPb5nMhU_0jT0d5,3:00g0g_9xV18fZptrb_0jN0cY,3:00q0q_lvcbqTVFRVl_0jL0cQ,3:00K0K_fofBZ9TVpRM_0jN0d0,3:00V0V_6zMwNqWNUMe_0jz0cS,3:00P0P_1RwbRwlroqg_0jJ0d5,3:00d0d_ilS4vc3ruF2_0jF0cV">
                <span class="result-price">$2,795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:58" title="Thu 11 Nov 09:58:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-1-with-d-parking-pool-gym/7396618128.html" data-id="7396618128" class="result-title hdrlnk" id="postid_7396618128" >LUXURY 1/1 WITH W/D, PARKING, POOL, GYM, ETC.. ( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,795</span>

                <span class="housing">
                    1br -
                    783ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395671260" data-repost-of="6828982161">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-2-with-d-pool-gym-parking/7395671260.html" class="result-image gallery" data-ids="1:00000_kDjrq7FdNs7,1:01616_2p9ClHZPmy8,1:00I0I_kzbBvMKRHDr,1:00t0t_iMfkbmljn9o,1:00i0i_51idZBL62QZ,1:00G0G_6HLOhmYTReY,1:00U0U_kCv5XbuatVk,1:00b0b_3cupKqqFmf8,1:00H0H_gPbqVtaivs3,1:00p0p_3LonwPlygGW,1:00z0z_fUUE0A5aS4l,1:00L0L_1o3F1YaTYUg,1:00b0b_it3pJ2srZw0,1:00j0j_csAXQAPpyX3,1:00z0z_45qlwrCLYm6,1:00L0L_1GF7S0tf3ZT">
                <span class="result-price">$2,990</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:57" title="Thu 11 Nov 09:57:55 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-2-with-d-pool-gym-parking/7395671260.html" data-id="7395671260" class="result-title hdrlnk" id="postid_7395671260" >LUXURY 2/2 WITH W/D, POOL, GYM, PARKING, ETC.( ONLY $500 DEPOSIT)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,990</span>

                <span class="housing">
                    2br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396754435" data-repost-of="5829451967">

        <a href="https://miami.craigslist.org/mdc/apa/d/luxury-studio-with-d-pool-gym-parking/7396754435.html" class="result-image gallery" data-ids="1:00Q0Q_9V4vLk1y1Y7,1:00y0y_34WBdPli1od,1:00n0n_faHUB25ZzlJ,1:00u0u_eBCT2092Khf,1:00R0R_cPMyJCRGgi8,1:00101_eHl4EAmOiR4,1:00l0l_kt0km2N0Dxv,1:00M0M_6hNmyGyAZWq,1:00x0x_gQAjRA2Nx1R,1:00q0q_iHlM7b5rzSI,1:00V0V_hXROJFk49FL,1:01515_5xanAyDw5qX,1:00x0x_5IT2Zvov9Fh,1:00H0H_dcbxlUL0waf,1:00707_3R6K913j0I,1:00d0d_lCzyaVtVG87,1:01717_iTxuvh2OOLP,1:00303_1TRkNTUAqwE,1:00R0R_4hl33VAi18U,1:00C0C_736jy3oXhMt,1:00y0y_jNIwrriaEQw,1:00G0G_9FGWOE6VV7f,1:01111_8Zi5BzY357l">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:57" title="Thu 11 Nov 09:57:49 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/luxury-studio-with-d-pool-gym-parking/7396754435.html" data-id="7396754435" class="result-title hdrlnk" id="postid_7396754435" >LUXURY STUDIO WITH W/D, POOL, GYM, PARKING, ETC....( ONY 500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    540ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (BRICKELL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396717756" data-repost-of="6950585654">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-jacuzzi/7396717756.html" class="result-image gallery" data-ids="1:00E0E_gkJxV5G7vWV,1:00i0i_7Yos56XGoZC,1:01616_jDScBS1xJpn,1:00I0I_iBVZa5LA2B7,1:00N0N_3j9m8bJOmNR,1:00t0t_3elriOIdg0J,1:00T0T_d2ecHbT9hcz,1:00303_lLWcoUrUs6u,1:00505_apT88mJFMA,1:00v0v_41ddKIOwulY,1:00R0R_hWOOqSrpqGt,1:00L0L_8VRY3Akbccm,1:00x0x_58LImmf5IoI,1:00707_KnJB82bisd,1:01010_3KA9hCwzrfl,1:00505_gSN351duFJl,1:00505_3rswskyurXt,1:00x0x_lEsYZtjHNRp,1:00H0H_9gbHKerFUMz,1:01212_cWzFe1wsKMF,1:00i0i_iLPcqmjeKvF,1:00e0e_7Xm9Vm8IUEB,1:00404_kvAPWn5Dvms,1:00S0S_8ZSHyJEUGGw">
                <span class="result-price">$2,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:57" title="Thu 11 Nov 09:57:36 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-jacuzzi/7396717756.html" data-id="7396717756" class="result-title hdrlnk" id="postid_7396717756" >GORGEOUS 2/2 WITH W/D, PARKING, JACUZZI, GYM.. ( ONLY $750 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,500</span>

                <span class="housing">
                    2br -
                    1080ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (LITTLE HAVANNA / DOWTOWWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395907195" data-repost-of="6278452249">

        <a href="https://miami.craigslist.org/mdc/apa/d/luxury-2-with-d-pool-gym-parking-etc/7395907195.html" class="result-image gallery" data-ids="1:00R0R_bJQeMfwv68m,1:00909_7x5JQrbqa2B,1:00l0l_gpQwB5BDcfO,1:00L0L_gJiwixc0d71,1:01111_aD4LS4g1bon,1:00U0U_16qy2myEoRT,1:00W0W_e6659YjGtP,1:00L0L_467v8SYoxwG,1:00J0J_cKkTjp21DPV,1:00j0j_kjen8Y5EBWC,1:00P0P_b5H0pHmQXDC,1:01515_a4f2Bsm3YCt,1:00d0d_8t1HmTSDbfE,1:00000_d3jDC9DKWUr,1:01717_caqxqEJMY05,1:00K0K_jNr2rLrnRBz,1:01515_d9ndXcWqaWk,1:00y0y_e5lCg4BfKZI,1:01010_8H8grYBw7Mj,1:00A0A_aRokHRePnOM,1:00H0H_cfVEWCtArau,1:00N0N_cpD4XLZeoY1,1:00N0N_15H0rSV2OMn">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:57" title="Thu 11 Nov 09:57:17 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/luxury-2-with-d-pool-gym-parking-etc/7395907195.html" data-id="7395907195" class="result-title hdrlnk" id="postid_7395907195" >LUXURY 2/2 WITH W/D, POOL, GYM, PARKING, ETC..( ONY $1000 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    2br -
                    1000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (CORAL GABLES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406799769">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-centrally-located-in-miami-close/7406799769.html" class="result-image gallery" data-ids="3:00303_l9wZWd8IkjOz_0pO0ev,3:00i0i_6PyNy5PE1NUz_0pO0hc,3:00404_lXfK98qKKKsz_0pO0hc,3:00B0B_cBajULJqvp6z_0pO0hc,3:01414_aeTvMiThzknz_0pO0ev,3:00Y0Y_e0ZWpSDy0thz_0pO0ev">
                <span class="result-price">$5,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:53" title="Thu 11 Nov 09:53:24 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-centrally-located-in-miami-close/7406799769.html" data-id="7406799769" class="result-title hdrlnk" id="postid_7406799769" >Centrally located in Miami, Close to everything, come see now°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,000</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (50 Biscayne Blvd #3802 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405523889" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7405523889.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:53" title="Thu 11 Nov 09:53:05 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-fast/7405523889.html" data-id="7405523889" class="result-title hdrlnk" id="postid_7405523889" >*** ONLY ONE MONTH DEPOSIT *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,250</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395957848" data-repost-of="6615861433">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-2-with-d-pool-gym-parking/7395957848.html" class="result-image gallery" data-ids="1:00q0q_dCkdS2Mi36n,1:00b0b_hSBSmt32jq8,1:00y0y_ihOBnpzq46A,1:00B0B_duz2ILchHPg,1:00U0U_1uvMGVQlvZO,1:00N0N_iKekjN0VpDm,1:00A0A_kO02khaXYq1,1:00s0s_f5LIhs9D90b,1:00R0R_lzaFYv6LAe6,1:00404_1finoRYLg8e,1:00W0W_7kGRGWpAdlh,1:00R0R_WtK5ufXvKC,1:01616_1tCvkulAgCt,1:00808_lXxVtYa2Y5b,1:00404_8IJSDnsEcdM,1:00404_a5sCIptMdyK,1:00Z0Z_3ilrZZLpgYU,1:00606_lXfrf5rE72I,1:00x0x_eWDLSxyXga0,1:00A0A_4vpmqG8Otmd,1:00g0g_9QkAME6tEJ3,1:00N0N_fLxAARvDU0r,1:01717_jlkFFF34Cg3,1:00c0c_86gk0VEKOAC">
                <span class="result-price">$3,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:51" title="Thu 11 Nov 09:51:52 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-2-with-d-pool-gym-parking/7395957848.html" data-id="7395957848" class="result-title hdrlnk" id="postid_7395957848" >LUXURY 3/2 WITH W/D, POOL, GYM, PARKING, ETC....(ONLY $750 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,600</span>

                <span class="housing">
                    3br -
                    1700ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DADELAND miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7397062451" data-repost-of="6036635836">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-studio-with-d-parking-gym-pool/7397062451.html" class="result-image gallery" data-ids="1:00p0p_jNhsw8ldzhP,1:00O0O_dm1lianIBX8,1:00h0h_hG26CNAACt,1:01414_aToetkmVT75,1:00c0c_aa2SEoM5yjg,1:00R0R_d4mXjA8bViA,1:00i0i_7OKDvjdT2KS,1:00w0w_87MRfy5gwsC,1:01111_cU8svSAWQDi,1:00y0y_csEiTdh8VMs,1:00p0p_d09m14SEXVb,1:00h0h_2jAwXaXb1I8,1:00L0L_iKuksUWr6uc,1:00q0q_fQAjSO8EDsa,1:00m0m_lB5eaMBlAAJ,1:00R0R_3b2B4kKkXPY,1:01717_ej49KGkKObO,1:01414_bVnDlSIWULA,1:00e0e_f9a0n9YiqLT">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:51" title="Thu 11 Nov 09:51:48 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-studio-with-d-parking-gym-pool/7397062451.html" data-id="7397062451" class="result-title hdrlnk" id="postid_7397062451" >GORGEOUS STUDIO WITH W/D, PARKING, GYM, POOL, ( ONLY 250 DEPOSIT)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DADELAND miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7397128448" data-repost-of="7004876067">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7397128448.html" class="result-image gallery" data-ids="1:00D0D_hWCwuvPnFOU,1:00N0N_RzthOkzNDB,1:00Q0Q_kTv7hYhJFo4,1:01010_g0jnpF2zgcL,1:01515_bMUU9cCRaeX,1:00y0y_h0AWShMBDPB,1:00G0G_fzRJ0IDdhFd,1:00B0B_lOVAiHuJG2W,1:00u0u_jaEiYs5lmek,1:00404_95JVHThnKrm,1:00H0H_g6QdO2V8L5k,1:01010_17C6h4FUGAZ,1:00Y0Y_2x3ledn5L2F,1:01717_aCKSxXVAgWD,1:00m0m_aFxs8IagJJu,1:00B0B_33i1SM2ZWsQ,1:00303_lKGormIg9ZW,1:00c0c_ljgojQ14ulM,1:00q0q_g41JWJTKxEY,1:00Y0Y_cfBcfBb235u,1:00u0u_5LciAKLqOxT,1:00x0x_2c5rWYQdS3C,1:00n0n_i1b8Wt56Fkq">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:51" title="Thu 11 Nov 09:51:45 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7397128448.html" data-id="7397128448" class="result-title hdrlnk" id="postid_7397128448" >GORGEOUS 2/2 WITH W/D, PARKING, POOL, GYM.. ( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    2br -
                    1011ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (MIDTOWN / EDGEWATER miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396146203" data-repost-of="7004876067">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7396146203.html" class="result-image gallery" data-ids="1:00D0D_hWCwuvPnFOU,1:00N0N_RzthOkzNDB,1:00Q0Q_kTv7hYhJFo4,1:01010_g0jnpF2zgcL,1:01515_bMUU9cCRaeX,1:00y0y_h0AWShMBDPB,1:00G0G_fzRJ0IDdhFd,1:00B0B_lOVAiHuJG2W,1:00u0u_jaEiYs5lmek,1:00404_95JVHThnKrm,1:00H0H_g6QdO2V8L5k,1:01010_17C6h4FUGAZ,1:00Y0Y_2x3ledn5L2F,1:01717_aCKSxXVAgWD,1:00m0m_aFxs8IagJJu,1:00B0B_33i1SM2ZWsQ,1:00303_lKGormIg9ZW,1:00c0c_ljgojQ14ulM,1:00q0q_g41JWJTKxEY,1:00Y0Y_cfBcfBb235u,1:00u0u_5LciAKLqOxT,1:00x0x_2c5rWYQdS3C,1:00n0n_i1b8Wt56Fkq">
                <span class="result-price">$3,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:51" title="Thu 11 Nov 09:51:42 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-2-with-d-parking-pool/7396146203.html" data-id="7396146203" class="result-title hdrlnk" id="postid_7396146203" >GORGEOUS 2/2 WITH W/D, PARKING, POOL, GYM.. ( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,200</span>

                <span class="housing">
                    2br -
                    1011ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (MIDTOWN / EDGEWATER miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396167005" data-repost-of="6146146925">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-apt-with-d-parking-pool-gym/7396167005.html" class="result-image gallery" data-ids="1:01313_2Ybm8sk8z0n,1:00404_5swzzxB7ENJ,1:00d0d_SJxYMCgVuD,1:00J0J_bVnRySK6zrH,1:00m0m_4CBI8QJtQJT,1:00k0k_kHBR9DwLiJL,1:00z0z_8khURr1lNZN,1:00Q0Q_e1eEeVz0Zn4,1:00M0M_kLUJNFRjMD7,1:00000_bn72QUHAFTt,1:00M0M_7G7mO27auNr,1:00000_6WFn2RJWwuz,1:00c0c_fy50He22qN1,1:00k0k_49kwMyoyqAH,1:00S0S_38ix6PRQiBi,1:00404_bztrUN2cIe,1:00v0v_gYnk4245eDX,1:00m0m_ej1UtQyD7vd,1:00I0I_i0TuKWp5QRu,1:00I0I_huMf5HoXlG7,1:00j0j_5AdSF9t1wv1,1:00A0A_6ULejd4tLUc,1:01212_4pRaVMK0KgZ">
                <span class="result-price">$3,125</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:51" title="Thu 11 Nov 09:51:39 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-apt-with-d-parking-pool-gym/7396167005.html" data-id="7396167005" class="result-title hdrlnk" id="postid_7396167005" >GORGEOUS 2/2 APT WITH W/D, PARKING, POOL, GYM, ETC.( ONLY 700 DEPOSIT)</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,125</span>

                <span class="housing">
                    2br -
                    1264ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (AVENTURA miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395874088" data-repost-of="5838567842">

        <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-with-d-parking-pool-gym-only/7395874088.html" class="result-image gallery" data-ids="1:01212_3BUgiglNuFE,1:00v0v_4oP2LV8heZj,1:00t0t_e7yVxOIqsJi,1:00w0w_3MCt1AM83kc,1:00505_ex4Ywlh70yS,1:00i0i_d7sIDYhrRDX,1:00W0W_9sPpWTCdX7K,1:00z0z_iQ8QGjNvqxK,1:00L0L_hWpODGJjlbu,1:00707_bL29qZJcyPl,1:00g0g_jFGsvTbavza,1:00A0A_fHPjafqgFe3,1:00V0V_hYBUqIhYZDH,1:01414_3ZeeweVcNyi,1:00808_oh0bkuvjsZ,1:00m0m_6SwmHsQGVmn,1:00X0X_2VZpATBw0gO">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:51" title="Thu 11 Nov 09:51:33 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/gorgeous-2-with-d-parking-pool-gym-only/7395874088.html" data-id="7395874088" class="result-title hdrlnk" id="postid_7395874088" >GORGEOUS 3/2 WITH W/D, PARKING, POOL, GYM( ONLY 2 MONTH TO MOVE IN )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    3br -
                    1200ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (KENDALL miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402713118" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402713118.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:46" title="Thu 11 Nov 09:46:20 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402713118.html" data-id="7402713118" class="result-title hdrlnk" id="postid_7402713118" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406797778">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-proof-of-income-no-credit-will/7406797778.html" class="result-image gallery" data-ids="3:00R0R_CAEukqNPYVz_0ak07K,3:00707_fWnFhox1Lj8z_0ak07K,3:00404_dbcqH0or9Dxz_0ak07K,3:00Q0Q_gKrBomDsgeyz_0ak07K,3:00C0C_i1ULoqfRFR6z_0ak07K,3:00z0z_6ef4EWOuNoXz_0ak07K,3:00O0O_5X3jsjGJlOFz_0ak07K,3:00e0e_7PQSpvJ1NiLz_0ak07K,3:00M0M_7v6LJZ8Md7rz_0ak07K,3:00Y0Y_ge9zq9whbO8z_0ak07K">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:45" title="Thu 11 Nov 09:45:44 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-proof-of-income-no-credit-will/7406797778.html" data-id="7406797778" class="result-title hdrlnk" id="postid_7406797778" >No proof of income, no credit, I will move you in quick, call me°°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (275 NE 18th St #807 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406796984">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-easy-move-in-quick-no-income-no/7406796984.html" class="result-image gallery" data-ids="3:00r0r_gPIz1wIGIDTz_0gw0b1,3:01717_71qw6uALjFNz_0gw0b0,3:00G0G_6oBQKxMykRMz_0gw0bJ,3:00M0M_bR3dzPLwpFOz_0gw0b1,3:00e0e_4XoGmHVa1Woz_0gw0b0,3:00000_h59gWMiEtD3z_0gw0b1,3:00l0l_ivd1VPJ6pgnz_0gw0b1,3:00Z0Z_gDX9DhU890rz_0gw0b1,3:00w0w_2u6CyfZk9luz_0gw0b1,3:01515_jABjAVRc4Ubz_0co0fu,3:00u0u_aBZfqlLY32fz_0gw0b0,3:01111_imuu8gL0xziz_0gw0b0,3:00k0k_l8uyml22ANlz_0gw0b1">
                <span class="result-price">$3,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:42" title="Thu 11 Nov 09:42:31 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-easy-move-in-quick-no-income-no/7406796984.html" data-id="7406796984" class="result-title hdrlnk" id="postid_7406796984" >Easy move in, quick, no income no credit, call me and help you°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,300</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (600 NE 36th St #221 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404718348" data-repost-of="7400496735">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7404718348.html" class="result-image gallery" data-ids="3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00202_jIkCrf1vetvz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00808_iXudo37GRAZz_0lM0ey,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$2,450</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:39" title="Thu 11 Nov 09:39:34 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7404718348.html" data-id="7404718348" class="result-title hdrlnk" id="postid_7404718348" >*** GREAT LOCATION *** MOVE WITH ONLY $1000 SECURITY DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,450</span>

                <span class="housing">
                    1br -
                    683ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406791979">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-1b-1b-available-january-feb-move/7406791979.html" class="result-image gallery" data-ids="3:00h0h_hIT0xzsxVOdz_0wg0lt,3:00y0y_9TFHkHuym4Ez_0CI0pL,3:00e0e_2Y3sXfqkJHVz_0zy0hw,3:00m0m_2Vw82kbBfM5z_0vA0hw,3:01414_8AFksL8VPdRz_0wg0lt,3:00p0p_1p2unuU4fHIz_0vy0hC,3:01616_dSc60mNF7tfz_0uE0ko,3:01616_dSc60mNF7tfz_0uE0ko,3:00z0z_g5xUqIu3QU5z_0wg0m1">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:35" title="Thu 11 Nov 09:35:35 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-1b-1b-available-january-feb-move/7406791979.html" data-id="7406791979" class="result-title hdrlnk" id="postid_7406791979" >1B/1B Available January/Feb Move-In</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                    779ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401588706" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401588706.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:32" title="Thu 11 Nov 09:32:49 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401588706.html" data-id="7401588706" class="result-title hdrlnk" id="postid_7401588706" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406793564">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-located-in-the-heart-of-edgewater/7406793564.html" class="result-image gallery" data-ids="3:01717_71qw6uALjFNz_0gw0b0,3:00k0k_l8uyml22ANlz_0gw0b1,3:00G0G_6oBQKxMykRMz_0gw0bJ,3:00M0M_bR3dzPLwpFOz_0gw0b1,3:00e0e_4XoGmHVa1Woz_0gw0b0,3:00000_h59gWMiEtD3z_0gw0b1,3:00l0l_ivd1VPJ6pgnz_0gw0b1,3:00Z0Z_gDX9DhU890rz_0gw0b1,3:00w0w_2u6CyfZk9luz_0gw0b1,3:01515_jABjAVRc4Ubz_0co0fu,3:00u0u_aBZfqlLY32fz_0gw0b0,3:01111_imuu8gL0xziz_0gw0b0,3:00r0r_gPIz1wIGIDTz_0gw0b1">
                <span class="result-price">$3,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:28" title="Thu 11 Nov 09:28:20 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-located-in-the-heart-of-edgewater/7406793564.html" data-id="7406793564" class="result-title hdrlnk" id="postid_7406793564" >Located in the heart of Edgewater. Minutes away from Wynwood°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,300</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (600 NE 36th St #221 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400080925" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-fast-approval-only-one/7400080925.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:26" title="Thu 11 Nov 09:26:03 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-fast-approval-only-one/7400080925.html" data-id="7400080925" class="result-title hdrlnk" id="postid_7400080925" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406792799">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-quick-move-in-fast-approval-call/7406792799.html" class="result-image gallery" data-ids="3:00W0W_fXaJto0Ff9Iz_0pO0hc,3:00I0I_17ZPmvhDrJRz_0pO0jm,3:00K0K_etaY6HllvRDz_0ew0jm,3:00E0E_k5iIQEUgzKTz_0ew0jm,3:00G0G_bRbSTsUpBZpz_0ew0jm,3:00X0X_378VFBQWC8Iz_0pO0hc,3:00404_2H797OiQf2rz_0pO0jm">
                <span class="result-price">$3,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:25" title="Thu 11 Nov 09:25:09 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-quick-move-in-fast-approval-call/7406792799.html" data-id="7406792799" class="result-title hdrlnk" id="postid_7406792799" >QUICK MOVE IN, FAST APPROVAL, CALL ME AND COME SEE°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (1865 Brickell Ave #A2012 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395596603" data-repost-of="7373096579">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-remodelled-1bed-15bath-condo-in/7395596603.html" class="result-image gallery" data-ids="3:01717_h22sxOgP1PUz_0x20oM,3:00k0k_9ollGIWPca3z_0x20oM,3:00S0S_16eITaot8sGz_0x20oM,3:00J0J_7JNck8r7SZ6z_0x20oM,3:00s0s_2xjJnarzixJz_0x20oM,3:00e0e_5wdsrFesfPlz_0x20oM,3:00Y0Y_4R666Tuw0ixz_0x20oM,3:00b0b_kuQHzuGLzjbz_0x20oM,3:01313_jerG8lAeNoRz_0x20oM,3:00u0u_k2fr9g5wcHjz_0x20oM,3:01717_cQ7LTfUcG8qz_0lM0t2,3:00v0v_g5ZTSOcgQXfz_0x20oM,3:00909_9QM87Ww82VPz_0lM0t2,3:00d0d_6j7sjegfq4Sz_0lM0t2">
                <span class="result-price">$1,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:22" title="Thu 11 Nov 09:22:39 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-remodelled-1bed-15bath-condo-in/7395596603.html" data-id="7395596603" class="result-title hdrlnk" id="postid_7395596603" >REMODELLED 1BED 1.5BATH CONDO IN AVENTURA $1,750/MO **6+Mo LEASE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,750</span>

                <span class="housing">
                    1br -
                    900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Next to Aventura Mall miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406791986" data-repost-of="7130226454">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-efficiency-850/7406791986.html" class="result-image gallery" data-ids="3:00n0n_5t2zsfto1oEz_0xM0gP">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:21" title="Thu 11 Nov 09:21:36 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-efficiency-850/7406791986.html" data-id="7406791986" class="result-title hdrlnk" id="postid_7406791986" >EFFICIENCY $850</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406791874">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-am-an-expert-in-income-immediate/7406791874.html" class="result-image gallery" data-ids="3:00G0G_4J8k820bqe9z_0pO0jm,3:00t0t_k49sB0EBwPtz_0pO0hc,3:00r0r_6SOfFDu00X3z_0pO0hc,3:00D0D_dmhPq791lHJz_0pO0jm,3:00J0J_l9PMlENHaIDz_0gw0co,3:00d0d_hoEGqn2YdYDz_0pO0jm,3:00Y0Y_iujWCK5kRvXz_0gw0co,3:00303_2Sju3NEY8znz_0pO0jm,3:01717_kNYJqZ9wW2Zz_0pO0jm,3:00F0F_1CGVRl8aB04z_0pO0jm,3:00404_l9QRtKLu9Pnz_0ew0jm,3:00909_brQLPNgB8ycz_0ew0jm,3:00D0D_9nOrLseWorz_0pO0jm,3:00z0z_eYyGQoLlK0dz_0pO0hd">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:21" title="Thu 11 Nov 09:21:10 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-am-an-expert-in-income-immediate/7406791874.html" data-id="7406791874" class="result-title hdrlnk" id="postid_7406791874" >I am an expert in income immediate move, Easy to show, call me°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (750 NE 64th St #B512 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401158928" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401158928.html" class="result-image gallery" data-ids="3:00j0j_4cTJdRZl58yz_0CI0t2,3:00n0n_foIsXPWzIoEz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$3,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:19" title="Thu 11 Nov 09:19:17 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401158928.html" data-id="7401158928" class="result-title hdrlnk" id="postid_7401158928" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,250</span>

                <span class="housing">
                    2br -
                    1040ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406790785">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-enjoy-open-views-to-miami/7406790785.html" class="result-image gallery" data-ids="3:00K0K_6Sms0B1ZD9hz_0pO0ev,3:00q0q_7BNEFjsTJ78z_0pO0jm,3:00W0W_6TNiVigElnIz_0pO0ev,3:00707_jLfkX78Z7lRz_0pO0jm,3:01212_7KTiYlwymWUz_0pO0jm,3:00404_4sahBqGbylJz_0pO0jm,3:00N0N_lcNQDPJDsn5z_0pO0ev,3:00909_9LIL0loMobLz_0ew0jm,3:00x0x_640K1jixgP2z_0aT0jm,3:00f0f_3rDq3CyWqxmz_0pO0ev,3:00N0N_8gVTMwJm73Bz_0ew0jm,3:00i0i_fnJmWZzuVNmz_0pO0ev,3:00Y0Y_9r0SSXqFE82z_0pO0ev">
                <span class="result-price">$3,950</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:16" title="Thu 11 Nov 09:16:46 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-enjoy-open-views-to-miami/7406790785.html" data-id="7406790785" class="result-title hdrlnk" id="postid_7406790785" >Enjoy open views to Miami Skyline.Easy access to all public transport°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,950</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2451 Brickell Avenue #11s miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406789707">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-paraiso-bayviews-is-full/7406789707.html" class="result-image gallery" data-ids="3:01212_cCMGuB9zydSz_0pO0hc,3:00D0D_bLbMn8w9b1iz_0pO0hc,3:00o0o_2IMcl0XdesRz_0pO0hc,3:00l0l_l7Fea0h3vIFz_0pO0hc,3:00e0e_gg3vy4YSzMkz_0pO0hc,3:00t0t_7GOciPxuvbwz_0pO0hc,3:00F0F_cRfnVT6oQ2lz_0pO0hc,3:00s0s_dg0PZJrAw7nz_0pO0hc,3:00s0s_hr4pi8QE2g5z_0pO0hc,3:00000_aeYMJCjaXWmz_0pO0hc,3:01212_6hpx6SNsTfLz_0pO0hc,3:00V0V_dAQMJNQdsrGz_0pO0hc">
                <span class="result-price">$4,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:12" title="Thu 11 Nov 09:12:20 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-paraiso-bayviews-is-full/7406789707.html" data-id="7406789707" class="result-title hdrlnk" id="postid_7406789707" >Paraiso Bayview&#39;s is full luxurious amenities including rooftop pool°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,400</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (501 NE 31st St #3008 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400081148" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7400081148.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 21:05" title="Thu 11 Nov 09:05:46 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7400081148.html" data-id="7400081148" class="result-title hdrlnk" id="postid_7400081148" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7400588202" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7400588202.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:59" title="Thu 11 Nov 08:59:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7400588202.html" data-id="7400588202" class="result-title hdrlnk" id="postid_7400588202" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,850</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402994669" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7402994669.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:52" title="Thu 11 Nov 08:52:14 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7402994669.html" data-id="7402994669" class="result-title hdrlnk" id="postid_7402994669" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406780344">

        <a href="https://miami.craigslist.org/mdc/apa/d/homestead-nice-apartment-for-rent/7406780344.html" class="result-image gallery" data-ids="3:01212_5LBy7LaobjWz_0ew0jm,3:00g0g_gzVTCrtbytXz_0am0ip,3:00s0s_ai83qZKEFLoz_0am0ip,3:00r0r_cwMpRKUMO4yz_0ew0jm,3:00X0X_gohPtOG8rAwz_0ew0jm">
                <span class="result-price">$1,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:40" title="Thu 11 Nov 08:40:33 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/homestead-nice-apartment-for-rent/7406780344.html" data-id="7406780344" class="result-title hdrlnk" id="postid_7406780344" >Nice apartment for rent.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,000</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7397249232" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7397249232.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:38" title="Thu 11 Nov 08:38:43 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7397249232.html" data-id="7397249232" class="result-title hdrlnk" id="postid_7397249232" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406778884">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fastest-rentals-in-miami-my-team/7406778884.html" class="result-image gallery" data-ids="3:00808_hhFYEXJOUotz_0pO0hc,3:00N0N_kdKDDW5hstoz_0pO0hc,3:00G0G_6JH6EG8XgxEz_0pO0hc,3:01313_5EPjpJeOaSTz_0pO0gz,3:00101_hrkTncIeCiCz_0pO0gP,3:00909_eNisKZI5b8rz_0pO0hc,3:01313_kpn8JY7g607z_0pO0gF,3:00T0T_eAMI0YkS9VXz_0pO0gw,3:00G0G_ghrRU9yQEfCz_0pO0hc,3:00u0u_7ucKetBy5Iez_0pO0hd,3:00q0q_2JdxpCXcuQiz_0pO0hv,3:00h0h_bpESacs2WLKz_0pO0hc">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:35" title="Thu 11 Nov 08:35:28 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fastest-rentals-in-miami-my-team/7406778884.html" data-id="7406778884" class="result-title hdrlnk" id="postid_7406778884" >Fastest rentals in Miami, my team will move you in, call me right now°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (2501 Brickell Ave #1003 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406778001">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-apartment-tastefully/7406778001.html" class="result-image gallery" data-ids="3:00N0N_k0QjMNualDRz_0n60gB,3:00A0A_1tI65r5Nz2Qz_0pO0hc,3:00f0f_hztetrINZJNz_0aS0jm,3:00101_2BpKUcf1Fypz_0gg0cc,3:00k0k_592Z51NRmCAz_0kY0f0,3:00F0F_2X8UAC9chcEz_0pO0hc,3:00A0A_bva8pYmfwFwz_0cU09G,3:00u0u_iiIXw3mOzOKz_0kY0f0,3:00U0U_4W0OroXvmVZz_0pO0jm">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:32" title="Thu 11 Nov 08:32:36 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-apartment-tastefully/7406778001.html" data-id="7406778001" class="result-title hdrlnk" id="postid_7406778001" >Beautiful apartment &amp; tastefully finished w porcelain floors, Call me°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (460 NE 28th St #1906 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402873075" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402873075.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:31" title="Thu 11 Nov 08:31:57 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402873075.html" data-id="7402873075" class="result-title hdrlnk" id="postid_7402873075" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406776619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-this-house-is/7406776619.html" class="result-image gallery" data-ids="3:00s0s_cWP1OhzO6Wyz_0pO0ha,3:00V0V_8NNWmQgk9h3z_0pO0ha,3:00i0i_cvoXkG4uDT0z_0pO0ha,3:01010_hv1NIbPxusmz_0pO0ha,3:00n0n_jaL95Y1DkBWz_0pO0ha,3:00m0m_81gx7bBqL8dz_0pO0ha,3:01515_n4W5TqkHYjz_0pO0ha,3:00x0x_dCPuuiQiDsSz_0pO0ha">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:28" title="Thu 11 Nov 08:28:14 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-this-house-is/7406776619.html" data-id="7406776619" class="result-title hdrlnk" id="postid_7406776619" >Great Location! This house is Fully renovated, come see°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (540 NE 67th St #540 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406776504">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406776504.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:27" title="Thu 11 Nov 08:27:54 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406776504.html" data-id="7406776504" class="result-title hdrlnk" id="postid_7406776504" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406776391">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-increble-lugar-vista/7406776391.html" class="result-image gallery" data-ids="3:00000_eyEU9x6EmdEz_0eK0bU,3:00K0K_7IYkIfsujakz_08l0cb,3:00k0k_iupll9pCcxFz_08p0cb">
                <span class="result-price">$1,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:27" title="Thu 11 Nov 08:27:30 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-increble-lugar-vista/7406776391.html" data-id="7406776391" class="result-title hdrlnk" id="postid_7406776391" >Increíble lugar y vista - Amazing place and view</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,100</span>


                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7398595656" data-repost-of="7010067545">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7398595656.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:25" title="Thu 11 Nov 08:25:12 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7398595656.html" data-id="7398595656" class="result-title hdrlnk" id="postid_7398595656" >NEW BUILDING *** ONLY $500 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    1br -
                    679ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406775507">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-the-fastest-rentals-in-miami-my/7406775507.html" class="result-image gallery" data-ids="3:00T0T_13nZ7zTs0KHz_0pO0jm,3:00n0n_krcRWr9NHqXz_0pO0jm,3:00Q0Q_9Tsl6h7lkcKz_0pO0jm,3:00H0H_eOtxTBEZFYvz_0pO0jm,3:00U0U_gD3oXiQSdkaz_0pO0jm,3:00H0H_1wzffpY0gwhz_0pO0jm,3:00l0l_c3lTXidMuEtz_0pO0jm,3:01111_hQXILPYBOLWz_0pO0jm,3:00505_dsPebWmbqA5z_0pO0jm">
                <span class="result-price">$3,799</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:24" title="Thu 11 Nov 08:24:41 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-the-fastest-rentals-in-miami-my/7406775507.html" data-id="7406775507" class="result-title hdrlnk" id="postid_7406775507" >The fastest rentals in Miami, my team helps you, give me a call°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,799</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (770 Claughton Island Dr #1802 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406774902">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-move-no-credit-no-problems/7406774902.html" class="result-image gallery" data-ids="3:00F0F_eAHxvARHAZAz_0pO0jl,3:00g0g_aeKuW2gk2hdz_0pO0hd,3:00a0a_gPepujdiueVz_0pO0hd,3:01010_4ENzUoSXfsgz_0pO0hd,3:00x0x_kvGh9xN0uc4z_0pO0hd,3:00F0F_lmuBwyoBKOez_0pO0hd,3:00l0l_20KvD7xW7oZz_0pO0hd,3:00505_8LOeSRSUOLQz_0pO0hd,3:00s0s_79Y4qwDHaPiz_0pO0hd,3:00M0M_3uAMpDX6aMAz_0pO0hd,3:00z0z_d7Od0gSMcxFz_0pO0hd,3:00E0E_4XsQpKaXsqVz_0pO0hd,3:01414_1tOsxGM6orTz_0pO0hd,3:00f0f_j8rEJvHbHhtz_0pO0hd,3:00M0M_4rTgXn3mcEdz_0pO0hd">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:22" title="Thu 11 Nov 08:22:43 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-move-no-credit-no-problems/7406774902.html" data-id="7406774902" class="result-title hdrlnk" id="postid_7406774902" >Fast move, no credit, No problems, call me and ask for this home°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (4250 Biscayne Blvd #1016 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406773929">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-credit-my-team-will-help-you/7406773929.html" class="result-image gallery" data-ids="3:00Z0Z_5Q7Vxca1fyCz_0pO0jm,3:00303_gbQHL9l7Y9lz_0pO0jm,3:00y0y_bvMOnG5eupz_0pO0jm,3:00E0E_9D0tsJzHlTUz_0pO0ev,3:00000_iw4Mxvmicxvz_0pO0ev,3:00I0I_751buMtMXaOz_0aT0jm,3:00W0W_jUeaqMgOXIaz_0pO0ev,3:00C0C_98qNuKdYlbWz_0pO0ev,3:00X0X_VQq0Ky81Zaz_08g06s,3:00909_6EZbapC47ADz_0pO0ev">
                <span class="result-price">$3,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:19" title="Thu 11 Nov 08:19:35 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-credit-my-team-will-help-you/7406773929.html" data-id="7406773929" class="result-title hdrlnk" id="postid_7406773929" >No credit ?, My team will help you, Call me and see the house°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (1800 N Bayshore Dr #3310 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401163688" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401163688.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:18" title="Thu 11 Nov 08:18:26 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401163688.html" data-id="7401163688" class="result-title hdrlnk" id="postid_7401163688" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,550</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406772711">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-the-fastest-rentals-in-miami-my/7406772711.html" class="result-image gallery" data-ids="3:00R0R_3EmIFuM6KONz_0cP09W,3:01010_210SA8u8zO4z_0cP09V,3:00K0K_9ZERMgyXhWTz_0cP09V,3:00E0E_lgZms6xdSvNz_0cP09U,3:00x0x_jijxHfVh87nz_0cO09Q,3:00t0t_9voN4e89Tgmz_0cP09V,3:00t0t_lhMXKiEDCXnz_06r09V">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:16" title="Thu 11 Nov 08:16:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-the-fastest-rentals-in-miami-my/7406772711.html" data-id="7406772711" class="result-title hdrlnk" id="postid_7406772711" >The fastest rentals in Miami, my team helps you, give me a call°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (92 SW 3rd St #1105 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406771841">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-this-is-full-service-luxury/7406771841.html" class="result-image gallery" data-ids="3:00909_1quS4oJM51xz_0hQ0bS,3:00f0f_9IVek89Hxmvz_0hM0bM,3:00u0u_gW6jLskDaYXz_0pO0hb,3:00J0J_c0Fk3q7EywIz_0pO0hc,3:00i0i_co4sLtZIVtDz_0pO0hb,3:00p0p_7D4wWnrXOh5z_0pO0hc,3:00Y0Y_7r6icy7Vdm8z_0pO0hb,3:00Q0Q_dEFhZ4dP0wHz_0pO0hc,3:00a0a_8yzt3hkTaLVz_0pO0hc,3:00j0j_2B6ef4sRE5uz_0pO0hb,3:00n0n_bDkQCiNMwFmz_0pO0hc,3:00B0B_aAIjKNW5rE8z_0pO0hb">
                <span class="result-price">$4,920</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:13" title="Thu 11 Nov 08:13:15 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-this-is-full-service-luxury/7406771841.html" data-id="7406771841" class="result-title hdrlnk" id="postid_7406771841" >This is a full-service, luxury building that offers 24-hour security°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,920</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (400 NW 1st Ave #4705 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401962301" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401962301.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:11" title="Thu 11 Nov 08:11:40 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401962301.html" data-id="7401962301" class="result-title hdrlnk" id="postid_7401962301" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406769730">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-proof-of-income-no-credit-will/7406769730.html" class="result-image gallery" data-ids="3:01616_cH5XqpDPDiXz_0cU0jm,3:00m0m_xUT1CZZ0iFz_0pO0hc,3:00909_dWCOAuzRh3tz_0pO0hc,3:00r0r_8Guc5sLYr0Oz_0pO0hc,3:00J0J_eBaEn6VwHsNz_0pO0hc,3:00606_62KwmSETbJbz_0pO0hc">
                <span class="result-price">$3,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:06" title="Thu 11 Nov 08:06:44 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-no-proof-of-income-no-credit-will/7406769730.html" data-id="7406769730" class="result-title hdrlnk" id="postid_7406769730" >No proof of income, no credit, I will move you in fase, call me°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,400</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (350 S MIAMI AV #3306 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401961582" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401961582.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:04" title="Thu 11 Nov 08:04:55 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401961582.html" data-id="7401961582" class="result-title hdrlnk" id="postid_7401961582" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,500</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406768921">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-nirvana-is-gated-community/7406768921.html" class="result-image gallery" data-ids="3:01111_bO1Y7HsPrZkz_0pO0hc,3:00X0X_4FbMixmukQcz_0pO0hc,3:00E0E_1h3LdFBOx7xz_0pO0hc,3:00H0H_aUuMZBY3bwhz_0pO0hc,3:00R0R_4fejyoczhPqz_0pO0hc,3:01313_fZaWKTt5t5bz_0pO0hc,3:00d0d_aF7J0kuzKjLz_0pO0h3,3:00w0w_7CvWWcdC6qSz_0pO0hc,3:00y0y_96X9rx6qy5az_0pO0hc,3:00b0b_1bVO8pTmTzcz_0pO0hc">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:04" title="Thu 11 Nov 08:04:37 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-nirvana-is-gated-community/7406768921.html" data-id="7406768921" class="result-title hdrlnk" id="postid_7406768921" >Nirvana is a gated community located in Mimo District and by the bay°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (750 NE 64th St #B411 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406767821">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-unit-in-one-of-the-best/7406767821.html" class="result-image gallery" data-ids="3:00W0W_bB8SD47Vxotz_0ew0jm,3:00T0T_b9BqbsnRyVz_0ew0jm,3:00U0U_hFaN8etldyXz_0ew0jm,3:00Q0Q_jJRnBuiiIojz_0ew0jm,3:00J0J_MVMlilAbT0z_0ew0jm,3:00202_ax2u37WKSW0z_0ew0jm,3:00S0S_gYspEZJrk7Xz_0ew0jm,3:00g0g_hbplA9H4xe9z_0ew0jm,3:00y0y_gEsMay6fvAiz_0ew0jm,3:00z0z_c83vrTMGYm1z_0ew0jm,3:01111_eHPQVidLb2Pz_0ew0jm">
                <span class="result-price">$4,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 20:01" title="Thu 11 Nov 08:01:25 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-unit-in-one-of-the-best/7406767821.html" data-id="7406767821" class="result-title hdrlnk" id="postid_7406767821" >Amazing Unit in one of the Best Buildings in Miami, Easy to show°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,700</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (888 Biscayne Blvd #4105 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401972034" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7401972034.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:58" title="Thu 11 Nov 07:58:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7401972034.html" data-id="7401972034" class="result-title hdrlnk" id="postid_7401972034" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406742395">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-excellent-condominium-25/7406742395.html" class="result-image gallery" data-ids="3:00F0F_1gKXX0MEFwYz_0pO0cd,3:00S0S_3Bb4dt8iNE6z_0ew0jm,3:00d0d_3dvUhLEJS0Dz_0pO0jm,3:00F0F_hBw6c8lP9NGz_0pO0jm,3:00v0v_hcSHel1OgC6z_0pO0jm,3:00x0x_cYLMrXcrr7Oz_0ew0jm,3:00505_iofF26oUGwPz_0ew0jm,3:00c0c_aTPR6VpDBfRz_0pO0cd,3:00m0m_eIje0dC58GZz_0pO0cd">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:55" title="Thu 11 Nov 07:55:16 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-excellent-condominium-25/7406742395.html" data-id="7406742395" class="result-title hdrlnk" id="postid_7406742395" >Excellent Condominium 3/2.5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    3br -
                    1477ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (The Hammocks miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406765168">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406765168.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:53" title="Thu 11 Nov 07:53:35 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406765168.html" data-id="7406765168" class="result-title hdrlnk" id="postid_7406765168" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401973078" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401973078.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:51" title="Thu 11 Nov 07:51:17 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401973078.html" data-id="7401973078" class="result-title hdrlnk" id="postid_7401973078" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396151353">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-unique-hibiscus-isl-bed-bath/7396151353.html" class="result-image gallery" data-ids="3:01111_j5XUaK0gl2kz_0gw0co,3:00R0R_aUIsEfSnlKMz_0gw0co,3:00r0r_h6brUqK4aTnz_0gw0co,3:00e0e_53KV7gmVavhz_0gw0co">
                <span class="result-price">$6,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:48" title="Thu 11 Nov 07:48:32 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-unique-hibiscus-isl-bed-bath/7396151353.html" data-id="7396151353" class="result-title hdrlnk" id="postid_7396151353" >UNIQUE: Hibiscus Isl. 2 bed 2 Bath Waterfront Paradise Miami Beach</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,500</span>

                <span class="housing">
                    2br -
                    1220ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7395896407">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-bed-bath-resort-living/7395896407.html" class="result-image gallery" data-ids="3:00g0g_ceIC5GOawdSz_0gw0co,3:00909_58N0ycELkGGz_0gw0co,3:00X0X_dpG6KYKnV1jz_0gw0co,3:00202_bnO39PGaH0Az_07g07v,3:00e0e_53KV7gmVavhz_0gw0co">
                <span class="result-price">$3,399</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:48" title="Thu 11 Nov 07:48:25 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-bed-bath-resort-living/7395896407.html" data-id="7395896407" class="result-title hdrlnk" id="postid_7395896407" >2 Bed, 2 Bath Resort Living, Updated Amenites - South Beach</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,399</span>

                <span class="housing">
                    2br -
                    1175ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405142424">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-waverly-bed-bath-south/7405142424.html" class="result-image gallery" data-ids="3:00404_Ti2SMuN5LCz_0gw0co,3:00K0K_goOogcLNYRnz_0gw0co,3:00m0m_lsJWgErcA4dz_0gw0co,3:00L0L_iX5c4ZKDSXiz_0af06L,3:00I0I_lciygB1ga4yz_0jm0ew">
                <span class="result-price">$3,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:48" title="Thu 11 Nov 07:48:18 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-waverly-bed-bath-south/7405142424.html" data-id="7405142424" class="result-title hdrlnk" id="postid_7405142424" >WAVERLY: 2 Bed 2 Bath South Beach,  Full amenities Building</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,100</span>

                <span class="housing">
                    2br -
                    1084ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406763166">

        <a href="https://miami.craigslist.org/mdc/apa/d/key-biscayne-bed-15-bath-for-rent/7406763166.html" class="result-image gallery empty"></a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:47" title="Thu 11 Nov 07:47:54 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/key-biscayne-bed-15-bath-for-rent/7406763166.html" data-id="7406763166" class="result-title hdrlnk" id="postid_7406763166" >1 Bed 1.5 bath for Rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,200</span>

                <span class="housing">
                    1br -
                    700ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (North Miami miami / dade county )</span>

                <span class="result-tags">
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406754792">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-coral-gables-studio-apartments/7406754792.html" class="result-image gallery" data-ids="3:00606_63M5nTswuDBz_03U05U,3:00U0U_fLKPnNXhCzIz_0ml0sV,3:00505_3RfUntGswpsz_0BD0m1,3:00v0v_9VxFUZcdCvFz_0kv0af,3:00707_5lRQzwXdJVoz_07s04Y,3:00c0c_6Ncnhg8SP6Oz_0gt0gt,3:00B0B_cxsN1saIpK4z_0wM0lQ">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:46" title="Thu 11 Nov 07:46:30 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-coral-gables-studio-apartments/7406754792.html" data-id="7406754792" class="result-title hdrlnk" id="postid_7406754792" >Coral Gables Studio Apartments 408 sqft</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    408ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405811391" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7405811391.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:44" title="Thu 11 Nov 07:44:32 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7405811391.html" data-id="7405811391" class="result-title hdrlnk" id="postid_7405811391" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401972545" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401972545.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:37" title="Thu 11 Nov 07:37:46 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7401972545.html" data-id="7401972545" class="result-title hdrlnk" id="postid_7401972545" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,150</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405812798" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7405812798.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:31" title="Thu 11 Nov 07:31:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7405812798.html" data-id="7405812798" class="result-title hdrlnk" id="postid_7405812798" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406755114">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406755114.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:25" title="Thu 11 Nov 07:25:22 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406755114.html" data-id="7406755114" class="result-title hdrlnk" id="postid_7406755114" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405812168" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7405812168.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:24" title="Thu 11 Nov 07:24:15 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7405812168.html" data-id="7405812168" class="result-title hdrlnk" id="postid_7405812168" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401162575" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401162575.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:17" title="Thu 11 Nov 07:17:29 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401162575.html" data-id="7401162575" class="result-title hdrlnk" id="postid_7401162575" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406751329">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406751329.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:15" title="Thu 11 Nov 07:15:14 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406751329.html" data-id="7406751329" class="result-title hdrlnk" id="postid_7406751329" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405810763" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7405810763.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:10" title="Thu 11 Nov 07:10:44 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7405810763.html" data-id="7405810763" class="result-title hdrlnk" id="postid_7405810763" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406734913">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-wonderful-house-2/7406734913.html" class="result-image gallery" data-ids="3:00O0O_2LOrgBvNexhz_0ak06S,3:01414_4OzhhWGHa20z_0kE0dK,3:01313_eugr7K6KOu9z_0kE0dK,3:00R0R_aDpteQgHwKz_0kE0dK,3:00D0D_6GoE4uHi4U0z_0kE0dK,3:01414_89z1wDaEQxsz_0kE0dK,3:00Z0Z_26rrO8bM1tbz_0kE0dK,3:00X0X_8LjrSjJvuBLz_0kE0dK,3:00Z0Z_iDKx4htVllUz_0kE0dK,3:00o0o_6zKc0pYg9RNz_0kE0dK,3:00r0r_bfl6CheWgdpz_0ak06S,3:01616_dQF5NtdnW1Kz_0ak06S">
                <span class="result-price">$2,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:10" title="Thu 11 Nov 07:10:02 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-wonderful-house-2/7406734913.html" data-id="7406734913" class="result-title hdrlnk" id="postid_7406734913" >Wonderful House 3/2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,650</span>

                <span class="housing">
                    3br -
                    1422ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (The Hammocks miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406741837">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-studiooneand-two-bedrooms/7406741837.html" class="result-image gallery" data-ids="3:00l0l_6MxLSL0cfYgz_0jm0cU,3:01717_7Qp9aRZjap3z_0jm0cU,3:00t0t_gL1xTnbNferz_0jm0cU,3:00f0f_2q8GkbwOjhEz_0jm0cU,3:00u0u_eY3jsVAbL1Hz_0jm0cU,3:00J0J_fuZnEuCOEgiz_0jm0cU,3:00V0V_buCD8AQ4NOsz_0jm0cU,3:00202_bmK80lyFaPIz_0jm0cU,3:00M0M_d2tz4QSzypBz_0jm0cU,3:00I0I_blm2eyYxC7z_0jm0cU,3:00T0T_3keGSHChajYz_0jm0cU,3:00E0E_45w8TaYni2Kz_0jm0cU,3:00z0z_aFlimwhpwzgz_0jm0cU,3:00m0m_HmpD8fYOEkz_0jm0cV,3:00c0c_belJB3ghFVyz_0jm0cV,3:00j0j_iikh1YfPEgqz_0jm0cV,3:00L0L_1ho0v1kxqNCz_0jm0cV,3:00C0C_12rFhpW7qiCz_0jm0cV,3:00000_kPaM7GUUGREz_0jm0cU,3:00U0U_9aGrToNf9mcz_0jm0cU,3:00w0w_eXuBJf72mj1z_0jm0cU,3:00n0n_cC9cZbCqS4zz_0jm0cU,3:00X0X_anhkfO9wUtLz_0jm0cU,3:00w0w_4ss4yupLNibz_0jm0cU">
                <span class="result-price">$2,246</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:08" title="Thu 11 Nov 07:08:44 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-studiooneand-two-bedrooms/7406741837.html" data-id="7406741837" class="result-title hdrlnk" id="postid_7406741837" >$500 STUDIO,ONE,AND TWO BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,246</span>


                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7404725802" data-repost-of="7400506086">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7404725802.html" class="result-image gallery" data-ids="3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00202_jIkCrf1vetvz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00909_jUECqngSB0cz_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$4,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:03" title="Thu 11 Nov 07:03:58 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-location-move-with-only/7404725802.html" data-id="7404725802" class="result-title hdrlnk" id="postid_7404725802" >*** GREAT LOCATION *** MOVE WITH ONLY $1000 SECURITY DEPOSIT ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,900</span>

                <span class="housing">
                    3br -
                    1315ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406741122">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit/7406741122.html" class="result-image gallery" data-ids="3:00202_bmK80lyFaPIz_0jm0cU,3:01717_7Qp9aRZjap3z_0jm0cU,3:00t0t_gL1xTnbNferz_0jm0cU,3:00l0l_6MxLSL0cfYgz_0jm0cU,3:00f0f_2q8GkbwOjhEz_0jm0cU,3:00u0u_eY3jsVAbL1Hz_0jm0cU,3:00J0J_fuZnEuCOEgiz_0jm0cU,3:00V0V_buCD8AQ4NOsz_0jm0cU,3:00M0M_d2tz4QSzypBz_0jm0cU,3:00I0I_blm2eyYxC7z_0jm0cU,3:00T0T_3keGSHChajYz_0jm0cU,3:00E0E_45w8TaYni2Kz_0jm0cU,3:00z0z_aFlimwhpwzgz_0jm0cU,3:00m0m_HmpD8fYOEkz_0jm0cV,3:00c0c_belJB3ghFVyz_0jm0cV,3:00j0j_iikh1YfPEgqz_0jm0cV,3:00L0L_1ho0v1kxqNCz_0jm0cV,3:00C0C_12rFhpW7qiCz_0jm0cV,3:00000_kPaM7GUUGREz_0jm0cU,3:00U0U_9aGrToNf9mcz_0jm0cU,3:00w0w_eXuBJf72mj1z_0jm0cU,3:00n0n_cC9cZbCqS4zz_0jm0cU,3:00X0X_anhkfO9wUtLz_0jm0cU,3:00w0w_4ss4yupLNibz_0jm0cU">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:03" title="Thu 11 Nov 07:03:58 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit/7406741122.html" data-id="7406741122" class="result-title hdrlnk" id="postid_7406741122" >$500 DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406740607">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406740607.html" class="result-image gallery" data-ids="3:01717_7Qp9aRZjap3z_0jm0cU,3:00t0t_gL1xTnbNferz_0jm0cU,3:00l0l_6MxLSL0cfYgz_0jm0cU,3:00f0f_2q8GkbwOjhEz_0jm0cU,3:00u0u_eY3jsVAbL1Hz_0jm0cU,3:00J0J_fuZnEuCOEgiz_0jm0cU,3:00V0V_buCD8AQ4NOsz_0jm0cU,3:00202_bmK80lyFaPIz_0jm0cU,3:00m0m_dXmhdgXW7tXz_0g70c5,3:00M0M_d2tz4QSzypBz_0jm0cU,3:00I0I_blm2eyYxC7z_0jm0cU,3:00T0T_3keGSHChajYz_0jm0cU,3:00E0E_45w8TaYni2Kz_0jm0cU,3:00z0z_aFlimwhpwzgz_0jm0cU,3:00m0m_HmpD8fYOEkz_0jm0cV,3:00c0c_belJB3ghFVyz_0jm0cV,3:00j0j_iikh1YfPEgqz_0jm0cV,3:00L0L_1ho0v1kxqNCz_0jm0cV,3:00C0C_12rFhpW7qiCz_0jm0cV,3:00000_kPaM7GUUGREz_0jm0cU,3:00U0U_9aGrToNf9mcz_0jm0cU,3:00w0w_eXuBJf72mj1z_0jm0cU,3:00n0n_cC9cZbCqS4zz_0jm0cU,3:00X0X_anhkfO9wUtLz_0jm0cU">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 19:01" title="Thu 11 Nov 07:01:40 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406740607.html" data-id="7406740607" class="result-title hdrlnk" id="postid_7406740607" >$500 DEPOSIT ONE AND TWO BEDROOM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405802689" data-repost-of="7400506086">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-move-with-only-1000-security/7405802689.html" class="result-image gallery" data-ids="3:00202_jIkCrf1vetvz_0lM0ex,3:00H0H_g42vIPgBC5mz_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:01313_ghZY78PdjJ0z_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00909_jUECqngSB0cz_0lM0ex,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$4,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:57" title="Thu 11 Nov 06:57:13 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-move-with-only-1000-security/7405802689.html" data-id="7405802689" class="result-title hdrlnk" id="postid_7405802689" >*** MOVE WITH ONLY $1000 SECURITY DEPOSIT *** GREAT LOCATION</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,900</span>

                <span class="housing">
                    3br -
                    1315ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406733211">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-750-deposit-studiooneand-two/7406733211.html" class="result-image gallery" data-ids="3:00C0C_bUlT78KTwUiz_0hd0bw,3:00C0C_cXXcluwbofxz_0h40bx,3:00c0c_eNJMjujWyo3z_0hj0bm,3:00u0u_87ND5Rp1Pg6z_0he0bj,3:00w0w_d2hRYvTJGe6z_0hf0bi,3:00T0T_lkgDxHPxkxJz_0h40bi,3:00S0S_1HhPR5Zb6MEz_0hh0bj,3:00c0c_4mM1tclodnUz_0gZ0bg,3:00m0m_aFDxTzb8Tyz_0hg0b8,3:00K0K_3TmXmpEnVamz_0gY0aV">
                <span class="result-price">$2,385</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:55" title="Thu 11 Nov 06:55:32 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-750-deposit-studiooneand-two/7406733211.html" data-id="7406733211" class="result-title hdrlnk" id="postid_7406733211" >$750 DEPOSIT STUDIO,ONE,AND TWO BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,385</span>


                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406742770">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406742770.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:53" title="Thu 11 Nov 06:53:16 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406742770.html" data-id="7406742770" class="result-title hdrlnk" id="postid_7406742770" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405802199" data-repost-of="7400496735">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-move-with-only-1000-security/7405802199.html" class="result-image gallery" data-ids="3:00202_jIkCrf1vetvz_0lM0ex,3:00H0H_g42vIPgBC5mz_0lM0ex,3:01313_ghZY78PdjJ0z_0lM0ex,3:00E0E_68s1rdYkRVDz_0lM0eB,3:00g0g_k80wvNqOhgJz_0lM0ex,3:00X0X_8VfyoaE2T4zz_0lM0ex,3:00h0h_fih4cs8ZzQ2z_0lM0ex,3:01111_5iMNmRqjbHAz_0lM0ex,3:00d0d_d8THyiseFoHz_0lM0ex,3:00D0D_gIhwPo9jmnSz_0lM0ex,3:00Q0Q_2bMYoKmfk7z_0lM0ex,3:00808_iXudo37GRAZz_0lM0ey,3:00j0j_3hUmfUmOZxkz_0lM0ex">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:50" title="Thu 11 Nov 06:50:27 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-move-with-only-1000-security/7405802199.html" data-id="7405802199" class="result-title hdrlnk" id="postid_7405802199" >*** MOVE WITH ONLY $1000 SECURITY DEPOSIT *** GREAT LOCATION ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    683ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406738089">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406738089.html" class="result-image gallery" data-ids="3:00t0t_6P0Wbj7H0LKz_0wg0lx,3:00808_lPPaKTemsFwz_0wg0lx,3:01414_7eBr49dV7flz_0iQ0cA,3:00909_imG6w8Sjnm1z_0wg0lx,3:00s0s_1JVKC2xnK2Iz_0iZ0d6,3:00P0P_7oZJW4wJERaz_0jn0t2,3:00404_4YqNX5OnWzzz_0s90oM,3:00X0X_3UeKvBdMwlz_0iG0ch,3:00v0v_h2XkUhDD2qUz_08i0cK,3:01313_czOdwgiokofz_0jn0t2,3:00n0n_bGQL1nVGUZ9z_0iZ0cw,3:00Y0Y_4QDMiFL204fz_0wg0lx,3:00x0x_gaaC0v0PBkIz_0wg0lx,3:00E0E_lK39RobwqC4z_0wg0lx,3:01010_5LKjnaC4PfBz_0wg0lx,3:00j0j_hw1qbPbgk7Jz_0wg0lx">
                <span class="result-price">$3,210</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:50" title="Thu 11 Nov 06:50:22 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406738089.html" data-id="7406738089" class="result-title hdrlnk" id="postid_7406738089" >$500 DEPOSIT ONE AND TWO BEDROOM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,210</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406737304">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-studiooneand-two-bedrooms/7406737304.html" class="result-image gallery" data-ids="3:00808_lPPaKTemsFwz_0wg0lx,3:00t0t_6P0Wbj7H0LKz_0wg0lx,3:01414_7eBr49dV7flz_0iQ0cA,3:00909_imG6w8Sjnm1z_0wg0lx,3:01313_czOdwgiokofz_0jn0t2,3:00s0s_1JVKC2xnK2Iz_0iZ0d6,3:00P0P_7oZJW4wJERaz_0jn0t2,3:00404_4YqNX5OnWzzz_0s90oM,3:00X0X_3UeKvBdMwlz_0iG0ch,3:00n0n_bGQL1nVGUZ9z_0iZ0cw,3:00M0M_4QcEtZAvLd6z_0jn0t2,3:00Y0Y_4QDMiFL204fz_0wg0lx,3:00x0x_gaaC0v0PBkIz_0wg0lx,3:00E0E_lK39RobwqC4z_0wg0lx,3:01010_5LKjnaC4PfBz_0wg0lx,3:00j0j_hw1qbPbgk7Jz_0wg0lx">
                <span class="result-price">$2,382</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:46" title="Thu 11 Nov 06:46:13 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-studiooneand-two-bedrooms/7406737304.html" data-id="7406737304" class="result-title hdrlnk" id="postid_7406737304" >$500 STUDIO,ONE,AND TWO BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,382</span>


                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406734891">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-deposit/7406734891.html" class="result-image gallery" data-ids="3:00n0n_6gqenxw3MJjz_0g70c5,3:00a0a_9kLR4CRvZfaz_0g70c5,3:00E0E_fVuySWvrENCz_0g70c5,3:00K0K_k3jwD0vCfpVz_09G07g,3:00b0b_keNDdfmAxyqz_09G07g,3:00X0X_biZzRk6y5ZNz_0g70c5,3:00e0e_7s2HGbfEbIFz_0g70c5,3:00U0U_dzSrhN7o8dez_0g70c5,3:00X0X_lRRy83VFzMhz_0g70c5,3:00m0m_dXmhdgXW7tXz_0g70c5,3:00G0G_2jN5tAVvd6kz_0g70c5,3:00f0f_gzmsdwtPABBz_0g70c5,3:00d0d_aWgYAsKAA0Vz_0g70c5,3:00M0M_NgHK7kfoXlz_0c50g7,3:00W0W_g8ja8gXnZI9z_0g70c5,3:00q0q_7l4ThuFiJyCz_0g70c5,3:00B0B_7xw0ICTIufQz_0g70c5,3:00f0f_lmXQMqq2okTz_09C0c5,3:00Z0Z_82fJ2ihoppvz_09I0c5,3:00R0R_laQXXDylxNQz_0lu0c5,3:01010_1BbsAVkz4Maz_0lu0c5,3:00H0H_lnaxgZsXAD1z_0lu0c5">
                <span class="result-price">$2,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:45" title="Thu 11 Nov 06:45:59 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-deposit/7406734891.html" data-id="7406734891" class="result-title hdrlnk" id="postid_7406734891" >$99 DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,350</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406735394">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-deposit/7406735394.html" class="result-image gallery" data-ids="3:00m0m_dXmhdgXW7tXz_0g70c5,3:00X0X_biZzRk6y5ZNz_0g70c5,3:00X0X_lRRy83VFzMhz_0g70c5,3:00e0e_7s2HGbfEbIFz_0g70c5,3:00b0b_keNDdfmAxyqz_09G07g,3:00U0U_dzSrhN7o8dez_0g70c5,3:00G0G_2jN5tAVvd6kz_0g70c5,3:00f0f_gzmsdwtPABBz_0g70c5,3:00a0a_9kLR4CRvZfaz_0g70c5,3:00n0n_6gqenxw3MJjz_0g70c5,3:00E0E_fVuySWvrENCz_0g70c5,3:00d0d_aWgYAsKAA0Vz_0g70c5,3:00M0M_NgHK7kfoXlz_0c50g7,3:00K0K_k3jwD0vCfpVz_09G07g,3:00W0W_g8ja8gXnZI9z_0g70c5,3:00q0q_7l4ThuFiJyCz_0g70c5,3:00B0B_7xw0ICTIufQz_0g70c5,3:00f0f_lmXQMqq2okTz_09C0c5,3:00Z0Z_82fJ2ihoppvz_09I0c5,3:00R0R_laQXXDylxNQz_0lu0c5,3:01010_1BbsAVkz4Maz_0lu0c5,3:00H0H_lnaxgZsXAD1z_0lu0c5">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:45" title="Thu 11 Nov 06:45:16 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-deposit/7406735394.html" data-id="7406735394" class="result-title hdrlnk" id="postid_7406735394" >$99 DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406730585">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406730585.html" class="result-image gallery" data-ids="3:00E0E_fgk5kkAAVngz_0pO0hc,3:00S0S_MEZHI2W06cz_0pO0hc,3:01313_aqGBpm7h5Wlz_0pO0hc,3:00O0O_9v1Un2VwDoPz_0pO0hb,3:00S0S_i5mSpm1LQRWz_0fB0jm,3:00v0v_18DRBwUy8y7z_0pO0hb,3:01616_gedytbesuqmz_0pO0hc,3:00F0F_8TxUAlSywsMz_0pO0hc,3:00r0r_9ZdLty4P8Hkz_0pO0hc,3:00r0r_9ZdLty4P8Hkz_0pO0hc,3:00404_8iNLOllzMRSz_0pO0hc,3:00i0i_33CNPPjTVMKz_0pO0hc,3:00R0R_e2fL7fVchDyz_0pO0hc,3:00404_i0RHkeJWNuHz_0pO0hc,3:00M0M_A1XBhmSR0Fz_0pO0hc,3:00a0a_2d5KLvfh1M1z_0pO0hc,3:00S0S_9kgiNOZmRljz_0pO0hc,3:01212_76HzuDltGqxz_0pO0hP,3:00h0h_j8MoNeSFJi0z_0pO0hc,3:00101_fIGFDZk6pTaz_0pO0hc">
                <span class="result-price">$2,795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:44" title="Thu 11 Nov 06:44:10 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406730585.html" data-id="7406730585" class="result-title hdrlnk" id="postid_7406730585" >$500 DEPOSIT ONE AND TWO BEDROOM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,795</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402713327" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402713327.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:43" title="Thu 11 Nov 06:43:41 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7402713327.html" data-id="7402713327" class="result-title hdrlnk" id="postid_7402713327" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406732567">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-750-deposit-studiooneand-two/7406732567.html" class="result-image gallery" data-ids="3:00C0C_bUlT78KTwUiz_0hd0bw,3:00c0c_4mM1tclodnUz_0gZ0bg,3:00T0T_lkgDxHPxkxJz_0h40bi,3:00u0u_87ND5Rp1Pg6z_0he0bj,3:00S0S_1HhPR5Zb6MEz_0hh0bj,3:00c0c_eNJMjujWyo3z_0hj0bm,3:00C0C_cXXcluwbofxz_0h40bx,3:00w0w_d2hRYvTJGe6z_0hf0bi,3:00m0m_aFDxTzb8Tyz_0hg0b8,3:00K0K_3TmXmpEnVamz_0gY0aV">
                <span class="result-price">$3,365</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:41" title="Thu 11 Nov 06:41:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-750-deposit-studiooneand-two/7406732567.html" data-id="7406732567" class="result-title hdrlnk" id="postid_7406732567" >$750 DEPOSIT STUDIO,ONE,AND TWO BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,365</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406729140">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406729140.html" class="result-image gallery" data-ids="3:01313_aqGBpm7h5Wlz_0pO0hc,3:00S0S_MEZHI2W06cz_0pO0hc,3:00E0E_fgk5kkAAVngz_0pO0hc,3:00O0O_9v1Un2VwDoPz_0pO0hb,3:00S0S_i5mSpm1LQRWz_0fB0jm,3:00v0v_18DRBwUy8y7z_0pO0hb,3:01616_gedytbesuqmz_0pO0hc,3:00F0F_8TxUAlSywsMz_0pO0hc,3:00r0r_9ZdLty4P8Hkz_0pO0hc,3:00r0r_9ZdLty4P8Hkz_0pO0hc,3:00404_8iNLOllzMRSz_0pO0hc,3:00i0i_33CNPPjTVMKz_0pO0hc,3:00R0R_e2fL7fVchDyz_0pO0hc,3:00404_i0RHkeJWNuHz_0pO0hc,3:00M0M_A1XBhmSR0Fz_0pO0hc,3:00a0a_2d5KLvfh1M1z_0pO0hc,3:00S0S_9kgiNOZmRljz_0pO0hc,3:01212_76HzuDltGqxz_0pO0hP,3:00h0h_j8MoNeSFJi0z_0pO0hc,3:00101_fIGFDZk6pTaz_0pO0hc">
                <span class="result-price">$3,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:38" title="Thu 11 Nov 06:38:42 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406729140.html" data-id="7406729140" class="result-title hdrlnk" id="postid_7406729140" >$500 DEPOSIT ONE AND TWO BEDROOM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,650</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406732106">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-750-deposit-studiooneand-two/7406732106.html" class="result-image gallery" data-ids="3:00C0C_bUlT78KTwUiz_0hd0bw,3:00C0C_cXXcluwbofxz_0h40bx,3:00S0S_1HhPR5Zb6MEz_0hh0bj,3:00c0c_eNJMjujWyo3z_0hj0bm,3:00u0u_87ND5Rp1Pg6z_0he0bj,3:00w0w_d2hRYvTJGe6z_0hf0bi,3:00T0T_lkgDxHPxkxJz_0h40bi,3:00c0c_4mM1tclodnUz_0gZ0bg,3:00m0m_aFDxTzb8Tyz_0hg0b8,3:00K0K_3TmXmpEnVamz_0gY0aV">
                <span class="result-price">$2,868</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:37" title="Thu 11 Nov 06:37:49 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-750-deposit-studiooneand-two/7406732106.html" data-id="7406732106" class="result-title hdrlnk" id="postid_7406732106" >$750 DEPOSIT STUDIO,ONE,AND TWO BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,868</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405802480" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7405802480.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:36" title="Thu 11 Nov 06:36:55 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7405802480.html" data-id="7405802480" class="result-title hdrlnk" id="postid_7405802480" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    1br -
                    816ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406734301">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-depositrapid-approval/7406734301.html" class="result-image gallery" data-ids="3:00n0n_6gqenxw3MJjz_0g70c5,3:00a0a_9kLR4CRvZfaz_0g70c5,3:00E0E_fVuySWvrENCz_0g70c5,3:00d0d_aWgYAsKAA0Vz_0g70c5,3:00f0f_lmXQMqq2okTz_09C0c5,3:00K0K_k3jwD0vCfpVz_09G07g,3:00b0b_keNDdfmAxyqz_09G07g,3:00X0X_biZzRk6y5ZNz_0g70c5,3:00e0e_7s2HGbfEbIFz_0g70c5,3:00U0U_dzSrhN7o8dez_0g70c5,3:00X0X_lRRy83VFzMhz_0g70c5,3:00m0m_dXmhdgXW7tXz_0g70c5,3:00G0G_2jN5tAVvd6kz_0g70c5,3:00f0f_gzmsdwtPABBz_0g70c5,3:00M0M_NgHK7kfoXlz_0c50g7,3:00W0W_g8ja8gXnZI9z_0g70c5,3:00q0q_7l4ThuFiJyCz_0g70c5,3:00B0B_7xw0ICTIufQz_0g70c5,3:00Z0Z_82fJ2ihoppvz_09I0c5,3:00R0R_laQXXDylxNQz_0lu0c5,3:01010_1BbsAVkz4Maz_0lu0c5,3:00H0H_lnaxgZsXAD1z_0lu0c5">
                <span class="result-price">$1,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:36" title="Thu 11 Nov 06:36:28 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-depositrapid-approval/7406734301.html" data-id="7406734301" class="result-title hdrlnk" id="postid_7406734301" >$99 DEPOSIT,RAPID APPROVAL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,999</span>


                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406726885">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406726885.html" class="result-image gallery" data-ids="3:01313_aqGBpm7h5Wlz_0pO0hc,3:00S0S_MEZHI2W06cz_0pO0hc,3:00E0E_fgk5kkAAVngz_0pO0hc,3:00O0O_9v1Un2VwDoPz_0pO0hb,3:00S0S_i5mSpm1LQRWz_0fB0jm,3:00v0v_18DRBwUy8y7z_0pO0hb,3:01616_gedytbesuqmz_0pO0hc,3:00F0F_8TxUAlSywsMz_0pO0hc,3:00r0r_9ZdLty4P8Hkz_0pO0hc,3:00r0r_9ZdLty4P8Hkz_0pO0hc,3:00404_8iNLOllzMRSz_0pO0hc,3:00i0i_33CNPPjTVMKz_0pO0hc,3:00R0R_e2fL7fVchDyz_0pO0hc,3:00404_i0RHkeJWNuHz_0pO0hc,3:00M0M_A1XBhmSR0Fz_0pO0hc,3:00a0a_2d5KLvfh1M1z_0pO0hc,3:00S0S_9kgiNOZmRljz_0pO0hc,3:01212_76HzuDltGqxz_0pO0hP,3:00h0h_j8MoNeSFJi0z_0pO0hc,3:00101_fIGFDZk6pTaz_0pO0hc">
                <span class="result-price">$2,795</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:33" title="Thu 11 Nov 06:33:07 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-500-deposit-one-and-two-bedroom/7406726885.html" data-id="7406726885" class="result-title hdrlnk" id="postid_7406726885" >$500 DEPOSIT ONE AND TWO BEDROOM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,795</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405801649" data-repost-of="7400471217">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7405801649.html" class="result-image gallery" data-ids="3:00t0t_92noQhJ6wnYz_0lM0cf,3:00202_8zQNk6ZHnIFz_0lM0ev,3:00S0S_bSV13Ia3rMzz_0lM0ev,3:00S0S_8IfSgaaJEmlz_0lM0ev,3:00i0i_awzVTbesYa1z_0lM0gk">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:30" title="Thu 11 Nov 06:30:09 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-brand-new-building/7405801649.html" data-id="7405801649" class="result-title hdrlnk" id="postid_7405801649" >ONE MONTH FREE *** BRAND NEW BUILDING *** ONLY $1000 SECURITY DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    689ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7396764410" data-repost-of="6842599527">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-huge-luxury-1-with-d-parking-pool/7396764410.html" class="result-image gallery" data-ids="1:01717_iuKf8KoZPGy,1:00707_fiVg24ISmhY,1:00S0S_1inKaL6hBUV,1:01111_daekk15zSJr,1:00B0B_78AqhtrHnAk,1:00q0q_a43njKjfMjq,1:00W0W_3aEAe7RR51B,1:01313_izFXf0cYMZF,1:00909_fJfzrxUA1C6,1:00X0X_iZyPrpROfLO,1:00g0g_25Qyd6Vvt3N,1:00Z0Z_d0TenriwNOo,1:00R0R_7xiKtygSQ9W,1:00z0z_iQEZCAUDKmi,1:00Z0Z_9UTHyjJSFYX,1:00606_bpfmG67wKFs,1:00C0C_cne0LvN1u3K">
                <span class="result-price">$2,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:27" title="Thu 11 Nov 06:27:21 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-huge-luxury-1-with-d-parking-pool/7396764410.html" data-id="7396764410" class="result-title hdrlnk" id="postid_7396764410" >HUGE LUXURY 1/1 WITH W/D, PARKING, POOL, GYM.. ( ONLY $500 DEPOSIT )</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,100</span>

                <span class="housing">
                    1br -
                    944ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (LITTLE HAVANA / DOWNTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406731942">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406731942.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:25" title="Thu 11 Nov 06:25:27 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406731942.html" data-id="7406731942" class="result-title hdrlnk" id="postid_7406731942" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7405801908" data-repost-of="7005804619">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7405801908.html" class="result-image gallery" data-ids="3:00J0J_754pfWIVKDpz_0fu0bC,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00v0v_iG10Tf6VdAzz_0fu09M">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:23" title="Thu 11 Nov 06:23:23 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-only-one-month-deposit-first/7405801908.html" data-id="7405801908" class="result-title hdrlnk" id="postid_7405801908" >*** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE *** FAST APPROVAL***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    1br -
                    776ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406702624">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-modern-townhouse-at-century/7406702624.html" class="result-image gallery" data-ids="3:00y0y_1ApJQyIsQcxz_0pO0ev,3:00x0x_enBpQ8MMoT2z_0pO0ev,3:00O0O_wTm1fDAKxaz_0pO0e5,3:00i0i_705zPrbjioyz_0pO0fE,3:00X0X_6pTWIzuTNXVz_0pO0eG,3:00g0g_FRJnNbjI2Bz_0pO0ev,3:00S0S_lDzY8G9P67sz_0pO0ev,3:00y0y_35lewYZEfrLz_0pO0ev,3:00h0h_9LUIGfmOtawz_0pO0ev,3:00d0d_lEtoKr7fTWLz_0pO0ev,3:00v0v_buv5Z1BCvh6z_0pO0ev">
                <span class="result-price">$1,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:21" title="Thu 11 Nov 06:21:38 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-modern-townhouse-at-century/7406702624.html" data-id="7406702624" class="result-title hdrlnk" id="postid_7406702624" >NEW MODERN TOWNHOUSE AT CENTURY PARK PLACE.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,600</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402872909" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7402872909.html" class="result-image gallery" data-ids="3:00j0j_4cTJdRZl58yz_0CI0t2,3:00n0n_foIsXPWzIoEz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$3,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:16" title="Thu 11 Nov 06:16:38 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7402872909.html" data-id="7402872909" class="result-title hdrlnk" id="postid_7402872909" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,250</span>

                <span class="housing">
                    2br -
                    1040ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406728161">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406728161.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:16" title="Thu 11 Nov 06:16:20 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406728161.html" data-id="7406728161" class="result-title hdrlnk" id="postid_7406728161" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7402302255" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7402302255.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:09" title="Thu 11 Nov 06:09:52 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7402302255.html" data-id="7402302255" class="result-title hdrlnk" id="postid_7402302255" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,150</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406719285">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-elegant-apartment-2/7406719285.html" class="result-image gallery" data-ids="3:01616_1hdOjHwiM5Gz_0pO0jm,3:00808_co0FCJqTX1iz_0pO0jm,3:01212_9wOe7fZ7Evgz_0pO0jm,3:00m0m_itA2m1fDOqmz_0ew0jm,3:00q0q_5hJihQXVYQrz_0ew0jm,3:00s0s_lA4Q0dmfB49z_0pO0jm,3:00s0s_3CvGbHPXaDuz_0ew0jm,3:00D0D_6dG2U6iW5cuz_0pO0jm">
                <span class="result-price">$2,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:09" title="Thu 11 Nov 06:09:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-elegant-apartment-2/7406719285.html" data-id="7406719285" class="result-title hdrlnk" id="postid_7406719285" >Elegant Apartment 3/2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,100</span>

                <span class="housing">
                    3br -
                    1210ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Pinecrest miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406723013">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-rapid-approval-luxury-apartments/7406723013.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00K0K_iHFCJSCmYgfz_09G07g,3:00Z0Z_6gmTGqupX63z_09G07g,3:00o0o_5woNqetj2lCz_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00I0I_hpfLGhjjD6hz_09G07g,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00C0C_97tZUzXsAS5z_0au05f,3:00V0V_aguo2Ifflznz_0au06X,3:00Y0Y_eJFFQpLdhinz_0au06Z,3:00l0l_lkErGV5wQD0z_0au06Z,3:00202_be3jcPNwGr1z_0au06Z,3:00s0s_4MtT3BX9JYOz_0au06Z,3:00707_jnH8eBI2DLRz_0au05f,3:00d0d_gFaFfxofWvz_0au07S,3:00W0W_eOsbuWMWooFz_0au07S,3:00O0O_8dBpcHAcgMvz_0au07S,3:00J0J_fBqavg9tXw3z_0au07S,3:00606_jtXG4QI9Ps7z_0au07S,3:00I0I_bElbqLWNVCjz_0au07S,3:00404_4g08UjA05qCz_0au07S,3:00707_1Or9QW07l7Lz_0au07S,3:00U0U_kCEkeyH01HVz_0at06y">
                <span class="result-price">$4,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:04" title="Thu 11 Nov 06:04:04 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-rapid-approval-luxury-apartments/7406723013.html" data-id="7406723013" class="result-title hdrlnk" id="postid_7406723013" >RAPID APPROVAL LUXURY APARTMENTS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,300</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7399205264" data-repost-of="7010056245">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7399205264.html" class="result-image gallery" data-ids="3:00h0h_hmn6UEI5AVhz_0CI0t2,3:00U0U_1kU7xcUO865z_0CI0t2,3:00j0j_4cTJdRZl58yz_0CI0t2,3:00b0b_gA2e0K4xw9vz_0lM0t2,3:01313_cvvAmafUNq9z_0CI0t2,3:00d0d_7K8q4YkULkhz_0CI0t2,3:00r0r_b1yjJBMp0SMz_0t20CI,3:00Y0Y_7r8UgFPzjJ0z_0oM0dW,3:00l0l_452m6n9TC4kz_0oM0dW,3:00q0q_6majqPOcgNbz_0oM0dW,3:00F0F_eqQFvn4NwEMz_0oM0dW,3:00B0B_8iVuagmDYnYz_0oM0dW,3:00s0s_88gYvkPrJyVz_0oM0dW,3:00N0N_eUIjW5XcdR1z_0oM0dW,3:00A0A_bHerSjvyiN5z_0oM0dW,3:00M0M_6Y660kMAcywz_0oM0dW,3:00O0O_i62oMte3AZiz_0oM0dW,3:00R0R_6WSQbzJOlZgz_0oM0dW,3:00202_b1LbYg4Czlyz_0oM0dW,3:00v0v_3NgqLvVocaIz_0oM0dW,3:00T0T_d9A3g2h22Siz_0oM0dW,3:00101_8nt1Na84ktZz_0oM0dW">
                <span class="result-price">$4,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:03" title="Thu 11 Nov 06:03:06 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-building-only-500-security/7399205264.html" data-id="7399205264" class="result-title hdrlnk" id="postid_7399205264" >*** NEW BUILDING  *** ONLY $500 SECURITY DEPOSIT *** DOWNTOWN</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,100</span>

                <span class="housing">
                    3br -
                    1272ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (DOWNTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406722454">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-apartments-with-rapid/7406722454.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00K0K_iHFCJSCmYgfz_09G07g,3:00Z0Z_6gmTGqupX63z_09G07g,3:00o0o_5woNqetj2lCz_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00I0I_hpfLGhjjD6hz_09G07g,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00C0C_97tZUzXsAS5z_0au05f,3:00V0V_aguo2Ifflznz_0au06X,3:00Y0Y_eJFFQpLdhinz_0au06Z,3:00l0l_lkErGV5wQD0z_0au06Z,3:00202_be3jcPNwGr1z_0au06Z,3:00s0s_4MtT3BX9JYOz_0au06Z,3:00707_jnH8eBI2DLRz_0au05f,3:00d0d_gFaFfxofWvz_0au07S,3:00W0W_eOsbuWMWooFz_0au07S,3:00O0O_8dBpcHAcgMvz_0au07S,3:00J0J_fBqavg9tXw3z_0au07S,3:00606_jtXG4QI9Ps7z_0au07S,3:00I0I_bElbqLWNVCjz_0au07S,3:00404_4g08UjA05qCz_0au07S,3:00707_1Or9QW07l7Lz_0au07S,3:00U0U_kCEkeyH01HVz_0at06y">
                <span class="result-price">$2,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:02" title="Thu 11 Nov 06:02:41 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-apartments-with-rapid/7406722454.html" data-id="7406722454" class="result-title hdrlnk" id="postid_7406722454" >LUXURY APARTMENTS WITH RAPID APPROVAL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,999</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406712986">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-house-2/7406712986.html" class="result-image gallery" data-ids="3:00g0g_LqxdLtDSB6z_0fO0bR,3:00q0q_4Xnkbu317K2z_0fO0bR,3:00I0I_gDpX4Y6YksLz_0fO0bR,3:00h0h_ag822DiysQxz_0fO0bR,3:00m0m_2iDk5yDC11gz_0fO0bR,3:00909_1n2006GjPuwz_0fO0bR,3:00505_o8WmhgWUcKz_0fO0bR,3:00505_bJiX6MyZKRGz_0fO0bR,3:00N0N_7xmcejLqGQ8z_0fO0bR,3:00r0r_ge6R8eBiE5Oz_0fO0bR">
                <span class="result-price">$2,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 18:00" title="Thu 11 Nov 06:00:26 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-great-house-2/7406712986.html" data-id="7406712986" class="result-title hdrlnk" id="postid_7406712986" >Great House 3/2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,700</span>

                <span class="housing">
                    3br -
                    1085ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Richmond Heights miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406715878">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-wonderful-condominium-25/7406715878.html" class="result-image gallery" data-ids="3:00F0F_1gKXX0MEFwYz_0pO0cd,3:00S0S_3Bb4dt8iNE6z_0ew0jm,3:00d0d_3dvUhLEJS0Dz_0pO0jm,3:00F0F_hBw6c8lP9NGz_0pO0jm,3:00v0v_hcSHel1OgC6z_0pO0jm,3:00x0x_cYLMrXcrr7Oz_0ew0jm,3:00505_iofF26oUGwPz_0ew0jm,3:00c0c_aTPR6VpDBfRz_0pO0cd,3:00m0m_eIje0dC58GZz_0pO0cd">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:55" title="Thu 11 Nov 05:55:12 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-wonderful-condominium-25/7406715878.html" data-id="7406715878" class="result-title hdrlnk" id="postid_7406715878" >Wonderful condominium 3/2.5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    3br -
                    1477ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (The Hammocks miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406718817">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406718817.html" class="result-image gallery" data-ids="3:00V0V_auoebkspcQVz_07g09G,3:00z0z_9EaUeZ0SczGz_07g09G,3:00I0I_3pHrx1mG694z_07g09G,3:00o0o_h1MFo5poHN7z_07g09G,3:00000_dL8CBMQYYZsz_07g09G,3:00O0O_kVDGiAc1VNMz_07g09G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:54" title="Thu 11 Nov 05:54:02 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-2058-ne-167th-st-bedrooms-25-baths/7406718817.html" data-id="7406718817" class="result-title hdrlnk" id="postid_7406718817" >2058 NE 167TH ST  3 BEDROOMS 2.5 BATHS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406713233">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-resort-style-swimming-pools/7406713233.html" class="result-image gallery" data-ids="3:01616_hYGUSdu23xLz_09G05j,3:00Z0Z_6WTrrukCqXsz_09G05j,3:00L0L_cZ6yO896nI4z_09G05j,3:00W0W_fKatuJQ1qsxz_09G05j,3:00U0U_1tIPJPWAR61z_09G05j,3:00G0G_l3oQFEvCCZYz_09G05j,3:00s0s_ku4l8ygemsMz_09G05j,3:00q0q_6F63hq2f2X4z_0qs0ew,3:00Y0Y_dpWNS5UdUffz_0d2084,3:00505_gDCI83Y58Jhz_0g60a6,3:00m0m_52vxYSc4Dxz_0qs0ew,3:00S0S_kiEBwKvGlyez_04w04w,3:01616_gNCzLInIp2fz_04w04w,3:00l0l_77j7os6I2RNz_04w04w,3:00e0e_3qM4NFqjTY6z_0qs0ew,3:00J0J_Jc0kFFE9Wuz_0qs0ew,3:00p0p_7m1B2votTvlz_0qs0ew,3:00909_9N3CX6cJLLGz_0qs0ew,3:00606_1Lghwo4exy6z_0qs0ew,3:00T0T_ag1bedGwaJaz_0qs0ew">
                <span class="result-price">$3,213</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:50" title="Thu 11 Nov 05:50:00 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-resort-style-swimming-pools/7406713233.html" data-id="7406713233" class="result-title hdrlnk" id="postid_7406713233" >Resort-Style Swimming Pools &amp; Sundeck, Community Tennis Courts</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,213</span>

                <span class="housing">
                    3br -
                    1268ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Doral miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7401961887" data-repost-of="7005814302">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401961887.html" class="result-image gallery" data-ids="3:00v0v_iG10Tf6VdAzz_0fu09M,3:00b0b_1acWmOGhYxqz_0fu09U,3:00F0F_4AUGwfkjnewz_0fu09U,3:00y0y_1WzBjRnNuJbz_0aY0ew,3:00Z0Z_g1Fe31W2xzMz_09H0ew,3:00N0N_2JbIeA4ref1z_0fu09U,3:00L0L_2N0E1Ltt9hWz_0fu09A,3:00c0c_4FWqIwqMDBJz_0fu09K,3:00n0n_lCOnCDVDKqCz_0fu09U,3:00J0J_754pfWIVKDpz_0fu0bC">
                <span class="result-price">$2,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:49" title="Thu 11 Nov 05:49:34 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-fast-approval-only-one-month/7401961887.html" data-id="7401961887" class="result-title hdrlnk" id="postid_7401961887" >*** FAST APPROVAL *** ONLY ONE MONTH DEPOSIT *** FIRST MONTH FREE ***</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,800</span>

                <span class="housing">
                    2br -
                    1190ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7406714324">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-property-balconies-amenities/7406714324.html" class="result-image gallery" data-ids="3:00Q0Q_juI31P75Pdhz_0iD0cI,3:00606_5gkkwLbsuv6z_0nW0fU,3:00S0S_awjuouoNGoBz_09Z06E,3:00X0X_3Pxxt1WziT1z_0il0a9,3:00j0j_cEnwhh38FETz_0bs06m,3:00V0V_85S1GKpBlVnz_07i04R,3:00n0n_3pgkQtDwlP8z_0fb07t,3:00o0o_ecxKURkzPNXz_0aP05Z,3:00I0I_2grXoG396R5z_0mM0cH,3:00u0u_3tgw8Cdwnmdz_0pL0h8,3:00S0S_lSsKQKfwMBdz_09s05g">
                <span class="result-price">$2,350</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-11-11 17:49" title="Thu 11 Nov 05:49:32 PM">Nov 11</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-new-property-balconies-amenities/7406714324.html" data-id="7406714324" class="result-title hdrlnk" id="postid_7406714324" >New Property, Balconies, Amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,350</span>

                <span class="housing">
                    1br -
                    779ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>

                    
                    
                </ul>
            </div>

            <div class="search-legend bottom">
                <div class="search-view">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="search-sort">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">3000</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/mdc/apa" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/mdc/apa" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">3000</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/mdc/apa?s=120" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

            </div>

            <section class="blurbs">
                
            </section>

            <div id="floater">
                <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                <img class="payload" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
            </div>
        </form>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>

<div class="slidemessage">
    <span class="fave">
        <span class="star"></span>
        favorited
    </span>
    <span class="unfave">
        <span class="star"></span>
        no longer favorited
    </span>
    <span class="hide">
        <span class="trash"></span>
        hidden
    </span>
    <span class="unhide">
        <span class="trash"></span>
        no longer hidden
    </span>
</div>

<footer>
    <ul class="clfooter">
        <li>&copy; 2021 <span class="desktop">craigslist</span><span class="mobile">CL</span></li>
        <li><a href="https://www.craigslist.org/about/help/">help</a></li>
        <li><a href="https://www.craigslist.org/about/scams">safety</a></li>
        <li class="desktop"><a href="https://www.craigslist.org/about/privacy.policy">privacy</a><sup class="neu">new</sup></li>
        <li class="desktop"><a href="https://forums.craigslist.org/?forumID=8">feedback</a></li>
        <li><a href="https://www.craigslist.org/about/terms.of.use">terms</a></li>
        <li><a href="https://www.craigslist.org/about/">about</a></li>
        <li class="fsel desktop linklike" data-mode="mobile">mobile</li>
        <li class="fsel mobile linklike" data-mode="regular">desktop</li>
    </ul>
</footer>
    </section>

<template id="gallerycarousel">
    <div class="slider-info"></div><div class="slider-back arrow">&lt;</div><div class="slider-forward arrow">&gt;</div>
</template>

<script type="text/template" id="clustertemplate">
    <li class="posting {visited}" data-pid="{PostingID}">
        <img src="{ImageThumb}">
        <div class="housing_bubble_banner">
            <span class="{hasPrice}price">{currencySymbol}{price}</span>
            <span class="bedrooms">{BedroomsContent}</span>
            <span class="postingtitle"><a>{PostingTitle}</a></span>
            <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                <span class="banish">
                    <span class="icon icon-trash" role="button"></span>
                    <span class="screen-reader-text">hide this posting</span>
                </span>
                <span class="unbanish">
                    <span class="icon icon-trash red" role="button"></span>
                    unhide
                </span>
            </span>
        </div>
    </li>
</script>
<script type="text/template" id="postingtemplate">
    <div class="viewcontainer pics loading">
        <div class="backtolist">
            &laquo; back to posting list
        </div>
        <div class="title">
            <span class="icon icon-star" data-pid="{PostingID}" role="button">
                <span class="screen-reader-text">favorite this post</span>
            </span>
            <span class="postingtitle">
                <a href="{PostingURL}" target="_blank">{PostingTitle}</a>
            </span>
            <div>
                <span class="{hasPrice}price">{currencySymbol}{price}</span>
                <span class="bedrooms">{BedroomsContent}</span>
                <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                    <span class="banish">
                        <span class="icon icon-trash" role="button"></span>
                        <span class="screen-reader-text">hide this posting</span>
                    </span>
                    <span class="unbanish">
                        <span class="icon icon-trash red" role="button"></span>
                        <span class="screen-reader-text">unhide</span>
                        unhide
                    </span>
                </span>
            </div>
        </div>
        <hr style="clear:both">
        <div class="picscontainer gallery">
            <span class="slider-back arrow">&lt;</span><span class="slider-info"></span><span class="slider-forward arrow">&gt;</span>
            <div class="swipe">
                <div class="swipe-wrap">
                    <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                </div>
            </div>
        </div>
        <div class="infocontainer"></div>
        <hr style="clear:both">
        <div class="timecontainer"></div>
        <a class="viewpostinglink" href="{PostingURL}" target="_blank">view posting</a>
        <div class="contenttoggle">
            <a class="moreinfo">more info</a>
            <a class="showpics">show images</a>
        </div>
    </div>
</script>
<script type="text/template" id="popuptemplate">
    <div id="mapbubble" class="posting">
        <ul id="clusterbubble"></ul>
        <div id="postbubble"></div>
    </div>
</script>


</body>
</html>

  recorded_at: Fri, 12 Nov 2021 03:16:31 GMT
recorded_with: VCR 6.0.0
