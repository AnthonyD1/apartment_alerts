---
http_interactions:
- request:
    method: get
    uri: https://ipinfo.io/ip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - ipinfo.io
  response:
    status:
      code: 200
      message: OK
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '13'
      Date:
      - Tue, 07 Sep 2021 04:05:41 GMT
      X-Envoy-Upstream-Service-Time:
      - '1'
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
    body:
      encoding: UTF-8
      string: 198.98.57.230
  recorded_at: Tue, 07 Sep 2021 04:05:41 GMT
- request:
    method: get
    uri: https://miami.craigslist.org/search/mdc/apa?hasPic=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - miami.craigslist.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Last-Modified:
      - Tue, 07 Sep 2021 04:05:42 GMT
      Cache-Control:
      - max-age=900, public
      Date:
      - Tue, 07 Sep 2021 04:05:42 GMT
      Vary:
      - Accept-Encoding
      Content-Length:
      - '33137'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - cl_b=4|e0a4aed191ac6d1dcff31bf59328ac3aa8e397da|1630987542wv_N8;path=/;domain=.craigslist.org;expires=Fri,
        01-Jan-2038 00:00:00 GMT
      Server:
      - Apache
      Expires:
      - Tue, 07 Sep 2021 04:20:42 GMT
      Strict-Transport-Security:
      - max-age=63072000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html>
<head>
    
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta property="og:site_name" content="craigslist">
	<meta name="twitter:card" content="preview">
	<meta property="og:title" content="miami / dade apartments / housing for rent - craigslist">
	<meta name="description" content="miami / dade apartments / housing for rent - craigslist">
	<meta property="og:description" content="miami / dade apartments / housing for rent - craigslist">
	<meta property="og:url" content="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa">
	<title>miami / dade apartments / housing for rent - craigslist</title>
	<link rel="canonical" href="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa">
	<link rel="next" href="https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa?s=120&amp;hasPic=1">



<script type="application/ld+json" id="ld_breadcrumb_data" >
    {"@context":"https://schema.org","itemListElement":[{"item":{"name":"miami.craigslist.org","@id":"https://miami.craigslist.org"},"position":1,"@type":"ListItem"},{"item":{"name":"miami / dade","@id":"https://miami.craigslist.org/mdc/"},"position":2,"@type":"ListItem"},{"item":{"name":"housing","@id":"https://miami.craigslist.org/d/housing/search/mdc/hhh"},"position":3,"@type":"ListItem"},{"item":{"name":"apartments / housing for rent","@id":"https://miami.craigslist.org/d/apartments-housing-for-rent/search/mdc/apa"},"position":4,"@type":"ListItem"}],"@type":"BreadcrumbList"}
</script>

    <style type="text/css">
        body {
            font-family: sans-serif;
        }

        #no-js,
        #unsupported-browser {
            position: fixed;
            z-index: 10000;

            top: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        #no-js p,
        #unsupported-browser p {
            color: black;
            background-color: #FA8787;
            opacity: 0.8;
            text-align: center;
            margin: 0;
            border: 0;
            padding: 1em;
        }

        #unsupported-browser {
            display: none;
        }

        .unsupported-browser #unsupported-browser {
            display: block;
        }

        .no-js header,
        .no-js form,
        .no-js .tryapp,
        .no-js .tsb,
        .unsupported-browser header,
        .unsupported-browser form,
        .unsupported-browser .tryapp,
        .unsupported-browser .tsb {
            display: none;
        }

        #curtain {
            display: none;
            position: fixed;
            z-index: 9000;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
            background: transparent;
        }

        .show-curtain #curtain {
            display: block;
        }

        #curtain .cover,
        #curtain .content {
            position: absolute;
            display: block;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0;
            padding: 0;
            border: 0;
        }

        #curtain .cover {
            z-index: 1;
            background-color: white;
        }

        .show-curtain #curtain .cover {
            opacity: 0.5;
        }

        .show-curtain.opaque #curtain .cover {
            opacity: 1;
        }

        #curtain .content {
            z-index: 2;
            background: transparent;
            color: #00E;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(359deg);
            }
        }

        .pacify #curtain .icom- {
            font-size: 3em;
            animation: rotate 2s infinite linear;
        }

        .pacify #curtain .icom-:after {
            content: "\eb23";
        }

        #curtain .text {
            display: none;
            font-size: 2em;
        }

        .loading #curtain .text.loading,
        .reading #curtain .text.reading,
        .writing #curtain .text.writing,
        .saving #curtain .text.saving,
        .searching #curtain .text.searching,
        .unrecoverable #curtain .text.unrecoverable,
        .message #curtain .text.message {
            display: block;
        }
    </style>


    
     
     <script src="https://www.craigslist.org/static/www/624b74aa8b4527d20c3824dcfac3de9a03adaea8.js"></script>
     <script>
         window.cl.init(
             'https://www.craigslist.org/static/www/',
             '',
             'www',
             'browsePostings',
             {
areaCountry: "US",
areaID: "20",
areaRegion: "FL",
catAbb: "apa",
countOfTotalText: "image {count} of {total}",
currencySymbol: "&#x0024;",
defaultView: "grid",
expiredFavIDs: null,
imageConfig: {"1":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"4":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"0":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450"]},"3":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]},"2":{"hostname":"https://images.craigslist.org","sizes":["50x50c","300x300","600x450","1200x900"]}},
lessInfoText: "less info",
maptileBaseUrl: "//map{s}.craigslist.org/t09/{z}/{x}/{y}.png",
maxResults: 3000,
noImageText: "no image",
pID: null,
postalLat: null,
postalLon: null,
purveyorCategories: null,
searchDistance: null,
sectionAbb: "hhh",
sectionBase: "hhh",
showInfoText: "show info",
showMapTabs: 1,
showingBanished: 0,
showingFavorites: 0,
starHint: "save this post in your favorites list",
subarea: "mdc",
zoomToPosting: null
},
             0
         );
     </script>
     
</head>
<body class="no-js show-curtain opaque search has-map" >
    
    <iframe id="cl-local-storage" src="https://www.craigslist.org/static/www/localStorage-092e9f9e2f09450529e744902aa7cdb3a5cc868d.html" style="display:none;"></iframe>
    

    <div id="curtain">
        <div class="cover"></div>
        <div class="content">
            <div class="icom-"></div>
            <div class="text loading">loading</div>
            <div class="text reading">reading</div>
            <div class="text writing">writing</div>
            <div class="text saving">saving</div>
            <div class="text searching">searching</div>
            <div class="text unrecoverable">
                There was an error loading the page; please try to
                <a id="cl-unrecoverable-hard-refresh" href="#" onclick="location.reload(true);">refresh the page.</a>
            </div>
            <div class="text message"></div>
        </div>
    </div>
    <noscript id="no-js"><div>
        <p>We've detected that JavaScript is not enabled in your browser.</p>
        <p>You must enable JavaScript to use craigslist.</p>
    </div></noscript>
    <div id="unsupported-browser">
        <p>We've detected you are using a browser that is missing critical features.</p>
        <p>Please visit craigslist from a modern browser.</p>
    </div>

    <section class="page-container" id="page-top" data-areaid="20">
        <div class="bglogo"></div>
        <div class="tryapp">
    try the craigslist app &raquo;
    <a class="appstorebtn"
    href="https://play.google.com/store/apps/details?id=org.craigslist.CraigslistMobile">
        Android
    </a>
    <a class="appstorebtn"
    href="https://apps.apple.com/us/app/craigslist/id1336642410">
        iOS
    </a>
</div>
<header class="global-header wide">
   <a class="header-logo" name="logoLink" href="https://miami.craigslist.org/mdc/">CL</a>

    <nav class="breadcrumbs-container">
<form id="breadcrumbform" class="breadcrumbs-form" method="get" action="/search/mdc/apa" data-action="/search/###/apa">
    <input type="hidden" name="hasPic" value="1">

    <ul class="breadcrumbs ">
        <li class="crumb area">
            
            <span class="no-js">
                <a href="/">south florida</a>
            </span>
                <select name="areaAbb" id="areaAbb" class="js-only">
                    <option value="miami">south florida</option>
                        <option value="keys">florida keys</option>
                        <option value="fortmyers">fort myers</option>
                        <option value="cfl">heartland FL</option>
                        <option value="lakeland">lakeland</option>
                        <option value="orlando">orlando</option>
                        <option value="sarasota">sarasota</option>
                        <option value="spacecoast">space coast</option>
                        <option value="tampa">tampa bay</option>
                        <option value="treasure">treasure coast</option>
                </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb subarea">
            <select id="subArea" name="subArea">
                <option value="">all south florida</option>
                <option value="brw">broward county</option>
                <option value="mdc" selected>miami / dade</option>
                <option value="pbc">palm beach co</option>
            </select>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb section">
                    <select name="catAbb" id="catAbb">
                        <option value="ccc">community</option>
                        <option value="eee">events</option>
                        <option value="sss">for sale</option>
                        <option value="ggg">gigs</option>
                        <option value="hhh" selected>housing</option>
                        <option value="jjj">jobs</option>
                        <option value="rrr">resumes</option>
                        <option value="bbb">services</option>
                    </select>
                <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb category">
            <select id="subcatAbb" class="js-only">
                <option value="hhh">all</option>
                    <option value="apa" selected>apartments / housing for rent</option>
                    <option value="swp">housing swap</option>
                    <option value="off">office &amp; commercial</option>
                    <option value="prk">parking &amp; storage</option>
                    <option value="reb">real estate - by broker</option>
                    <option value="reo">real estate - by owner</option>
                    <option value="roo">rooms &amp; shares</option>
                    <option value="sub">sublets &amp; temporary</option>
                    <option value="vac">vacation rentals</option>
                    <option value="hou">wanted: apts</option>
                    <option value="rew">wanted: real estate</option>
                    <option value="sha">wanted: room/share</option>
                    <option value="sbw">wanted: sublet/temp</option>
            </select><span class="no-js">apartments / housing for rent</span>
            <span class="breadcrumb-arrow">&gt;</span>
        </li>
        <li class="crumb no-js">
            <input type="submit" value="go">
        </li>
    </ul>
</form>
    </nav>

<div class="userlinks">
    <ul class="user-actions">
        <li class="user post">
            <a href="https://post.craigslist.org/c/mia">post</a>
        </li>
        <li class="user account">
            <a href="https://accounts.craigslist.org/login/home">account</a>
        </li>
    </ul>
    <ul class="user-favs-discards">
        <li class="user">
            <div class="favorites">
                <a href="#" class="favlink"><span class="icon icon-star fav" aria-hidden="true"></span><span class="fav-number">0</span><span class="fav-label"> favorites</span></a>
            </div>
        </li>
        <li class="user discards">
            <div class="to-banish-page">
                <a href="#" class="to-banish-page-link">
                    <span class="icon icon-trash red" aria-hidden="true"></span>
                    <span class="banished_count">0</span>
                    <span class="discards-label"> hidden</span>
                </a>
            </div>
        </li>
    </ul>
</div>

</header>
<header class="global-header narrow">
   <a class="header-logo" href="https://miami.craigslist.org/mdc/">CL</a>
    <nav class="breadcrumbs-container">

    <h1 class="breadcrumbs">

miami / dade            &gt;

apartments / housing for rent    </h1>


    </nav>
    <span class="linklike show-wide-header">...</span>
</header>


        <form id="searchform" class="search-form" action="/d/apartments-housing-for-rent/search/mdc/apa" >
            <div class="querybox">
                <div class="form-tab js-only"><span class="search-open" title="hide search">&laquo;</span><span class="search-closed" title="show search">&raquo;</span></div>
                <input type="text" placeholder="search apartments / housing for rent" name="query"
                    id="query" value="" autocorrect="off" class="flatinput ui-autocomplete-input"
                    autocapitalize="off" autocomplete="off" data-autocomplete="search">

                <button type="submit" class="searchbtn">
                    <span class="icon icon-search" aria-hidden="true"></span>
                    <span class="screen-reader-text">press to search craigslist</span>
                </button>
                    <div class="savealert">
                        <a class="saveme" data-action="save"  href="https://accounts.craigslist.org/savesearch/save?URL=https%3A%2F%2Fmiami%2Ecraigslist%2Eorg%2Fd%2Fapartments%2Dhousing%2Dfor%2Drent%2Fsearch%2Fmdc%2Fapa%3FhasPic%3D1"  title="save this search" >save search</a>
                    </div>
            </div>

            <div class="search-options-container">
    <h1 class="cattitle">
            <a href="/d/apartments-housing-for-rent/search/mdc/apa" title="clear all search parameters" class="reset">apartments / housing for rent</a>
    </h1>
    <div class="search-options-header linklike">
        <div class="icon icon-toggle-gear" aria-hidden="true"></div>
        options<span class="options-close">close</span>
    </div>
    <input id="excats" type="hidden" name="excats">
    <div class="search-options">
        <div class="searchgroup categories">
        </div>
        <input type="hidden" name="userid" value="" />





        <div class="searchgroup" id="basic-bools">
            <ul>
    <li>
       <label class="srchType">
           <input type="checkbox" name="srchType" class="" value="T" >
           search titles only
       </label>
    </li>
    <li>
       <label class="hasPic">
           <input type="checkbox" name="hasPic" class="autosubmit" value="1"  checked>
           has image
       </label>
    </li>
    <li>
       <label class="postedToday">
           <input type="checkbox" name="postedToday" class="autosubmit" value="1" >
           posted today
       </label>
    </li>
    <li>
       <label class="bundleDuplicates">
           <input type="checkbox" name="bundleDuplicates" class="autosubmit" value="1" >
           bundle duplicates
       </label>
    </li>
</ul>

                <ul class="js-only nearbyAreas ">

                </ul>
        </div>

            <div class="searchgroup">
                <span class="searchfieldlabel">miles from zip</span>
                <input size="5" maxlength="5" inputmode="numeric"
                    class="flatinput searchInput search_distance" placeholder="miles"
                    name="search_distance"
                    value=""
                />
                <input type="text" class="flatinput searchInput postal" placeholder="from zip"
                    size="7" name="postal" value="">
                <span class="icon icon-locate"></span>
            </div>


    <div class="searchgroup minmax price" id="price">
<span class="searchfieldlabel">price</span>
    <input type="tel" name="min_price" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="max_price" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>


  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bedrooms</span>
    <select name="min_bedrooms" class="autosubmit">
      <option value="">min</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bedrooms" class="autosubmit">
      <option value="">max</option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

  <div class="searchgroup bed-bath-selects">
    <span class="searchfieldlabel">bathrooms</span>
    <select name="min_bathrooms" class="autosubmit">
      <option value="">min</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
    -
    <select name="max_bathrooms" class="autosubmit">
      <option value="">max</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
    </select>
  </div>

    <div class="searchgroup minmax " id="">
<span class="searchfieldlabel">ft<sup>2</sup></span>
    <input type="tel" name="minSqft" class="flatinput min" placeholder="min" title="whole number, no letters or symbols" value="">
    <input type="tel" name="maxSqft" class="flatinput max" placeholder="max" title="whole number, no letters or symbols" value="">
</div>

<div class="searchgroup">
  <span class="searchfieldlabel">availability</span>
  <select class="autosubmit" name="availabilityMode">
        <option value="0">all dates</option>
        <option value="1">within 30 days</option>
        <option value="2">beyond 30 days</option>
 </select>
</div>

<div class="searchgroup search-group-checkbox">
<label class="pets_cat">
        <input type="checkbox" name="pets_cat" value="1" class="autosubmit" />
    cats ok
</label><br>
<label class="pets_dog">
        <input type="checkbox" name="pets_dog" value="1" class="autosubmit" />
    dogs ok
</label><br>
<label class="is_furnished">
        <input type="checkbox" name="is_furnished" value="1" class="autosubmit" />
    furnished
</label><br>
<label class="no_smoking">
        <input type="checkbox" name="no_smoking" value="1" class="autosubmit" />
    no smoking
</label><br>
<label class="wheelchaccess">
        <input type="checkbox" name="wheelchaccess" value="1" class="autosubmit" />
    wheelchair access
</label><br>
<label class="airconditioning">
        <input type="checkbox" name="airconditioning" value="1" class="autosubmit" />
    air conditioning
</label><br>
<label class="ev_charging">
        <input type="checkbox" name="ev_charging" value="1" class="autosubmit" />
    EV charging
</label><br>
<label class="application_fee">
        <input type="checkbox" name="application_fee" value="1" class="autosubmit" />
    no application fee
</label><br>
<label class="broker_fee">
        <input type="checkbox" name="broker_fee" value="1" class="autosubmit" />
    no broker fee
</label><br>
</div>

<div class="searchgroup search-group-multi_checkbox">
<div class="search-attribute hide-list" data-attr="housing_type">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> housing type
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="housing_type_1" name="housing_type" class="multi_checkbox" value="1" type="checkbox"
                     />
                    apartment
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_2" name="housing_type" class="multi_checkbox" value="2" type="checkbox"
                     />
                    condo
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_3" name="housing_type" class="multi_checkbox" value="3" type="checkbox"
                     />
                    cottage/cabin
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_4" name="housing_type" class="multi_checkbox" value="4" type="checkbox"
                     />
                    duplex
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_5" name="housing_type" class="multi_checkbox" value="5" type="checkbox"
                     />
                    flat
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_6" name="housing_type" class="multi_checkbox" value="6" type="checkbox"
                     />
                    house
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_7" name="housing_type" class="multi_checkbox" value="7" type="checkbox"
                     />
                    in-law
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_8" name="housing_type" class="multi_checkbox" value="8" type="checkbox"
                     />
                    loft
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_9" name="housing_type" class="multi_checkbox" value="9" type="checkbox"
                     />
                    townhouse
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_10" name="housing_type" class="multi_checkbox" value="10" type="checkbox"
                     />
                    manufactured
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_11" name="housing_type" class="multi_checkbox" value="11" type="checkbox"
                     />
                    assisted living
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="housing_type_12" name="housing_type" class="multi_checkbox" value="12" type="checkbox"
                     />
                    land
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="laundry">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> laundry
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="laundry_1" name="laundry" class="multi_checkbox" value="1" type="checkbox"
                     />
                    w/d in unit
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_4" name="laundry" class="multi_checkbox" value="4" type="checkbox"
                     />
                    w/d hookups
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_2" name="laundry" class="multi_checkbox" value="2" type="checkbox"
                     />
                    laundry in bldg
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_3" name="laundry" class="multi_checkbox" value="3" type="checkbox"
                     />
                    laundry on site
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="laundry_5" name="laundry" class="multi_checkbox" value="5" type="checkbox"
                     />
                    no laundry on site
                </label>
            </li>



    </ul>
</div>
<div class="search-attribute hide-list" data-attr="parking">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> parking
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="parking_1" name="parking" class="multi_checkbox" value="1" type="checkbox"
                     />
                    carport
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_2" name="parking" class="multi_checkbox" value="2" type="checkbox"
                     />
                    attached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_3" name="parking" class="multi_checkbox" value="3" type="checkbox"
                     />
                    detached garage
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_4" name="parking" class="multi_checkbox" value="4" type="checkbox"
                     />
                    off-street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_5" name="parking" class="multi_checkbox" value="5" type="checkbox"
                     />
                    street parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_6" name="parking" class="multi_checkbox" value="6" type="checkbox"
                     />
                    valet parking
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="parking_7" name="parking" class="multi_checkbox" value="7" type="checkbox"
                     />
                    no parking
                </label>
            </li>

            <li class="selectall js-only ">
                <span class="all">select all</span>
                <span class="none">deselect all</span>
            </li>


    </ul>
</div>
<div class="search-attribute hide-list" data-attr="rent_period">
    <div class="title linklike ">
        <span class="plus">&#9656;</span><span class="minus">&#9662;</span> rent period
    </div>

        <ul class="list">

            <li class="checkbox ">
                <label>
                    <input id="rent_period_1" name="rent_period" class="multi_checkbox" value="1" type="checkbox"
                     />
                    daily
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_2" name="rent_period" class="multi_checkbox" value="2" type="checkbox"
                     />
                    weekly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_3" name="rent_period" class="multi_checkbox" value="3" type="checkbox"
                     />
                    monthly
                </label>
            </li>
            <li class="checkbox ">
                <label>
                    <input id="rent_period_4" name="rent_period" class="multi_checkbox" value="4" type="checkbox"
                     />
                    yearly
                </label>
            </li>



    </ul>
</div>
</div>


            <div class="searchgroup">
                    <div class="searchfieldlabel">open house date</div>
                <select class="autosubmit" id="sale_date" name="sale_date">
                    <option>all dates</option>
                        <option value="2021-09-07">sep 7 - today</option>
                        <option value="2021-09-08">sep 8 - tomorrow</option>
                        <option value="2021-09-09">sep 9 - thursday</option>
                        <option value="2021-09-10">sep 10 - friday</option>
                        <option value="2021-09-11">sep 11 - saturday</option>
                        <option value="2021-09-12">sep 12 - sunday</option>
                        <option value="2021-09-13">sep 13 - monday</option>
                        <option value="2021-09-14">sep 14 - tuesday</option>
                        <option value="2021-09-15">sep 15 - wednesday</option>
                        <option value="2021-09-16">sep 16 - thursday</option>
                        <option value="2021-09-17">sep 17 - friday</option>
                        <option value="2021-09-18">sep 18 - saturday</option>
                        <option value="2021-09-19">sep 19 - sunday</option>
                        <option value="2021-09-20">sep 20 - monday</option>
                        <option value="2021-09-21">sep 21 - tuesday</option>
                        <option value="2021-09-22">sep 22 - wednesday</option>
                        <option value="2021-09-23">sep 23 - thursday</option>
                        <option value="2021-09-24">sep 24 - friday</option>
                        <option value="2021-09-25">sep 25 - saturday</option>
                        <option value="2021-09-26">sep 26 - sunday</option>
                        <option value="2021-09-27">sep 27 - monday</option>
                        <option value="2021-09-28">sep 28 - tuesday</option>
                        <option value="2021-09-29">sep 29 - wednesday</option>
                        <option value="2021-09-30">sep 30 - thursday</option>
                        <option value="2021-10-01">oct 1 - friday</option>
                        <option value="2021-10-02">oct 2 - saturday</option>
                        <option value="2021-10-03">oct 3 - sunday</option>
                        <option value="2021-10-04">oct 4 - monday</option>
                </select>
            </div>
        <div class="searchgroup resetsearch">
            <a href="/d/apartments-housing-for-rent/search/mdc/apa" title="clear all search parameters" class="reset linklike">reset</a>
            <button type="submit" class="searchlink linklike">update search</button>
        </div>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>
    </div>
</div>


            <div class="search-legend">
<div class="search-view js-only">
    <div class="dropdown dropdown-icons dropdown-arrows dropdown-view" role="toolbar" aria-label="view options" aria-expanded="false">
        <ul class="dropdown-list">
            <li class="dropdown-item mode sel">
                <button title="show results in a list" data-selection="list" id="listview">
                    <span class="view-list icon"></span>list
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results in a list with thumbnail pictures"  data-selection="pic"  id="picview" >
                    <span class="view-thumb icon"></span>thumb
                </button>
                <span class="toggle-arrow"></span>
            </li>
            <li class="dropdown-item mode">
                <button title="show results side-by-side with larger pictures" data-selection="grid" id="gridview">
                    <span class="view-gallery icon"></span>gallery
                </button>
                <span class="toggle-arrow"></span>
            </li>
                <li class="dropdown-item mode">
                    <button title="show results on a map"  data-selection="map"  id="mapview" >
                        <span class="view-map icon"></span>map
                    </button>
                    <span class="toggle-arrow"></span>
                </li>
        </ul>
    </div>
</div>
                <div class="search-sort" >
    <div class="dropdown dropdown-sort dropdown-arrows" data-default-sort="date" role="toolbar" aria-label="sort options" aria-expanded="false">
        <ul class="dropdown-list">

            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="upcoming" title="show upcoming open houses" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=upcoming&amp;hasPic=1">upcoming <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode sel" aria-selected="true">
                <a data-selection="date" title="show newest matches first" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=date&amp;hasPic=1">newest <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="priceasc" title="sort by price, lowest to highest" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=priceasc&amp;hasPic=1">price ↑ <span class="toggle-arrow"></span></a>
            </li>
            <li class="dropdown-item mode " aria-selected="false">
                <a data-selection="pricedsc" title="sort by price, highest to lowest" href="/d/apartments-housing-for-rent/search/mdc/apa?sort=pricedsc&amp;hasPic=1">price ↓ <span class="toggle-arrow"></span></a>
            </li>

        </ul>
    </div>
</div>

                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">3000</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">3000</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/mdc/apa?s=120&amp;hasPic=1" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

                
            </div>
            <div class="content" id="sortable-results" >
                <section class="favlistsection">
                    <section class="favlistinfo">
                    </section>
                    <section class="banishlistinfo">
                    </section>
                </section>


                    


<div class="open-map-view-button">
    <span>see in map view</span>
</div>
<div id="mapcontainer" data-arealat="25.773899" data-arealon="-80.193901">
    <div id="noresult-overlay"></div>
    <div id="noresult-text">
        <span class="message">No mappable items found</span>
    </div>
    <div id="map" class="loading">
        <div class="close-full-screen-map-mode-button">close fullscreen</div>
    </div>
</div>

                <ul class="rows" id="search-results">
                             <li class="result-row" data-pid="7376726370">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-the-cosmopolitan-condo/7376726370.html" class="result-image gallery" data-ids="3:00505_fxQtWckzjAnz_0kE0di,3:00N0N_dIhinZiaCQpz_0kI0l5,3:00M0M_cEKCZGHIiMoz_0co0gw,3:00U0U_7HyzPqwJK0Dz_0co0gw,3:00303_5KAc6anvKw6z_0gv0gw,3:00V0V_dmj1DPUN68rz_0gw0dp,3:00f0f_hg9MJxKnBXZz_0kE07u,3:00G0G_5xNyYNak3JGz_0co0gw,3:00w0w_jNGMCdKJxziz_0co0gw,3:01313_gbVQjKpDL3Dz_0co0gw,3:00F0F_967vbiwCXzHz_0ky0cm,3:00s0s_d1eJUx6T09xz_0kE0cV">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:55" title="Mon 06 Sep 11:55:09 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-the-cosmopolitan-condo/7376726370.html" data-id="7376726370" class="result-title hdrlnk" id="postid_7376726370" >The Cosmopolitan Condo South Beach</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    1br -
                    686ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (South of Fifth miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7369379453">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-the-cosmopolitan-south-beach/7369379453.html" class="result-image gallery" data-ids="3:00505_fxQtWckzjAnz_0kE0di,3:00N0N_dIhinZiaCQpz_0kI0l5,3:00303_5KAc6anvKw6z_0gv0gw,3:00U0U_7HyzPqwJK0Dz_0co0gw,3:00V0V_dmj1DPUN68rz_0gw0dp,3:00G0G_5xNyYNak3JGz_0co0gw,3:00f0f_hg9MJxKnBXZz_0kE07u,3:00M0M_cEKCZGHIiMoz_0co0gw,3:00s0s_d1eJUx6T09xz_0kE0cV,3:00F0F_967vbiwCXzHz_0ky0cm,3:01313_gbVQjKpDL3Dz_0co0gw,3:00w0w_jNGMCdKJxziz_0co0gw">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:50" title="Mon 06 Sep 11:50:49 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-the-cosmopolitan-south-beach/7369379453.html" data-id="7369379453" class="result-title hdrlnk" id="postid_7369379453" >The Cosmopolitan South Beach</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    1br -
                    686ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (South of Fifth miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376720111" data-repost-of="7006934370">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-bed-45-baths-house-with-pool/7376720111.html" class="result-image gallery" data-ids="3:00808_gyrdJmIKN8kz_0pO0hd,3:00n0n_aJrQ2SQjB6Hz_0pO0hd,3:00m0m_ja1v3TrFkSlz_0pO0hd,3:00707_8b4V0yKFBPKz_0pO0hd,3:00V0V_hrBdV8S5xJ1z_0pO0hd,3:00R0R_7zcjS6nYfZcz_0pO0hd,3:00y0y_jtxf3UbSbnDz_0cV0jm,3:00X0X_5rMgkEMwHMRz_0cV0jm,3:00r0r_lok5NuePNa0z_0pO0hd,3:00m0m_bA5HHkr6Pqyz_0pO0hd,3:01212_gMwtDPpu7J5z_0pO0aZ">
                <span class="result-price">$8,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:39" title="Mon 06 Sep 11:39:26 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-bed-45-baths-house-with-pool/7376720111.html" data-id="7376720111" class="result-title hdrlnk" id="postid_7376720111" >4 BED 4.5 BATHS HOUSE WITH A POOL</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$8,500</span>

                <span class="housing">
                    4br -
                    3423ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376722102">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-come-live-in-paradise/7376722102.html" class="result-image gallery" data-ids="3:00O0O_fQgr2Oc7PXFz_0dm0eb,3:00b0b_baNSwkhYcpHz_0dm08R,3:00000_23EyIIx2k1Kz_0dm08S,3:00r0r_atjOGDgbzWMz_0pO0jm,3:00404_7bqnT7S1sCVz_0pO0jm,3:00303_jWQVcGicZGlz_0ew0jm,3:00202_qEzljg06sAz_0dm08Y">
                <span class="result-price">$3,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:33" title="Mon 06 Sep 11:33:07 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-come-live-in-paradise/7376722102.html" data-id="7376722102" class="result-title hdrlnk" id="postid_7376722102" >Come live in PARADISE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,000</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (BAL HARBOUR miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376720421" data-repost-of="7358763825">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-ft-lot-waterfrontage-house/7376720421.html" class="result-image gallery" data-ids="3:00X0X_l5qwXDjijS2z_0pO0hb,3:00606_dncFkdMwtzOz_0gw0co,3:00d0d_b7BhJT4lDhEz_0ak07K,3:01313_aVDYELD0P4lz_0ak07K,3:00I0I_buFShL0JyV9z_07K0ak,3:00F0F_hXpL2Ji3t8Vz_07K0ak,3:00M0M_7GiQgh3NBzrz_0ak07K,3:00h0h_lL9ZGGRAhCAz_07K0ak,3:00h0h_ggcONSex5GXz_07K0ak,3:00b0b_9OeYpUD0Ddmz_0ak07K,3:00707_1xzcQc5nxmyz_07K0ak,3:01010_akuzw8M4sGSz_0pO0hd,3:00d0d_hSegTYUpAe3z_0ak07K,3:00202_bTI2WBOKhPlz_0pO0hd,3:00h0h_5AfORGnGc4gz_0pO0hb,3:00505_g9A7fPYijQFz_0gw0co,3:00909_8C5NPDD24mlz_0gw0co,3:00z0z_a4zPx7vPAYBz_0gw0co,3:00E0E_3G2ZoE7VjXbz_0gw0co,3:00O0O_5DNVv6fkuWzz_0gw0co,3:00q0q_bsuj7Wdik4Qz_0co0gw,3:00t0t_hhTyDPEJux0z_0gw0co,3:00808_bYCWOaKvoTFz_0gw0co,3:01717_4noCWnUr3esz_0gw0co">
                <span class="result-price">$6,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:25" title="Mon 06 Sep 11:25:04 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-ft-lot-waterfrontage-house/7376720421.html" data-id="7376720421" class="result-title hdrlnk" id="postid_7376720421" >11,237 Ft lot waterfrontage house by a golf course.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,000</span>

                <span class="housing">
                    2br -
                    1845ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Normandy Shores miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376720301" data-repost-of="7304530888">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-lovingly-furnished/7376720301.html" class="result-image gallery" data-ids="3:00E0E_5W040o80BUnz_0pO0ev,3:00A0A_cpamwErld4iz_0pO0ev,3:01212_kR081saiDLZz_0pO0ev,3:00A0A_1hbenePfsFPz_0pO0ew,3:00000_eortHy1TXO2z_0pO0ew,3:00d0d_gpQ2p0cb9SJz_0pO0ex,3:00Z0Z_hEwdSEwq0swz_0pO0ew,3:00K0K_jnCCiJqsbMGz_0pO0ev,3:00P0P_aWwc19snC4Cz_0pO0ew,3:00t0t_dNpaQoAFpa0z_0pO0ew,3:00P0P_9sbCtFsNIUSz_0pO0ew,3:01010_c47TCdrHlQJz_0pO0ew,3:00U0U_7pCJUlv4CT1z_0pO0ew,3:00707_fwfx5Rm59oTz_0pO0ew">
                <span class="result-price">$11,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:24" title="Mon 06 Sep 11:24:25 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-lovingly-furnished/7376720301.html" data-id="7376720301" class="result-title hdrlnk" id="postid_7376720301" >Lovingly Furnished renovated 2 Bed 2 Bath house in great neighborhood.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$11,000</span>

                <span class="housing">
                    2br -
                    1175ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Venetian Island miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376720214" data-repost-of="7357940547">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-bed-bath-in-this-wonderful/7376720214.html" class="result-image gallery" data-ids="3:00v0v_5ehsVL50Jgdz_0pO0hc,3:00W0W_jpw3sXvptjbz_0pO0jm,3:00y0y_8aIKrewYusXz_0pO0hc,3:00U0U_9FxnRmEIj5sz_0pO0hc,3:01313_dviCuI4YYxUz_0pO0hc,3:00U0U_gJ9BromlCOpz_0pO0hc,3:00U0U_eCQkciuQWInz_0pO0hc,3:00r0r_6et1BKMDFErz_0pO0hc,3:00F0F_3aSesXYRZ2uz_0pO0hc,3:00T0T_4tm6XduTNHMz_0pO0hc,3:00w0w_6ygFWol9J62z_0pO0hc,3:00F0F_8bwOcxDebsIz_0pO0hc,3:00s0s_AutYEGxw2rz_0pO0hc,3:00n0n_kVMNNjxwF2Mz_0pO0hc,3:00T0T_gwQdNUEXOnvz_0pO0hc,3:00R0R_g0zOjUYzOVBz_0pO0hc,3:00S0S_3EKMsYThtx1z_0pO0hc,3:00g0g_9nrACggVnnPz_0pO0hc,3:00m0m_itc35KIRQ3Ez_0pO0hc,3:00X0X_3r5hSoFgTNBz_0pO0hc,3:00y0y_a6dGlxbGYcAz_0pO0hc,3:00x0x_9bgdRNS4ta7z_0pO0jm,3:00202_iq8rWle8A6Wz_0pO0jm">
                <span class="result-price">$9,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:23" title="Mon 06 Sep 11:23:59 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-bed-bath-in-this-wonderful/7376720214.html" data-id="7376720214" class="result-title hdrlnk" id="postid_7376720214" >4 Bed 4 Bath in this wonderful Island</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$9,750</span>

                <span class="housing">
                    4br -
                    2517ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368559053" data-repost-of="7276140928">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-penthouse-in-the/7368559053.html" class="result-image gallery" data-ids="3:00a0a_8grx5faXjLMz_0ne0dW,3:00a0a_jO9AtZHqfgqz_0pO0ew,3:00707_9Z9FoWcwPQcz_0pO0c2,3:00e0e_4KCcTGaKFBWz_0pO0gF,3:00a0a_jShS4RRXkz7z_0pO0jm,3:00s0s_edy4oDKqewMz_0pO0ev">
                <span class="result-price">$8,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:45 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-penthouse-in-the/7368559053.html" data-id="7368559053" class="result-title hdrlnk" id="postid_7368559053" >Luxury Penthouse in the Heart of South Beach!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$8,000</span>

                <span class="housing">
                    2br -
                    2360ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach South of Fifth miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368550979" data-repost-of="7265387272">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-penthouse-paramount-3bdden-3bths/7368550979.html" class="result-image gallery" data-ids="3:01010_er8YG7iEqinz_0pO0hc,3:00909_5sLsGMlaKR6z_0pO0gu,3:00909_5sLsGMlaKR6z_0pO0gu,3:01111_kFvGSF1l5Dlz_0pO0hI,3:00707_jW0XT71bT0Jz_0mA0iM,3:00f0f_7HHjVB44f1Kz_0jm0aT,3:00D0D_gWZlmA93uyzz_0kE0fu,3:00O0O_3qPyDQH53yHz_0kE0fu,3:00b0b_3gC7ZcOfmrvz_0kE0fu,3:00w0w_i57GmUcEnptz_0kE0fu">
                <span class="result-price">$9,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:41 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-penthouse-paramount-3bdden-3bths/7368550979.html" data-id="7368550979" class="result-title hdrlnk" id="postid_7368550979" >PENTHOUSE PARAMOUNT 3BD+DEN/3BTHS LUXURY BUILDING PARAMOUNT MIAMI</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$9,500</span>

                <span class="housing">
                    3br -
                    2753ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368551249" data-repost-of="7239756018">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-roney-palace-oceanfront/7368551249.html" class="result-image gallery" data-ids="3:00a0a_ecOuZRB4Q5Pz_0pO0iB,3:00P0P_lNuclaxx9Alz_0pO0jm,3:00E0E_538YGBYQyFAz_0pO0jm,3:00I0I_1vSVC7Lp16Lz_0pO0hc,3:00Q0Q_4fXORGnNRvUz_0pO0hc,3:01111_95ivjnodPx5z_0pO0hc,3:00N0N_laWw5PJkpABz_0pO0jm">
                <span class="result-price">$8,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:36 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-roney-palace-oceanfront/7368551249.html" data-id="7368551249" class="result-title hdrlnk" id="postid_7368551249" >****RONEY PALACE*** OCEANFRONT RESORT IN SOUTH BEACH</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$8,000</span>

                <span class="housing">
                    3br -
                    1230ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach Roney Palace miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7369880440">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-stunning-ny-loft-style-house/7369880440.html" class="result-image gallery" data-ids="3:00101_jZ8uo2D3iZez_0pO0hc,3:00H0H_ifHliXRMhzvz_0pO0hc,3:00J0J_3PEDAqtRI90z_0pO0hc,3:01515_cF2js88uFLuz_0pO0hc,3:00r0r_4R8GmtqIkIuz_0pO0hc,3:01212_lKKo2PnCGTMz_0pO0hc,3:00q0q_51J0Eh9QgW1z_0pO0hc,3:00c0c_iZk170rjDzLz_0pO0hc,3:00Z0Z_4VCKsNj1D6az_0pO0hd,3:00k0k_jqIS7gYvMjkz_0pO0hc,3:00o0o_3U0Twes7LPQz_0pO0hc,3:00404_gy75C9y5bomz_0pO0hc,3:00W0W_ct4fnuTMe0Zz_0pO0hc,3:00o0o_65cXOYI9Wy5z_0pO0hc,3:00Q0Q_bgCVXOtYS0Qz_0pO0hc,3:00g0g_12iH9F4LA9bz_0pO0hc,3:01010_dSCtux1G1pvz_0pO0hc,3:00W0W_eMAVnEFnvvAz_0pO0hc,3:00s0s_7ZiChFJEz3Oz_0pO0hc,3:00C0C_evoZzMgsGMnz_0pO0hc,3:00p0p_l7DSglmaJN2z_0pO0hc,3:00707_bzTVihiSdDPz_0pO0hc,3:00X0X_iOYXrzRrCxkz_0pO0hc">
                <span class="result-price">$13,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:32 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-stunning-ny-loft-style-house/7369880440.html" data-id="7369880440" class="result-title hdrlnk" id="postid_7369880440" >Stunning NY loft Style house</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$13,000</span>

                <span class="housing">
                    4br -
                    2231ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7369880263">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-remodeled-bed-bath-house-in/7369880263.html" class="result-image gallery" data-ids="3:00h0h_57Dh63Jq4X6z_0pO0jm,3:00Z0Z_3D8bfOhQXgUz_0pO0jm,3:00X0X_lc8iPCifHazz_0pO0jm,3:00404_9A35fYFpObZz_0pO0jm,3:01212_2iceopsDgS8z_0pO0jm,3:00r0r_iALowLkNKwLz_0co0gw,3:00E0E_g1BhOOH5lX4z_0co0gw,3:00303_8jkt7sTOvLmz_0gw09P,3:00707_egl8fo3AJooz_0ew0jm,3:00m0m_ec7h3mvdNEZz_0ew0jm,3:00S0S_iGBbnqa0rY8z_0pO0jm,3:01313_d3mbg5a1yRDz_0pO0jm,3:00202_iYPSIzpJBFmz_0ew0jm,3:00l0l_lew48OdnYo3z_0ew0jm,3:00R0R_l0CxRAPkJKz_0pO0jm,3:00d0d_2867hTORkxBz_0pO0jm">
                <span class="result-price">$7,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:29 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-remodeled-bed-bath-house-in/7369880263.html" data-id="7369880263" class="result-title hdrlnk" id="postid_7369880263" >Remodeled 5 Bed 3 Bath house in a great neighborhood.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$7,999</span>

                <span class="housing">
                    5br -
                    2078ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Surfside miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368554846" data-repost-of="7324641761">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-brand-new-residence-in/7368554846.html" class="result-image gallery" data-ids="3:00B0B_56lnLr3mk1nz_0pO0hc,3:00E0E_c8Gg7a7FUT0z_0pO0jm,3:00e0e_iQOEosOaAD3z_0pO0hc,3:00a0a_bzt2l5JMD5Iz_0pO0hc,3:00z0z_iZHadw0A4wnz_0pO0hc,3:01515_1UxjjhRaGPgz_0pO0ha">
                <span class="result-price">$30,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:27 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-brand-new-residence-in/7368554846.html" data-id="7368554846" class="result-title hdrlnk" id="postid_7368554846" >Brand New Residence in prestigious Palm Island.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$30,000</span>

                <span class="housing">
                    4br -
                    3000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368552791" data-repost-of="7243634214">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-furnished-unit-in-rise-brickell/7368552791.html" class="result-image gallery" data-ids="3:00W0W_jH6Y0dG5QyMz_0pO0hd,3:00t0t_fsqVTcWqoaWz_0pO0hd,3:00p0p_kJErRSDpOKKz_0pO0hd,3:00u0u_gi3LlUv3ej1z_0pO0hd,3:00t0t_73iZW9FUdjDz_0pO0hd,3:00M0M_jN64n0omYsRz_0pO0hd,3:01414_gYvmqrClTsbz_0pO0jm,3:00E0E_4xQWO87SNUXz_0pO0jm,3:00G0G_gGOz19Shiejz_0pO0jm">
                <span class="result-price">$5,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:23 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-furnished-unit-in-rise-brickell/7368552791.html" data-id="7368552791" class="result-title hdrlnk" id="postid_7368552791" >**Furnished Unit in Rise Brickell**  spacious 2/2.5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,250</span>

                <span class="housing">
                    2br -
                    1276ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368558861" data-repost-of="7265387272">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-2bdden-3bths-luxury/7368558861.html" class="result-image gallery" data-ids="3:00909_5sLsGMlaKR6z_0pO0gu,3:00909_5sLsGMlaKR6z_0pO0gu,3:01111_kFvGSF1l5Dlz_0pO0hI,3:00707_jW0XT71bT0Jz_0mA0iM">
                <span class="result-price">$6,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:16 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-2bdden-3bths-luxury/7368558861.html" data-id="7368558861" class="result-title hdrlnk" id="postid_7368558861" >AMAZING 2BD+DEN/3BTHS LUXURY BUILDING PARAMOUNT MIAMI</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,500</span>

                <span class="housing">
                    2br -
                    1753ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368555103" data-repost-of="7232894426">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-luxury-building-sls/7368555103.html" class="result-image gallery" data-ids="3:01515_3uVjU1IFJmDz_0ak07K,3:00h0h_eeEWTl0bJx9z_0pO0jm,3:00w0w_gSedcM2AXFdz_0pO0jm,3:00101_e13hPK0v7Fuz_07x05U,3:00i0i_8F6q5HIKjrBz_0gP0c9,3:00K0K_32VcbLzf7bXz_0hw0bG,3:00F0F_31m1gHyobaTz_0hw0bG,3:00L0L_lBTJ0YUgyUSz_0hw0bG,3:00Y0Y_d6q18tSm3XAz_0hw0bG,3:00i0i_aivLjrHEnIWz_0hw0bF">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:10 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-luxury-building-sls/7368555103.html" data-id="7368555103" class="result-title hdrlnk" id="postid_7368555103" >Brand New Luxury Building “SLS Brickell”</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    2br -
                    1151ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368587876" data-repost-of="7243634214">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-reach-brickell-spacious-25-in-the/7368587876.html" class="result-image gallery" data-ids="3:01111_534IexnVmyTz_0cU0jm,3:00W0W_jH6Y0dG5QyMz_0pO0hd,3:00t0t_fsqVTcWqoaWz_0pO0hd,3:00p0p_kJErRSDpOKKz_0pO0hd,3:00u0u_gi3LlUv3ej1z_0pO0hd,3:00t0t_73iZW9FUdjDz_0pO0hd,3:00M0M_jN64n0omYsRz_0pO0hd">
                <span class="result-price">$5,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:06 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-reach-brickell-spacious-25-in-the/7368587876.html" data-id="7368587876" class="result-title hdrlnk" id="postid_7368587876" >**Reach Brickell**  spacious 2/2.5 in the heart of Brickell</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,250</span>

                <span class="housing">
                    2br -
                    1276ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368550852" data-repost-of="7236700902">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brickell-heights-with-15-ceilings/7368550852.html" class="result-image gallery" data-ids="3:00z0z_lmY6H5P5Qtcz_0cU0jm,3:00z0z_n3RiEQwLemz_0pO0ev,3:00101_9w3zRAACem1z_0pO0ev,3:00m0m_bMZEjqkbynlz_0pO0ev,3:01212_jPZmFK8Wdu0z_0pO0ev,3:00G0G_56ueFwS8Ymz_0pO0ev,3:00E0E_3zxyftX3xvKz_0pO0ev,3:00I0I_zy1gxI6TALz_0pO0ev">
                <span class="result-price">$6,125</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:20" title="Mon 06 Sep 11:20:00 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brickell-heights-with-15-ceilings/7368550852.html" data-id="7368550852" class="result-title hdrlnk" id="postid_7368550852" >***Brickell Heights*** with 15&#39; ceilings and modern luxury features</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,125</span>

                <span class="housing">
                    3br -
                    1533ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367662809" data-repost-of="7232894426">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-sls-brickell/7367662809.html" class="result-image gallery" data-ids="3:01515_3uVjU1IFJmDz_0ak07K,3:00h0h_eeEWTl0bJx9z_0pO0jm,3:00w0w_gSedcM2AXFdz_0pO0jm,3:00101_e13hPK0v7Fuz_07x05U,3:00i0i_8F6q5HIKjrBz_0gP0c9,3:00K0K_32VcbLzf7bXz_0hw0bG,3:00F0F_31m1gHyobaTz_0hw0bG,3:00L0L_lBTJ0YUgyUSz_0hw0bG,3:00Y0Y_d6q18tSm3XAz_0hw0bG,3:00i0i_aivLjrHEnIWz_0hw0bF">
                <span class="result-price">$5,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:55 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-sls-brickell/7367662809.html" data-id="7367662809" class="result-title hdrlnk" id="postid_7367662809" >Brand New Building “SLS Brickell”</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,500</span>

                <span class="housing">
                    2br -
                    1151ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367669833" data-repost-of="7232894426">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-1010-brickell/7367669833.html" class="result-image gallery" data-ids="3:01515_3uVjU1IFJmDz_0ak07K,3:00h0h_eeEWTl0bJx9z_0pO0jm,3:00707_24FQ0fEVhjdz_0pO0jm,3:00w0w_gSedcM2AXFdz_0pO0jm,3:00101_e13hPK0v7Fuz_07x05U,3:00i0i_8F6q5HIKjrBz_0gP0c9,3:00K0K_32VcbLzf7bXz_0hw0bG,3:00F0F_31m1gHyobaTz_0hw0bG,3:00L0L_lBTJ0YUgyUSz_0hw0bG,3:00Y0Y_d6q18tSm3XAz_0hw0bG,3:00i0i_aivLjrHEnIWz_0hw0bF">
                <span class="result-price">$3,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:49 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-1010-brickell/7367669833.html" data-id="7367669833" class="result-title hdrlnk" id="postid_7367669833" >Brand New Building “1010 Brickell”</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,400</span>

                <span class="housing">
                    1br -
                    651ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367661686" data-repost-of="7239171557">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-oceanfront-miami-beach-condo/7367661686.html" class="result-image gallery" data-ids="3:00P0P_lNuclaxx9Alz_0pO0jm,3:00E0E_538YGBYQyFAz_0pO0jm,3:00a0a_ecOuZRB4Q5Pz_0pO0iB,3:00I0I_1vSVC7Lp16Lz_0pO0hc,3:00Q0Q_4fXORGnNRvUz_0pO0hc,3:01111_95ivjnodPx5z_0pO0hc">
                <span class="result-price">$6,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:41 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-oceanfront-miami-beach-condo/7367661686.html" data-id="7367661686" class="result-title hdrlnk" id="postid_7367661686" >Oceanfront Miami Beach Condo</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,300</span>

                <span class="housing">
                    2br -
                    960ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (miami beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367661212" data-repost-of="7265387272">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-2bdden-3bths-luxury/7367661212.html" class="result-image gallery" data-ids="3:00909_5sLsGMlaKR6z_0pO0gu,3:00909_5sLsGMlaKR6z_0pO0gu,3:01111_kFvGSF1l5Dlz_0pO0hI,3:00707_jW0XT71bT0Jz_0mA0iM">
                <span class="result-price">$4,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:32 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-2bdden-3bths-luxury/7367661212.html" data-id="7367661212" class="result-title hdrlnk" id="postid_7367661212" >AMAZING 2BD+DEN/3BTHS LUXURY BUILDING PARAMOUNT MIAMI</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,500</span>

                <span class="housing">
                    2br -
                    1753ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367664871" data-repost-of="7324641761">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-brand-new-residence-in/7367664871.html" class="result-image gallery" data-ids="3:00B0B_56lnLr3mk1nz_0pO0hc,3:00E0E_c8Gg7a7FUT0z_0pO0jm,3:00e0e_iQOEosOaAD3z_0pO0hc,3:00a0a_bzt2l5JMD5Iz_0pO0hc,3:00z0z_iZHadw0A4wnz_0pO0hc,3:01515_1UxjjhRaGPgz_0pO0ha">
                <span class="result-price">$50,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:23 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-brand-new-residence-in/7367664871.html" data-id="7367664871" class="result-title hdrlnk" id="postid_7367664871" >Brand New Residence in prestigious Palm Island. (architect-Reinaldo Bo</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$50,000</span>

                <span class="housing">
                    4br -
                    3000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367669388" data-repost-of="7240151899">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-north-bay-village-luxury/7367669388.html" class="result-image gallery" data-ids="3:00D0D_7TEBVqdMpho_0hv0bG,3:00Q0Q_cQJNXADrldB_0hr0bI,3:00P0P_79EJ0FeD4oX_0hv0bG,3:00z0z_fe1J9dUPVFe_0hu0bG,3:00x0x_43GrNcwdATK_0hU0bq,3:00E0E_gRC8ZI2WXy6_0hv0bG,3:00l0l_jAtf1sv4Q0P_0hv0bG,3:00000_hWHAEVtG3db_0hv0bG,3:00m0m_boMqwWaYx32_0hq0bI,3:00O0O_g3neuQbCpiG_0hs0bH">
                <span class="result-price">$6,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:16 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-north-bay-village-luxury/7367669388.html" data-id="7367669388" class="result-title hdrlnk" id="postid_7367669388" >***NORTH BAY VILLAGE*** LUXURY CONDO FOR LEASE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,500</span>

                <span class="housing">
                    3br -
                    3000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NORTH BAY VILLAGE miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368553471" data-repost-of="7236700365">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-luxury-49th-floor/7368553471.html" class="result-image gallery" data-ids="3:00V0V_iaKXPcKdcIUz_09G05r,3:01313_3hBx92NEYtzz_09G07g,3:01515_2sjJRWA3TUDz_09G07g,3:00H0H_7EYOWbMRFdqz_09G07g,3:00z0z_hUjLQ5mPH0Iz_09G07g,3:00000_jpnFGN4bukmz_09G07g,3:00o0o_1nsHV0fw1Laz_09G07g">
                <span class="result-price">$4,255</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:11 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-luxury-49th-floor/7368553471.html" data-id="7368553471" class="result-title hdrlnk" id="postid_7368553471" >Brand New Luxury 49th Floor PENTHOUSE with incredible water views!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,255</span>

                <span class="housing">
                    2br -
                    1090ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367667491" data-repost-of="7243634214">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-reach-brickell-spacious-15/7367667491.html" class="result-image gallery" data-ids="3:01111_534IexnVmyTz_0cU0jm,3:00W0W_jH6Y0dG5QyMz_0pO0hd,3:00t0t_fsqVTcWqoaWz_0pO0hd,3:00p0p_kJErRSDpOKKz_0pO0hd,3:00u0u_gi3LlUv3ej1z_0pO0hd,3:00t0t_73iZW9FUdjDz_0pO0hd,3:00M0M_jN64n0omYsRz_0pO0hd">
                <span class="result-price">$3,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:19" title="Mon 06 Sep 11:19:04 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-reach-brickell-spacious-15/7367667491.html" data-id="7367667491" class="result-title hdrlnk" id="postid_7367667491" >**Reach Brickell**  spacious 2/1.5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,250</span>

                <span class="housing">
                    1br -
                    976ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367657201" data-repost-of="7263766068">

        <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-fabulous-amenities/7367657201.html" class="result-image gallery" data-ids="3:00v0v_gi55YRPMn0Vz_07K0ak,3:00J0J_bNc4iVx8qKSz_07K0ak,3:00R0R_ghIoLBEGP8Fz_07K0ak,3:01313_eQTuR1DMVZ5z_0pO0hc,3:00w0w_4bQKGCgNUZ3z_0pO0hX,3:00i0i_iOMnlfbyY1lz_0pO0hc,3:00E0E_1WI2qdaCE2vz_0pO0hc,3:00W0W_8NMBuFhY0KLz_0pO0hc,3:00909_5UKJ0hOwMiUz_0pO0hc,3:00h0h_i3oS1D80Js8z_07K0ak,3:00v0v_gi55YRPMn0Vz_07K0ak,3:00J0J_bNc4iVx8qKSz_07K0ak,3:00h0h_i3oS1D80Js8z_07K0ak">
                <span class="result-price">$6,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:58 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-fabulous-amenities/7367657201.html" data-id="7367657201" class="result-title hdrlnk" id="postid_7367657201" >Fabulous amenities including beach and pool services......</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$6,900</span>

                <span class="housing">
                    3br -
                    2137ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Sunny Isles Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367666766" data-repost-of="7323044464">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-this-is-month-to-month-stunning/7367666766.html" class="result-image gallery" data-ids="3:00s0s_aSsQZjQMz1Zz_0pO0ha,3:00R0R_7NSKLC6Pu16z_0pO0ev,3:00f0f_a2QwTg6lUFCz_0pO0eu,3:01414_kbMfEnoKazUz_0pO0eu,3:00m0m_6g2UqWQaFRiz_0pO0ew">
                <span class="result-price">$16,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:48 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-this-is-month-to-month-stunning/7367666766.html" data-id="7367666766" class="result-title hdrlnk" id="postid_7367666766" >THIS IS A (MONTH TO MONTH) STUNNING LAKEHOUSE HOME</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$16,500</span>

                <span class="housing">
                    4br -
                    1555ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367666477" data-repost-of="7243634214">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-reach-brickell-spacious-15/7367666477.html" class="result-image gallery" data-ids="3:01111_534IexnVmyTz_0cU0jm,3:00W0W_jH6Y0dG5QyMz_0pO0hd,3:00t0t_fsqVTcWqoaWz_0pO0hd,3:00p0p_kJErRSDpOKKz_0pO0hd,3:00u0u_gi3LlUv3ej1z_0pO0hd,3:00t0t_73iZW9FUdjDz_0pO0hd,3:00M0M_jN64n0omYsRz_0pO0hd">
                <span class="result-price">$3,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:43 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-reach-brickell-spacious-15/7367666477.html" data-id="7367666477" class="result-title hdrlnk" id="postid_7367666477" >**Reach Brickell**  spacious 1/1.5</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,250</span>

                <span class="housing">
                    1br -
                    976ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367665315" data-repost-of="7276140928">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-this-literally-one-of-kind/7367665315.html" class="result-image gallery" data-ids="3:00T0T_a3MKN70GC4Sz_0CI0lM,3:00H0H_5cEyWVi8FrWz_0CI0lM,3:00J0J_4kTyUVJZG2Az_0pO0hd,3:00O0O_aqv2qowy4J3z_0pO0hc,3:00D0D_4PK6jmUivudz_0pO0hd,3:00n0n_3POEOJ1AKjMz_0pO0hd,3:00k0k_lpm8kDEDCyMz_0pO0ew">
                <span class="result-price">$40,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:28 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-this-literally-one-of-kind/7367665315.html" data-id="7367665315" class="result-title hdrlnk" id="postid_7367665315" >This literally one of a kind loft combines sophistication</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$40,000</span>

                <span class="housing">
                    4br -
                    3360ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach South of Fifth miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367658712" data-repost-of="7240891471">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-miami-home-and-villa-6bed/7367658712.html" class="result-image gallery" data-ids="3:01414_5UrPzxIdTHb_0k20df,3:01515_cGB4jBMBO6A_0k20d7,3:00C0C_7SI5lpqfNho_0k20db,3:00w0w_116gt7cc06R_0k20da,3:01212_4RT8pzaW27O_0k20d4,3:01010_cQm5RTNvlUO_0k20de,3:00G0G_e3D6kir2MRX_0k20d5,3:00202_7payHdXXx46_0k20d8,3:00v0v_2eN8HqHl3DD_0k20da,3:00505_9508Bj33Ud8_0k20d5">
                <span class="result-price">$24,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:18 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-luxury-miami-home-and-villa-6bed/7367658712.html" data-id="7367658712" class="result-title hdrlnk" id="postid_7367658712" >Luxury Miami Home and Villa 6Bed 8Bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$24,000</span>

                <span class="housing">
                    6br -
                </span>

                <span class="result-hood"> (Coral Gables miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367661463" data-repost-of="7239756018">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-roney-palace-oceanfront/7367661463.html" class="result-image gallery" data-ids="3:00P0P_lNuclaxx9Alz_0pO0jm,3:00E0E_538YGBYQyFAz_0pO0jm,3:00a0a_ecOuZRB4Q5Pz_0pO0iB,3:00I0I_1vSVC7Lp16Lz_0pO0hc,3:00Q0Q_4fXORGnNRvUz_0pO0hc,3:01111_95ivjnodPx5z_0pO0hc,3:00N0N_laWw5PJkpABz_0pO0jm">
                <span class="result-price">$11,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:13 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-roney-palace-oceanfront/7367661463.html" data-id="7367661463" class="result-title hdrlnk" id="postid_7367661463" >****RONEY PALACE*** OCEANFRONT RESORT IN SOUTH BEACH</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$11,000</span>

                <span class="housing">
                    3br -
                    1230ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach Roney Palace miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367659375" data-repost-of="7240894855">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-miami-beach-bed-bath/7367659375.html" class="result-image gallery" data-ids="3:00M0M_7QYqrsBn6mfz_0oM0gx,3:00y0y_bk3V3P6PdcHz_0oM0gx,3:00D0D_8QWrWaOK3uyz_0oM0gw,3:00m0m_9Wdtg3au5lqz_0oM0gx,3:00I0I_lUmzGcebYwMz_0oM0gx,3:00q0q_aOm1rj78QlXz_0oM0gx,3:00606_9ywaZSM5gPlz_0oM0gx,3:00404_6JXirWhE57uz_0oM0gx">
                <span class="result-price">$30,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:04 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-miami-beach-bed-bath/7367659375.html" data-id="7367659375" class="result-title hdrlnk" id="postid_7367659375" >Luxury Miami beach 5 Bed 5 Bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$30,000</span>

                <span class="housing">
                    5br -
                    4000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367657386" data-repost-of="7232894426">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-sls-lux-luxury/7367657386.html" class="result-image gallery" data-ids="3:00V0V_iaKXPcKdcIUz_09G05r,3:01313_3hBx92NEYtzz_09G07g,3:01515_2sjJRWA3TUDz_09G07g,3:00H0H_7EYOWbMRFdqz_09G07g,3:00z0z_hUjLQ5mPH0Iz_09G07g,3:00000_jpnFGN4bukmz_09G07g,3:00o0o_1nsHV0fw1Laz_09G07g,3:00o0o_9l4UvsX8Xlsz_0mn0eU,3:00q0q_kPPEFCW4LKVz_0lP0ex">
                <span class="result-price">$5,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:18" title="Mon 06 Sep 11:18:00 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-sls-lux-luxury/7367657386.html" data-id="7367657386" class="result-title hdrlnk" id="postid_7367657386" >Brand New Building SLS LUX Luxury Miami unit!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,500</span>

                <span class="housing">
                    2br -
                    1651ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367662295" data-repost-of="7276140928">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-this-literally-one-of-kind/7367662295.html" class="result-image gallery" data-ids="3:00T0T_a3MKN70GC4Sz_0CI0lM,3:00H0H_5cEyWVi8FrWz_0CI0lM,3:00J0J_4kTyUVJZG2Az_0pO0hd,3:00O0O_aqv2qowy4J3z_0pO0hc,3:00D0D_4PK6jmUivudz_0pO0hd,3:00n0n_3POEOJ1AKjMz_0pO0hd,3:00k0k_lpm8kDEDCyMz_0pO0ew">
                <span class="result-price">$40,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:55 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-this-literally-one-of-kind/7367662295.html" data-id="7367662295" class="result-title hdrlnk" id="postid_7367662295" >This literally one of a kind loft combines sophistication</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$40,000</span>

                <span class="housing">
                    4br -
                    3360ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach South of Fifth miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367658355" data-repost-of="7276140928">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-penthouse-in-the/7367658355.html" class="result-image gallery" data-ids="3:00a0a_8grx5faXjLMz_0ne0dW,3:00a0a_jO9AtZHqfgqz_0pO0ew,3:00707_9Z9FoWcwPQcz_0pO0c2,3:00e0e_4KCcTGaKFBWz_0pO0gF,3:00a0a_jShS4RRXkz7z_0pO0jm,3:00s0s_edy4oDKqewMz_0pO0ev">
                <span class="result-price">$10,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:50 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-penthouse-in-the/7367658355.html" data-id="7367658355" class="result-title hdrlnk" id="postid_7367658355" >Luxury Penthouse in the Heart of South Beach!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$10,000</span>

                <span class="housing">
                    2br -
                    2360ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach South of Fifth miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368588154" data-repost-of="7239171557">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-bed-condo-furnished/7368588154.html" class="result-image gallery" data-ids="3:00U0U_7UfUlJp19W0z_0pO0jm,3:00V0V_6f7MbDIc9EKz_0py0jm,3:00a0a_hlumvIjV0i8z_0pO0hc,3:00B0B_jARhtMDaMAnz_0pO0hc,3:00o0o_4Hu2qvLPXKQz_0pO0hc,3:00b0b_3NkPOKFlBmIz_0pO0hc,3:00g0g_2V9y9HcuswPz_0pO0hc,3:01515_hrGjJisN5iaz_0pO0hc">
                <span class="result-price">$10,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:45 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-luxury-bed-condo-furnished/7368588154.html" data-id="7368588154" class="result-title hdrlnk" id="postid_7368588154" >Luxury 3 Bed Condo Furnished in Miami Beach!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$10,000</span>

                <span class="housing">
                    3br -
                    1560ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (miami beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368588696" data-repost-of="7323079778">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-absolutely-stunning-designer-home/7368588696.html" class="result-image gallery" data-ids="3:00F0F_6szpua19SIpz_0gw0b0,3:00F0F_5c1Ua49LJGqz_0kE0dK,3:00q0q_ejGPBBCf2tnz_0kE0dK,3:00M0M_5IOFZGJJHzAz_0gw0b0,3:00B0B_cPqy5WnRTpnz_0kE0dK,3:00l0l_1TgRnqNTTexz_0gw0b0">
                <span class="result-price">$18,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:39 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-absolutely-stunning-designer-home/7368588696.html" data-id="7368588696" class="result-title hdrlnk" id="postid_7368588696" >ABSOLUTELY STUNNING DESIGNER HOME WITH A GEORGEOUS BACKYARD DECK</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$18,500</span>

                <span class="housing">
                    6br -
                    1989ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368588546" data-repost-of="7232894426">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-sls-brickell/7368588546.html" class="result-image gallery" data-ids="3:01515_3uVjU1IFJmDz_0ak07K,3:00h0h_eeEWTl0bJx9z_0pO0jm,3:00w0w_gSedcM2AXFdz_0pO0jm,3:00101_e13hPK0v7Fuz_07x05U,3:00i0i_8F6q5HIKjrBz_0gP0c9,3:00K0K_32VcbLzf7bXz_0hw0bG,3:00F0F_31m1gHyobaTz_0hw0bG,3:00L0L_lBTJ0YUgyUSz_0hw0bG,3:00Y0Y_d6q18tSm3XAz_0hw0bG,3:00i0i_aivLjrHEnIWz_0hw0bF">
                <span class="result-price">$5,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:34 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-building-sls-brickell/7368588546.html" data-id="7368588546" class="result-title hdrlnk" id="postid_7368588546" >Brand New Building “SLS Brickell”</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,500</span>

                <span class="housing">
                    2br -
                    1151ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7368588345" data-repost-of="7264400921">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-updated-and-gorgeous-house-for/7368588345.html" class="result-image gallery" data-ids="3:00Q0Q_eJG2Om6e2alz_0pO0hc,3:01111_kVzZj986HSqz_0pO0hc,3:00303_9OgJtFiEzW2z_0pO0hc,3:00X0X_fCFKy8BkKf7z_0pO0hc,3:00X0X_fCFKy8BkKf7z_0pO0hc,3:00X0X_fqm8DNyOEJkz_0pO0hc,3:01212_gk7u1KpgXP1z_0pO0hc,3:00E0E_gl2Fdww6p8Dz_0pO0hc,3:01111_kVzZj986HSqz_0pO0hc,3:00W0W_k4jEtVZOGa5z_0pO0hc,3:00c0c_4R0etQ9UeRbz_0pO0hc,3:01414_gVQN3uCYnQUz_0pO0hc,3:00202_cAWBvLwq9Guz_0pO0hc,3:01212_gk7u1KpgXP1z_0pO0hc">
                <span class="result-price">$7,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:28 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-updated-and-gorgeous-house-for/7368588345.html" data-id="7368588345" class="result-title hdrlnk" id="postid_7368588345" >Updated and gorgeous house for rent in Sunny Isles</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$7,000</span>

                <span class="housing">
                    3br -
                    2478ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Sunny Isles Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367655899" data-repost-of="7240891471">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-ultra-luxury-coral-gables-home/7367655899.html" class="result-image gallery" data-ids="3:01414_5UrPzxIdTHb_0k20df,3:01515_cGB4jBMBO6A_0k20d7,3:00C0C_7SI5lpqfNho_0k20db,3:00w0w_116gt7cc06R_0k20da,3:01212_4RT8pzaW27O_0k20d4,3:01010_cQm5RTNvlUO_0k20de,3:00G0G_e3D6kir2MRX_0k20d5,3:00202_7payHdXXx46_0k20d8,3:00v0v_2eN8HqHl3DD_0k20da,3:00505_9508Bj33Ud8_0k20d5">
                <span class="result-price">$14,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 23:17" title="Mon 06 Sep 11:17:18 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-ultra-luxury-coral-gables-home/7367655899.html" data-id="7367655899" class="result-title hdrlnk" id="postid_7367655899" >Ultra Luxury Coral Gables Home 6Bed 8Bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$14,000</span>

                <span class="housing">
                    6br -
                    4000ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Coral Gables miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376699307">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-spacious-story-bed-15-bath/7376699307.html" class="result-image gallery" data-ids="3:00D0D_7jjK3UYdgsoz_04M03A,3:00X0X_bRY8Yp3Nhffz_04M02G,3:00D0D_b1aPn86bxpoz_04M02G,3:00L0L_dSnGWrgrDEmz_04M02G,3:00q0q_gqR1vwWh2eXz_04M02G,3:00M0M_jcvW11yQWKNz_04M02G,3:00909_fPzWRqTdGuUz_04M03A,3:00Q0Q_5zgwCfjczZzz_04M02G,3:00404_6OfhMbtjK1hz_04M03A,3:01111_8KaRul99ALxz_04M03A,3:00303_gL0JqkDVyXuz_04M02G,3:00N0N_4K30dbdCEjNz_04M02h,3:00303_4bIIi595KHvz_04M02G">
                <span class="result-price">$2,200</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:46" title="Mon 06 Sep 10:46:44 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-spacious-story-bed-15-bath/7376699307.html" data-id="7376699307" class="result-title hdrlnk" id="postid_7376699307" >SPACIOUS 2 STORY 2 BED/1.5 BATH TOWNHOUSE BY CORAL GABLES</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,200</span>

                <span class="housing">
                    2br -
                    1235ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NEAR CORAL GABLES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7367483782">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-efficiency-studio/7367483782.html" class="result-image gallery" data-ids="3:00J0J_8q1RPNf00JBz_0gw0co,3:00202_kFQ3eHLQE6cz_0gw0co,3:00y0y_3DxyooOeXPnz_0gw0co,3:00F0F_8ohuq1jWfQtz_0t20CI,3:00A0A_aMO2hSBDZVVz_0gw0co,3:00i0i_dTpDk0TmF7dz_0t20CI,3:00y0y_7fNfZ2Csuw1z_0t20CI,3:00L0L_btt0S3hDd77z_0gw0co,3:00Z0Z_9gJKjXIctSzz_0t20CI,3:00X0X_7xC9G9sgSjRz_0co0gw,3:00505_dIEp38QEtBQz_0t20CI,3:00i0i_iXBf4s7DtMpz_0t20CI,3:00x0x_gmoQkeKKxTdz_0t20CI,3:00y0y_9r90X0rDYraz_0pO0ew">
                <span class="result-price">$70</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:46" title="Mon 06 Sep 10:46:29 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-efficiency-studio/7367483782.html" data-id="7367483782" class="result-title hdrlnk" id="postid_7367483782" >Efficiency/ Studio</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$70</span>


                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376697635">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-newly-updated-bed-bath-by-coral/7376697635.html" class="result-image gallery" data-ids="3:00F0F_jKDPVWrxHudz_04M03A,3:00t0t_ca60bqAHjJRz_02W03A,3:00N0N_8sEDWaaaMYyz_02G03A,3:00L0L_gZxDusYkIDsz_02G03A,3:01111_gXzA8rGoa5Mz_02q03z,3:00R0R_bm087MNplFiz_02H03A,3:00404_5jWJNaGN0vJz_04j03A,3:00z0z_2epFRui5qWGz_02T03A">
                <span class="result-price">$2,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:36" title="Mon 06 Sep 10:36:43 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-newly-updated-bed-bath-by-coral/7376697635.html" data-id="7376697635" class="result-title hdrlnk" id="postid_7376697635" >NEWLY UPDATED 2 BED/1 BATH BY CORAL GABLES</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,000</span>

                <span class="housing">
                    2br -
                    778ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NEAR CORAL GABLES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376708942">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-waverly-bay-side-27th-floor/7376708942.html" class="result-image gallery" data-ids="3:00o0o_4PH4kcHg1olz_0CI0t2,3:00F0F_c2cAEMiaWdSz_0CI0t2,3:00X0X_50qLS3lFxzYz_0gw0co,3:00707_2uy83Lj4GVkz_0CI0t2,3:00w0w_1L8MjPCHXhkz_0CI0t2,3:01313_jCCSHtwbz3z_0x20oM,3:00P0P_5xRmgwBu8o9z_0CI0t2,3:00t0t_bX5qkjy268dz_0x20oM,3:00Y0Y_flnFWIE60h2z_0CI0t2,3:00W0W_7tjiSTVz3sKz_0i90iD,3:00h0h_7VE3UcV6XDiz_0CI0t2">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:36" title="Mon 06 Sep 10:36:30 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-waverly-bay-side-27th-floor/7376708942.html" data-id="7376708942" class="result-title hdrlnk" id="postid_7376708942" >Waverly- bay side 27th floor</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Miami beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376692330">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-cozy-bed-in-coral-gables-only-1325/7376692330.html" class="result-image gallery" data-ids="3:00K0K_h0gGHSbwhmMz_04M02T,3:00z0z_CCKMtuoNkQz_02G03A,3:00505_qVvoKrwdiWz_02G03A,3:01010_eA2z84I1rVtz_02G03A,3:00606_g4q8UTIUTsHz_02G03A,3:01111_8GJMVRZQcZdz_02G03A,3:00E0E_biWrGnrWM4Qz_04M02G">
                <span class="result-price">$1,325</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:25" title="Mon 06 Sep 10:25:31 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-cozy-bed-in-coral-gables-only-1325/7376692330.html" data-id="7376692330" class="result-title hdrlnk" id="postid_7376692330" >COZY 1 BED IN CORAL GABLES, ONLY $1325</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,325</span>

                <span class="housing">
                    1br -
                    530ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (CORAL GABLES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376693738">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-updated-bed-in-great-location-by/7376693738.html" class="result-image gallery" data-ids="3:00a0a_1WqCTg9rxGVz_04M03A,3:00A0A_jTHYFC9BdLhz_02G03A,3:00g0g_fUwqiPhRmJzz_02G03A,3:00v0v_jzistcfnnu6z_04M03A,3:00B0B_kKh612dhRwpz_04M03A">
                <span class="result-price">$1,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:11" title="Mon 06 Sep 10:11:19 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-updated-bed-in-great-location-by/7376693738.html" data-id="7376693738" class="result-title hdrlnk" id="postid_7376693738" >UPDATED 1 BED IN GREAT LOCATION BY CORAL GABLES</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,650</span>

                <span class="housing">
                    1br -
                    575ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NEAR CORAL GABLES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376690450">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-newly-updated-bed-bath/7376690450.html" class="result-image gallery" data-ids="3:00n0n_iOzSsbC89nHz_02G03A,3:00R0R_6wkE3SUpJMQz_02G03A,3:00k0k_1m7uqyOiqvHz_02G03A,3:00e0e_itdD93eIfwgz_02G03A,3:01111_8GJMVRZQcZdz_02G03A,3:00L0L_efOheos2UYBz_02G03A,3:00N0N_dYqEFOgjekBz_02G03A">
                <span class="result-price">$1,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 22:05" title="Mon 06 Sep 10:05:59 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-newly-updated-bed-bath/7376690450.html" data-id="7376690450" class="result-title hdrlnk" id="postid_7376690450" >NEWLY UPDATED 2 BED/1 BATH</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,900</span>

                <span class="housing">
                    2br -
                    880ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (NEAR CORAL GABLES miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376692407">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-furniture-studio-on-the/7376692407.html" class="result-image gallery" data-ids="3:00202_kAJ1QLQJnQ6z_0t20CI,3:01414_bULcUoMvXGZz_0t20CI,3:00t0t_bPWRC2CMx2yz_0t20CI,3:00P0P_2EFDd1BYRQ0z_0t20CI,3:00d0d_dES0jRyIeTvz_0t20CI,3:00G0G_dkfcktLXYnyz_0t20CI,3:01313_9vMUKOQccG8z_0t20CI,3:00F0F_9tw0CTIVxtSz_0t20CI">
                <span class="result-price">$1,550</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 21:49" title="Mon 06 Sep 09:49:45 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-furniture-studio-on-the/7376692407.html" data-id="7376692407" class="result-title hdrlnk" id="postid_7376692407" >Furniture studio on the beach</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,550</span>

                <span class="housing">
                    1br -
                    400ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376680972">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-1-full-kitchen-living-room/7376680972.html" class="result-image gallery" data-ids="3:01515_5mgi1CvzZjIz_07m08N,3:00S0S_hb7m0bNgNkKz_07908I">
                <span class="result-price">$1,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 21:19" title="Mon 06 Sep 09:19:05 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-1-full-kitchen-living-room/7376680972.html" data-id="7376680972" class="result-title hdrlnk" id="postid_7376680972" >1/1, full kitchen, living-room furnished apartment</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,100</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376672197" data-repost-of="7056976022">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-rentals-from-private-landlords/7376672197.html" class="result-image gallery" data-ids="3:00S0S_iGN0vi3cOtwz_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:58" title="Mon 06 Sep 08:58:43 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-rentals-from-private-landlords/7376672197.html" data-id="7376672197" class="result-title hdrlnk" id="postid_7376672197" >Rentals from PRIVATE LANDLORDS Apartments 3161 rc2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376672768" data-repost-of="7056976022">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-rentals-from-private-landlords/7376672768.html" class="result-image gallery" data-ids="3:00S0S_iGN0vi3cOtwz_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:48" title="Mon 06 Sep 08:48:12 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-rentals-from-private-landlords/7376672768.html" data-id="7376672768" class="result-title hdrlnk" id="postid_7376672768" >Rentals from PRIVATE LANDLORDS Apartments 3161 rc2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376679260">

        <a href="https://miami.craigslist.org/mdc/apa/d/homestead-spacious-2-home-in-homestead/7376679260.html" class="result-image gallery" data-ids="3:01010_ep4QNICoGLQz_0lM0t2,3:00G0G_igUKZX4VYhnz_0t20CI,3:00W0W_j7c7X4KBSdSz_0lM0t2,3:00n0n_3oMQdVpROn6z_0x20oM,3:00I0I_k960mBC9Fo8z_0lM0t2,3:00V0V_1IPj0aO7Yhvz_0lM0t2,3:00l0l_eUtrB0uLYTz_0lM0t2,3:00s0s_fHoT7WpZjq9z_0lM0t2,3:00000_ksRuNLaxNMzz_0lM0t2,3:00C0C_idImO8VJ4DFz_0t20CI,3:00d0d_6z1OGY2Ifw4z_0lM0t2,3:00r0r_3lu053q4pZ8z_0lM0t2,3:00I0I_gWFUzdISRtZz_0lM0t2,3:00K0K_gPy5PeKMxx7z_0lM0t2,3:00303_mkZINsnbcZz_0t20CI,3:00p0p_fa9Yg70UBErz_0lM0t2,3:00F0F_3tVa8cvDqO8z_0lM0t2,3:00101_5uRuhsgLcGmz_0t20CI,3:00k0k_e4CUxtvoG02z_0lM0t2,3:00b0b_fX48016EVPzz_0lM0t2,3:00B0B_guMfHoYSuXNz_0lM0t2,3:00G0G_fv7ePulQms3z_0ak0ik,3:00W0W_4zFHc0hBXaLz_0ak0ik">
                <span class="result-price">$1,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:47" title="Mon 06 Sep 08:47:52 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/homestead-spacious-2-home-in-homestead/7376679260.html" data-id="7376679260" class="result-title hdrlnk" id="postid_7376679260" >Spacious 3/2 home in Homestead</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,500</span>

                <span class="housing">
                    3br -
                    1500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Homestead miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373720466">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-depositone-month-free/7373720466.html" class="result-image gallery" data-ids="3:00b0b_keNDdfmAxyqz_09G07g,3:00M0M_NgHK7kfoXlz_0c50g7,3:00B0B_7xw0ICTIufQz_0g70c5,3:00H0H_lnaxgZsXAD1z_0lu0c5,3:01010_1BbsAVkz4Maz_0lu0c5,3:00R0R_laQXXDylxNQz_0lu0c5,3:00P0P_fD3HdNbKrvjz_0g70c5,3:00a0a_9kLR4CRvZfaz_0g70c5,3:00n0n_6gqenxw3MJjz_0g70c5,3:00E0E_fVuySWvrENCz_0g70c5,3:00d0d_aWgYAsKAA0Vz_0g70c5,3:00K0K_k3jwD0vCfpVz_09G07g">
                <span class="result-price">$2,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:38" title="Mon 06 Sep 08:38:04 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-depositone-month-free/7373720466.html" data-id="7373720466" class="result-title hdrlnk" id="postid_7373720466" >$99 DEPOSIT**ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,300</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373718817">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-depositone-month-free/7373718817.html" class="result-image gallery" data-ids="3:00M0M_NgHK7kfoXlz_0c50g7,3:00B0B_7xw0ICTIufQz_0g70c5,3:00R0R_laQXXDylxNQz_0lu0c5,3:01010_1BbsAVkz4Maz_0lu0c5,3:00H0H_lnaxgZsXAD1z_0lu0c5,3:00M0M_cCFchoaz12Kz_0ie0dm,3:00000_7riUHuy8rKXz_0jm0dX,3:00U0U_bbEC7Sug715z_0jm0eu,3:00G0G_jn6i3swipI5z_0ak07B,3:00V0V_apFyMFka12Yz_0jm0ea">
                <span class="result-price">$1,840</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:38" title="Mon 06 Sep 08:38:00 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-99-depositone-month-free/7373718817.html" data-id="7373718817" class="result-title hdrlnk" id="postid_7373718817" >$99 DEPOSIT**ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,840</span>


                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371441485">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free250-one-two-bedroom/7371441485.html" class="result-image gallery" data-ids="3:00W0W_4qMLJyXzXRuz_0t20hK,3:00R0R_fusWp0uS6Ryz_09G06r,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00x0x_ieEnxikIBt8z_0au06Z,3:00b0b_dMAPHXNLsITz_0ne0gA,3:00N0N_gnYIpUi8EOFz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00j0j_2tae2ZzBPBbz_0hw0bG,3:00606_66Fb3iF2htrz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Z0Z_6gmTGqupX63z_09G07g,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$2,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:37" title="Mon 06 Sep 08:37:27 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free250-one-two-bedroom/7371441485.html" data-id="7371441485" class="result-title hdrlnk" id="postid_7371441485" >**ONE MONTH FREE**$250 ONE &amp; TWO BEDROOM</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,999</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371438603">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371438603.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00Z0Z_6gmTGqupX63z_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00b0b_dMAPHXNLsITz_0ne0gA,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:37" title="Mon 06 Sep 08:37:13 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371438603.html" data-id="7371438603" class="result-title hdrlnk" id="postid_7371438603" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371436856">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371436856.html" class="result-image gallery" data-ids="3:00707_jnH8eBI2DLRz_0au05f,3:00808_87x16LnHaWHz_0au07S,3:00808_9M8czFX60Dlz_0au07S,3:00x0x_5n5Ld1OTNo3z_0au07S,3:00C0C_bkaIRRImQ4Mz_0au07S,3:00D0D_8maElk3uyIjz_0au07S,3:00z0z_dXlT1IEY1wCz_0au07S,3:00P0P_etNcv2J7HTLz_0au07S,3:00707_g2LFZ5eXtWXz_0au07S,3:00R0R_fusWp0uS6Ryz_09G06r">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:50 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371436856.html" data-id="7371436856" class="result-title hdrlnk" id="postid_7371436856" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371406147">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371406147.html" class="result-image gallery" data-ids="3:00W0W_4qMLJyXzXRuz_0t20hK,3:00x0x_ieEnxikIBt8z_0au06Z,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00N0N_gnYIpUi8EOFz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00j0j_2tae2ZzBPBbz_0hw0bG,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB,3:00C0C_bkaIRRImQ4Mz_0au07S,3:00D0D_8maElk3uyIjz_0au07S,3:00z0z_dXlT1IEY1wCz_0au07S,3:00P0P_etNcv2J7HTLz_0au07S,3:00707_g2LFZ5eXtWXz_0au07S">
                <span class="result-price">$5,222</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:46 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371406147.html" data-id="7371406147" class="result-title hdrlnk" id="postid_7371406147" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,222</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371405056">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371405056.html" class="result-image gallery" data-ids="3:00V0V_aguo2Ifflznz_0au06X,3:00707_jnH8eBI2DLRz_0au05f,3:00808_87x16LnHaWHz_0au07S,3:00808_9M8czFX60Dlz_0au07S,3:00x0x_5n5Ld1OTNo3z_0au07S,3:00C0C_bkaIRRImQ4Mz_0au07S,3:00D0D_8maElk3uyIjz_0au07S,3:00P0P_etNcv2J7HTLz_0au07S,3:00707_g2LFZ5eXtWXz_0au07S,3:00R0R_fusWp0uS6Ryz_09G06r,3:00x0x_ieEnxikIBt8z_0au06Z,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:29 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371405056.html" data-id="7371405056" class="result-title hdrlnk" id="postid_7371405056" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371403241">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371403241.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00k0k_ihNaG9rR4xBz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:00606_66Fb3iF2htrz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00O0O_k4UA8Aolm3Fz_0gM0cb,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB,3:00C0C_bkaIRRImQ4Mz_0au07S,3:00D0D_8maElk3uyIjz_0au07S,3:00z0z_dXlT1IEY1wCz_0au07S,3:00P0P_etNcv2J7HTLz_0au07S,3:00707_g2LFZ5eXtWXz_0au07S,3:00c0c_5Njci4621iWz_0au07S,3:00808_87x16LnHaWHz_0au07S,3:00808_9M8czFX60Dlz_0au07S">
                <span class="result-price">$2,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:21 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371403241.html" data-id="7371403241" class="result-title hdrlnk" id="postid_7371403241" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,999</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371402044">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371402044.html" class="result-image gallery" data-ids="3:00N0N_gnYIpUi8EOFz_0hw0bG,3:00j0j_2tae2ZzBPBbz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00A0A_NSlrXjJaA2z_0he0bR,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:00k0k_ihNaG9rR4xBz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00606_66Fb3iF2htrz_0hw0bG,3:00O0O_k4UA8Aolm3Fz_0gM0cb,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00b0b_dMAPHXNLsITz_0ne0gA,3:00U0U_sRzPCt0CNIz_0hw0bF,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$2,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:16 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371402044.html" data-id="7371402044" class="result-title hdrlnk" id="postid_7371402044" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,999</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371400894">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free250-onetwo-three/7371400894.html" class="result-image gallery" data-ids="3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00b0b_dMAPHXNLsITz_0ne0gA,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00k0k_ihNaG9rR4xBz_0hw0bG,3:00R0R_fusWp0uS6Ryz_09G06r,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:00606_66Fb3iF2htrz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00O0O_k4UA8Aolm3Fz_0gM0cb,3:00U0U_sRzPCt0CNIz_0hw0bF,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$2,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:09 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free250-onetwo-three/7371400894.html" data-id="7371400894" class="result-title hdrlnk" id="postid_7371400894" >**ONE MONTH FREE**$250 ONE,TWO , THREE BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,999</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371396970">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-300-deposit-brand-new-apartments/7371396970.html" class="result-image gallery" data-ids="3:00R0R_7HD0J48cqoaz_0CI0t2,3:00K0K_51wxvUmChjFz_0t20CI,3:00z0z_eExSYyilpglz_0t20CI,3:00a0a_9cVB1wfW8vUz_0CI0t2,3:00101_fPYBGSOYdppz_0t20CI,3:00o0o_8STCVbwllE0z_0t20CI,3:00W0W_epLobiHFTkBz_0CI0t2,3:00p0p_iXgOHvexk4uz_0CI0t2,3:00606_cmV0cJM4Ejaz_0CI0t2,3:00v0v_g8YGtMnmma7z_0CI0t2,3:01414_aIhmHXvcTa1z_0CI0t2,3:00303_agkbbAXM9Miz_0CI0t2,3:00606_idiYToxhX3Iz_0CI0t2,3:00A0A_9o42HKBOdTsz_0CI0t2,3:00P0P_9oSMAZDBsOmz_0t20CI,3:00A0A_hi0VOEr4LT5z_0CI0t2,3:00M0M_keHXllZNATAz_0t20t2">
                <span class="result-price">$2,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:36" title="Mon 06 Sep 08:36:02 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-300-deposit-brand-new-apartments/7371396970.html" data-id="7371396970" class="result-title hdrlnk" id="postid_7371396970" >$300 DEPOSIT BRAND NEW APARTMENTS 1,2,AND 3 BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371395724">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-300-deposit/7371395724.html" class="result-image gallery" data-ids="3:00g0g_86LqI06Hwf5z_0k20jW,3:00A0A_hi0VOEr4LT5z_0CI0t2,3:00A0A_9o42HKBOdTsz_0CI0t2,3:00606_idiYToxhX3Iz_0CI0t2,3:00303_agkbbAXM9Miz_0CI0t2,3:01414_aIhmHXvcTa1z_0CI0t2,3:00606_cmV0cJM4Ejaz_0CI0t2,3:00a0a_9cVB1wfW8vUz_0CI0t2,3:00W0W_epLobiHFTkBz_0CI0t2,3:00p0p_iXgOHvexk4uz_0CI0t2,3:00v0v_g8YGtMnmma7z_0CI0t2,3:00101_fPYBGSOYdppz_0t20CI,3:00K0K_51wxvUmChjFz_0t20CI,3:00R0R_7HD0J48cqoaz_0CI0t2,3:00z0z_eExSYyilpglz_0t20CI,3:00o0o_8STCVbwllE0z_0t20CI,3:00M0M_keHXllZNATAz_0t20t2">
                <span class="result-price">$4,017</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:35" title="Mon 06 Sep 08:35:46 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free-300-deposit/7371395724.html" data-id="7371395724" class="result-title hdrlnk" id="postid_7371395724" >**ONE MONTH FREE** $300 DEPOSIT WATERFRONT LUXURY APARTMENTS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,017</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371392992">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-300-deposit-brand-new-apartments/7371392992.html" class="result-image gallery" data-ids="3:00606_idiYToxhX3Iz_0CI0t2,3:00A0A_9o42HKBOdTsz_0CI0t2,3:00A0A_hi0VOEr4LT5z_0CI0t2,3:00P0P_9oSMAZDBsOmz_0t20CI,3:00303_agkbbAXM9Miz_0CI0t2,3:01414_aIhmHXvcTa1z_0CI0t2,3:00a0a_9cVB1wfW8vUz_0CI0t2,3:00F0F_2vgKo2tmURiz_0k20cW,3:00606_cmV0cJM4Ejaz_0CI0t2,3:00W0W_epLobiHFTkBz_0CI0t2,3:00p0p_iXgOHvexk4uz_0CI0t2,3:00v0v_g8YGtMnmma7z_0CI0t2,3:00101_fPYBGSOYdppz_0t20CI,3:00K0K_51wxvUmChjFz_0t20CI,3:00R0R_7HD0J48cqoaz_0CI0t2,3:00z0z_eExSYyilpglz_0t20CI,3:00o0o_8STCVbwllE0z_0t20CI">
                <span class="result-price">$2,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:35" title="Mon 06 Sep 08:35:41 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-300-deposit-brand-new-apartments/7371392992.html" data-id="7371392992" class="result-title hdrlnk" id="postid_7371392992" >$300 DEPOSIT BRAND NEW APARTMENTS 1,2,AND 3 BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371388195">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-300-deposit-brand-new-apartments/7371388195.html" class="result-image gallery" data-ids="3:00a0a_9cVB1wfW8vUz_0CI0t2,3:00606_cmV0cJM4Ejaz_0CI0t2,3:00101_fPYBGSOYdppz_0t20CI,3:00W0W_epLobiHFTkBz_0CI0t2,3:00p0p_iXgOHvexk4uz_0CI0t2,3:00v0v_g8YGtMnmma7z_0CI0t2,3:00R0R_7HD0J48cqoaz_0CI0t2,3:00z0z_eExSYyilpglz_0t20CI,3:00K0K_51wxvUmChjFz_0t20CI,3:00o0o_8STCVbwllE0z_0t20CI,3:00g0g_86LqI06Hwf5z_0k20jW,3:00F0F_2vgKo2tmURiz_0k20cW,3:00k0k_ipO1z7976DUz_0k20bw,3:00y0y_d6FBiWxQncVz_0k20bv,3:00A0A_hi0VOEr4LT5z_0CI0t2,3:00A0A_9o42HKBOdTsz_0CI0t2,3:00606_idiYToxhX3Iz_0CI0t2,3:00303_agkbbAXM9Miz_0CI0t2,3:01414_aIhmHXvcTa1z_0CI0t2">
                <span class="result-price">$3,204</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:35" title="Mon 06 Sep 08:35:36 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-300-deposit-brand-new-apartments/7371388195.html" data-id="7371388195" class="result-title hdrlnk" id="postid_7371388195" >$300 DEPOSIT BRAND NEW APARTMENTS 1,2,AND 3 BEDROOMS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,204</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371383967">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371383967.html" class="result-image gallery" data-ids="3:00A0A_hi0VOEr4LT5z_0CI0t2,3:00A0A_9o42HKBOdTsz_0CI0t2,3:00606_idiYToxhX3Iz_0CI0t2,3:00W0W_5tW4wnK2rPhz_0k20mI,3:00g0g_86LqI06Hwf5z_0k20jW,3:00F0F_2vgKo2tmURiz_0k20cW,3:00h0h_idW1AASfHu5z_0k20aN,3:00k0k_ipO1z7976DUz_0k20bw,3:00y0y_d6FBiWxQncVz_0k20bv,3:00303_agkbbAXM9Miz_0CI0t2,3:01414_aIhmHXvcTa1z_0CI0t2,3:00606_cmV0cJM4Ejaz_0CI0t2,3:00a0a_9cVB1wfW8vUz_0CI0t2,3:00W0W_epLobiHFTkBz_0CI0t2,3:00p0p_iXgOHvexk4uz_0CI0t2,3:00v0v_g8YGtMnmma7z_0CI0t2,3:00101_fPYBGSOYdppz_0t20CI,3:00K0K_51wxvUmChjFz_0t20CI,3:00R0R_7HD0J48cqoaz_0CI0t2,3:00z0z_eExSYyilpglz_0t20CI,3:00o0o_8STCVbwllE0z_0t20CI">
                <span class="result-price">$2,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:35" title="Mon 06 Sep 08:35:19 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-brand-new-apartments-one-month/7371383967.html" data-id="7371383967" class="result-title hdrlnk" id="postid_7371383967" >BRAND NEW APARTMENTS ONE MONTH FREE</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,700</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371566251">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371566251.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00Z0Z_6gmTGqupX63z_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$5,222</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:32" title="Mon 06 Sep 08:32:02 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371566251.html" data-id="7371566251" class="result-title hdrlnk" id="postid_7371566251" >**ONE MONTH FREE**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,222</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371565702">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371565702.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00Z0Z_6gmTGqupX63z_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00x0x_ieEnxikIBt8z_0au06Z,3:00k0k_ihNaG9rR4xBz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00j0j_2tae2ZzBPBbz_0hw0bG,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00O0O_k4UA8Aolm3Fz_0gM0cb,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:31" title="Mon 06 Sep 08:31:20 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371565702.html" data-id="7371565702" class="result-title hdrlnk" id="postid_7371565702" >**ONE MONTH FREE**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371565049">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371565049.html" class="result-image gallery" data-ids="3:00W0W_4qMLJyXzXRuz_0t20hK,3:00R0R_fusWp0uS6Ryz_09G06r,3:00Z0Z_6gmTGqupX63z_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00k0k_ihNaG9rR4xBz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:00606_66Fb3iF2htrz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00O0O_k4UA8Aolm3Fz_0gM0cb,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:31" title="Mon 06 Sep 08:31:09 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371565049.html" data-id="7371565049" class="result-title hdrlnk" id="postid_7371565049" >**ONE MONTH FREE**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371560752">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371560752.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00Z0Z_6gmTGqupX63z_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00b0b_dMAPHXNLsITz_0ne0gA,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:00606_66Fb3iF2htrz_0hw0bG,3:01717_4ycYkLSZ69qz_0cj0gB,3:00A0A_NSlrXjJaA2z_0he0bR,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00J0J_5sARUe8ZmT1z_0j40aI,3:00U0U_sRzPCt0CNIz_0hw0bF,3:00b0b_cPd5FEB6L6iz_0j40aI,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$3,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:31" title="Mon 06 Sep 08:31:01 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371560752.html" data-id="7371560752" class="result-title hdrlnk" id="postid_7371560752" >**ONE MONTH FREE**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,900</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7371559428">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371559428.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00k0k_ihNaG9rR4xBz_0hw0bG,3:00606_66Fb3iF2htrz_0hw0bG,3:00O0O_a7yrJeg9y5Tz_0hw0bG,3:00v0v_kI6oyAlLgBXz_0i40bj,3:00D0D_c9WVgcvxr8uz_0el0ef,3:00Z0Z_6gmTGqupX63z_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00A0A_NSlrXjJaA2z_0he0bR,3:00X0X_1Xf1wE3Tecfz_0ei0ei,3:00A0A_63wQsc5MncEz_0ke0a7,3:00606_ljOTeoiNvTxz_0gj0cx,3:00G0G_kNAtcFUZi1Uz_0j10aK,3:00Y0Y_2X5B1yr3mK0z_0ji0aB">
                <span class="result-price">$5,222</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:30" title="Mon 06 Sep 08:30:54 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-one-month-free/7371559428.html" data-id="7371559428" class="result-title hdrlnk" id="postid_7371559428" >**ONE MONTH FREE**</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,222</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIDTOWN MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7374906210">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-smart-apartmentsone-and-two/7374906210.html" class="result-image gallery" data-ids="3:00R0R_fusWp0uS6Ryz_09G06r,3:00Z0Z_6gmTGqupX63z_09G07g,3:00o0o_5woNqetj2lCz_09G07g,3:00d0d_c0mX6qXcrsqz_0ne0gB,3:00x0x_ieEnxikIBt8z_0au06Z,3:00W0W_4qMLJyXzXRuz_0t20hK,3:00C0C_97tZUzXsAS5z_0au05f,3:00V0V_aguo2Ifflznz_0au06X,3:00Y0Y_eJFFQpLdhinz_0au06Z,3:00l0l_lkErGV5wQD0z_0au06Z,3:00202_be3jcPNwGr1z_0au06Z,3:00s0s_4MtT3BX9JYOz_0au06Z,3:00707_jnH8eBI2DLRz_0au05f,3:00d0d_gFaFfxofWvz_0au07S,3:00W0W_eOsbuWMWooFz_0au07S,3:00O0O_8dBpcHAcgMvz_0au07S,3:00J0J_fBqavg9tXw3z_0au07S,3:00606_jtXG4QI9Ps7z_0au07S,3:00I0I_bElbqLWNVCjz_0au07S,3:00404_4g08UjA05qCz_0au07S,3:00707_1Or9QW07l7Lz_0au07S,3:00U0U_kCEkeyH01HVz_0at06y">
                <span class="result-price">$2,999</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:30" title="Mon 06 Sep 08:30:27 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-smart-apartmentsone-and-two/7374906210.html" data-id="7374906210" class="result-title hdrlnk" id="postid_7374906210" >**SMART APARTMENTS**ONE AND TWO BEDROOOMS $250 DEPOSIT</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,999</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIDTOWN miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7363677664">

        <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-marvelous-oceanfront/7363677664.html" class="result-image gallery" data-ids="3:00B0B_jT4BRRTfDBVz_0CI0lM,3:00E0E_9eB100uJYXGz_0CI0lM,3:01111_i2sicLdVm4mz_0CI0lM,3:00303_5x54x1RjtA5z_0CI0lM,3:00t0t_k00FJUbB2etz_0CI0lM,3:00c0c_l8fRfPdP3fPz_0CI0kG,3:00Y0Y_hy5VFp5Wtd3z_0CI0lM,3:01111_8h3BTMCtI3jz_0CI0lM,3:00h0h_9fQ5X1AzUvfz_0CI0lM,3:00W0W_88wvkSXHARgz_0CI0lM,3:01616_bqF0qtSEdyKz_0CI0lM,3:00909_l1dupFcTMbfz_0CI0lM,3:00d0d_kje5dP3xb9Jz_0CI0lM,3:00R0R_261wRmPtU6Rz_0CI0lM,3:00z0z_5zGZNRxnqzpz_0CI0lM,3:00I0I_ibrjMmcoTnGz_0CI0lM,3:01010_7ruiBne3WTQz_0if0e3,3:00o0o_4M0Tmu44rK9z_09L07n,3:00u0u_lMlVTS8k0esz_0cU09G,3:00C0C_hvNhpJieM9fz_0pO0h9,3:00404_hm9IdiZ2P6Tz_0hv0bF,3:01212_2pdKljGE77Jz_0hv0bF,3:01515_6qYzPI1plkiz_0cU08E,3:01111_dRd7BV5fNGMz_0hd0bS">
                <span class="result-price">$12,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:15" title="Mon 06 Sep 08:15:25 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-marvelous-oceanfront/7363677664.html" data-id="7363677664" class="result-title hdrlnk" id="postid_7363677664" >MARVELOUS OCEANFRONT RESIDENCE IN SUNNY ISLES. STUNNING OCEAN VIEWS</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$12,000</span>

                <span class="housing">
                    3br -
                    2900ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Sunny Isles Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7366594756">

        <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-seasonal-or-vacation/7366594756.html" class="result-image gallery" data-ids="3:00u0u_kHsor1y4y5oz_0my0gG,3:00e0e_3lDvmSo15mOz_09i0co,3:00V0V_asvUEGifsM7z_0gw0co,3:00K0K_iibXpQ1u34Fz_0cU08x,3:00d0d_5JMjjEkHSHNz_0gw0bV,3:00l0l_afKtSMKO90nz_06s06s,3:00b0b_d4dcIuOsiDXz_0cU09G,3:00P0P_cFLlZLTsIRwz_0CI0t2,3:00j0j_htE4fBMSFtTz_0gw0aY,3:00k0k_kUdPm0XbWn5z_0gw0b1,3:00L0L_blQ1upbaZa1z_0bC0fu,3:00T0T_jZXjvVHVOgxz_09i0co,3:00X0X_fJBIDietR2tz_0gv0ck,3:00606_hfzzAGcBDtgz_0CI0lM,3:00404_2JrUZbmZ2jjz_0CI0i5,3:01313_dE2auGiPAlzz_0CI0i5,3:00s0s_3WWIj1XBH02z_0CI0lM,3:00303_7NFdm97deMHz_0CI0lM,3:00Z0Z_aBNbS3Tlt53z_0CI0lM,3:00000_cwGnfo2DjHFz_0CI0lM,3:00808_64YXMbiv0OSz_0CI0i5,3:00101_ftruBYAwHkjz_0CI0i5,3:00o0o_4tUtU6dovrxz_0CI0lM">
                <span class="result-price">$5,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:14" title="Mon 06 Sep 08:14:25 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-seasonal-or-vacation/7366594756.html" data-id="7366594756" class="result-title hdrlnk" id="postid_7366594756" >SEASONAL OR VACATION RENTAL ON THE BEACH IN SUNNY ISLES BEACH</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$5,500</span>

                <span class="housing">
                    2br -
                    1423ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Sunny Isles Beach - LUXURY CONDOMINIUM miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376663080">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-1-apartment-just-renewed/7376663080.html" class="result-image gallery" data-ids="3:00N0N_o9GwlFGh4cz_0pO0hc,3:00P0P_kgaDuPnRfI1z_04A03A,3:00P0P_8Qxn8HC4kSDz_0pO0hc,3:00N0N_lg42D6o6Fe4z_0pO0hc">
                <span class="result-price">$1,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 20:11" title="Mon 06 Sep 08:11:53 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-1-apartment-just-renewed/7376663080.html" data-id="7376663080" class="result-title hdrlnk" id="postid_7376663080" >1/1 APARTMENT JUST RENEWED. EVERYTHING NEW!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,600</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376656351">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-house-for-rent-2-near-miami/7376656351.html" class="result-image gallery" data-ids="3:00r0r_26iqfOEtG13z_0x20oM,3:00d0d_1GGqB1llheJz_0lM0t2,3:00o0o_exS3hQACAX0z_0x20oM,3:01616_hZe4gMI4Y9Fz_0x20oM,3:00O0O_2s3jKPpWQA9z_0x20oM,3:00j0j_69dbM1OKAOSz_0x20oM,3:00G0G_bPHYwCCeehhz_0x20oM,3:00d0d_4kaH7KG59Nez_0x20oM,3:00C0C_l32yT9B6NDIz_0lM0t2,3:01111_3x3ufC6SUUXz_0lM0t2,3:00N0N_fBsSOuORdiwz_0x20oM,3:00C0C_eQX7w9XpD6Bz_0x20oM,3:00303_1HeEpD7liB0z_0x20oM,3:00x0x_5dtCsLoeHF4z_0x20oM,3:00P0P_kgwYagZqAS2z_0lM0t2,3:00i0i_9NvoUGhGDcsz_0x20oM,3:00909_1sM0bT1ihuoz_0lM0t2,3:00C0C_3OXQDYDsIslz_0lM0t2,3:00F0F_7MHbLdxDxZxz_0x20oM,3:00O0O_1WVqNBGjrXhz_0x20oM,3:00606_14hrJ5mjGFSz_0x20oM">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:41" title="Mon 06 Sep 07:41:27 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-house-for-rent-2-near-miami/7376656351.html" data-id="7376656351" class="result-title hdrlnk" id="postid_7376656351" >House for Rent 3/2 near Miami airport</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    3br -
                </span>

                <span class="result-hood"> (MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376647230">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-spacious-one-bedroom-two/7376647230.html" class="result-image gallery" data-ids="3:00P0P_8Qxn8HC4kSDz_0pO0hc,3:00N0N_lg42D6o6Fe4z_0pO0hc,3:00N0N_o9GwlFGh4cz_0pO0hc">
                <span class="result-price">$1,900</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:40" title="Mon 06 Sep 07:40:02 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-spacious-one-bedroom-two/7376647230.html" data-id="7376647230" class="result-title hdrlnk" id="postid_7376647230" >Spacious one bedroom two bathrooms steps from Ocean.</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,900</span>

                <span class="housing">
                    1br -
                    843ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376653172">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-unit/7376653172.html" class="result-image gallery" data-ids="3:00e0e_aSyvB3mC9ymz_0ew0jm,3:00b0b_jcKLFmwk0ayz_0ew0jm,3:00H0H_bwAfmxSi9Rkz_0ak07K,3:00O0O_l0zmXawdn6mz_0ew0jm">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:32" title="Mon 06 Sep 07:32:52 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-gorgeous-bedroom-unit/7376653172.html" data-id="7376653172" class="result-title hdrlnk" id="postid_7376653172" >Gorgeous 2 bedroom unit breathtaking views of Biscayne Bay. call me°°|</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (335 S Biscayne Blvd #2900 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376653102">

        <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-efficiency-for-rent/7376653102.html" class="result-image gallery" data-ids="3:00S0S_c3iBoGL0qSXz_0CI0t2,3:00D0D_aA4kCmZwOUFz_0CI0t2,3:01111_cu4XSbz2WPPz_0CI0t2,3:00707_9BiX0pSqppdz_0CI0t2,3:00o0o_kNYrX5DiRLFz_0CI0t2,3:00R0R_4KzUQp46poFz_0CI0t2">
                <span class="result-price">$850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:32" title="Mon 06 Sep 07:32:43 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/hialeah-efficiency-for-rent/7376653102.html" data-id="7376653102" class="result-title hdrlnk" id="postid_7376653102" >Efficiency for rent</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$850</span>

                <span class="housing">
                    1br -
                    250ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami lakes area miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376651109">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-located-in-front-of-brickell-city/7376651109.html" class="result-image gallery" data-ids="3:00W0W_3cOwtlgK8Iqz_09G0g8,3:00o0o_lDIKjkvFfiEz_0pO0hc,3:00O0O_dsGDtYq7HFNz_0cU09G,3:00w0w_bt2Qq2glJ1z_0cU09G,3:00X0X_XzbodyquNAz_0pO0hc,3:00i0i_2vwnB50q1pEz_0pO0hc,3:00808_bAkkqO8XGwHz_0cU09G,3:00U0U_6bwzH40Eeplz_0cU09G,3:00T0T_aJ3ODYOXJApz_0cU09G,3:00N0N_4YIDxp6Zcrsz_0cU09G,3:00k0k_1XeMyqjy0xWz_0cU09G,3:00X0X_8lduk5yEJ7wz_0cU09G,3:00U0U_VChrsa6ju1z_0pO0hc">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:27" title="Mon 06 Sep 07:27:28 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-located-in-front-of-brickell-city/7376651109.html" data-id="7376651109" class="result-title hdrlnk" id="postid_7376651109" >Located in front of Brickell City Center, and across from the Metro°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (31 SE 6th St #708 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376644726">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-studios-priced-to-move-quickly/7376644726.html" class="result-image gallery" data-ids="3:01010_lXmA7mnOyMJz_0ht0bD,3:00Q0Q_aKki87FK0ruz_0jQ0df,3:00s0s_k5ICywF0cTXz_08B05J,3:00a0a_6fAaOf2jfAmz_0t60jO,3:00e0e_31qtzDVOcuez_0o70g6,3:01616_2JsIc44h7erz_0ia0c7,3:01212_8vonChjlIatz_09y06n,3:01717_5DlXgme1Z3az_0wS0lW">
                <span class="result-price">$1,775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:26" title="Mon 06 Sep 07:26:35 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-studios-priced-to-move-quickly/7376644726.html" data-id="7376644726" class="result-title hdrlnk" id="postid_7376644726" >Studio&#39;s Priced To Move Quickly! Hurry Before They Are Gone!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,775</span>

                <span class="housing">
                    600ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376649102">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-unit-at-the-best-location-in-50/7376649102.html" class="result-image gallery" data-ids="3:00B0B_3aRUpKqsoW2z_0pO0hc,3:00W0W_hda45C3l5zlz_0pO0hc,3:00T0T_3AaP0SVDPvpz_0pO0hc,3:00n0n_bFY7IdtUWLaz_0pO0hc,3:00u0u_i30aQSknVwUz_0pO0hc,3:00C0C_28OMWKus4P6z_0pO0hc,3:00S0S_7oeIJ7kLUWYz_0pO0hc,3:00l0l_2XiqEcWpLfAz_0pO0hc,3:01616_luO3tTluq58z_0pO0hc,3:01515_24tY5GIpnRjz_0pO0hc,3:00909_eHOFTaMk3VJz_0pO0hc">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:22" title="Mon 06 Sep 07:22:02 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-unit-at-the-best-location-in-50/7376649102.html" data-id="7376649102" class="result-title hdrlnk" id="postid_7376649102" >Unit at the best location in 50 Biscayne Condominium with 2 Beds°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (50 Biscayne Blvd #1611 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376647963">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-midtown-miami-perfect-location-2b/7376647963.html" class="result-image gallery" data-ids="3:00k0k_gtZ43UyZc0Xz_0a90fc,3:00s0s_37ABCd9BJtbz_0lF0es,3:00S0S_7Mrht7JdBgQz_09I06u,3:00M0M_fYRcwrgvibEz_0e609p,3:00F0F_ldSGvKAU7T2z_0kA0dJ,3:00l0l_2X3dBl5EzZtz_0jy0d3,3:00d0d_c0Dtnov9d0fz_0TF0Ba,3:01212_l1u5OpZluLyz_0bK07Q,3:00s0s_6V9qjNf10XRz_0m00eH,3:01010_d39G3zd1Gssz_0e009l,3:00q0q_epnC2jde5hUz_0gy0oP">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:19" title="Mon 06 Sep 07:19:05 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-midtown-miami-perfect-location-2b/7376647963.html" data-id="7376647963" class="result-title hdrlnk" id="postid_7376647963" >Midtown Miami.. Perfect Location! 2b/2b</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                    1100ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376646949">

        <a href="https://miami.craigslist.org/mdc/apa/d/shopping-restaurants-apartment-building/7376646949.html" class="result-image gallery" data-ids="3:00o0o_5ohwgbOtSCwz_0qe0pB,3:00J0J_jKoP7Numm7Sz_0l80dO,3:00R0R_229uTC9MiQCz_0bo07x,3:00j0j_in8CZ6mOXWlz_08n05E,3:00h0h_cKGFN2u9DIZz_0dZ09m,3:00v0v_1RmBVXqzDnYz_0fJ0au,3:00K0K_hccUTDs0teUz_0aB0aq,3:00T0T_k0Y3srNarJgz_0eh09O,3:00i0i_8S0wOqURypNz_0na0eP,3:00K0K_cjKXEL1aDfez_0ix0c6">
                <span class="result-price">$3,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:16" title="Mon 06 Sep 07:16:13 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/shopping-restaurants-apartment-building/7376646949.html" data-id="7376646949" class="result-title hdrlnk" id="postid_7376646949" >Shopping &amp; Restaurants! Apartment Building Is Awesome!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,100</span>

                <span class="housing">
                    2br -
                    1090ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376615351">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-paraiso-bay-edgewater-corner/7376615351.html" class="result-image gallery" data-ids="3:00D0D_feKe5Lzjjxrz_0pO0hb,3:00Y0Y_1sYViSNsD0kz_0pO0hc,3:00606_gy3EFCSjJ4lz_0pO0hc,3:00k0k_hDs5uZFD5OUz_0pO0hc,3:00m0m_eulzRYQHDq6z_0pO0hb">
                <span class="result-price">$3,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:15" title="Mon 06 Sep 07:15:44 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-paraiso-bay-edgewater-corner/7376615351.html" data-id="7376615351" class="result-title hdrlnk" id="postid_7376615351" >Paraiso Bay Edgewater Corner 1 Bedroom BayView</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,800</span>

                <span class="housing">
                    1br -
                    919ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Edgewater miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376646604">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-amenities-such-as-pool/7376646604.html" class="result-image gallery" data-ids="3:00z0z_7415UmiBoBhz_0pO0jm,3:00L0L_du99PPpcqA4z_0pO0jm,3:00d0d_9BzrjRzsf1Mz_0pO0jm,3:00O0O_hZPtpVpkd3gz_0pO0jm,3:00n0n_iZbnHc1NjUjz_0pO0jm,3:00t0t_776Pq1vsNJ9z_0pO0jm,3:00Q0Q_4gHjOvP6b6dz_0pO0jm,3:00U0U_fLa4864NI8Ez_0pO0jm,3:00F0F_cJIC9Iz17ZIz_0pO0jm,3:00o0o_1KfYVsmdBURz_0pO0jm">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:15" title="Mon 06 Sep 07:15:16 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-amazing-amenities-such-as-pool/7376646604.html" data-id="7376646604" class="result-title hdrlnk" id="postid_7376646604" >Amazing amenities such as pool, gym, Tennis court, &amp; more. call me°°|</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (1155 Brickell Bay Dr #3303 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376645855">

        <a href="https://miami.craigslist.org/mdc/apa/d/stunning-views-downtown-miami-swimming/7376645855.html" class="result-image gallery" data-ids="3:00f0f_734Scs4sdraz_0hq0bC,3:00s0s_e9NbxC1qPiEz_0jj0cS,3:00P0P_dZ5NsCuio6Xz_0np0fB,3:00W0W_6XJMjoRgqEpz_0iR0dw,3:00a0a_gJwDymGsfTCz_0eT09W,3:00J0J_jVLNB4ZJkdfz_09C06t,3:00202_kz3vIXKOOG2z_0kd0dv,3:00F0F_eeH33f7eYJkz_0xr0mj,3:00O0O_2zEwGGqQjsvz_0jO0de">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:13" title="Mon 06 Sep 07:13:18 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/stunning-views-downtown-miami-swimming/7376645855.html" data-id="7376645855" class="result-title hdrlnk" id="postid_7376645855" >Stunning Views Downtown Miami! Swimming Pool and Gym!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7372999389">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7372999389.html" class="result-image gallery" data-ids="3:00J0J_ddASZm550qDz_0gY0cJ,3:00i0i_gnREmJB0LnDz_0qk0jK,3:00H0H_776LVGZmbifz_0jK0qk,3:00k0k_cy2umrBzPnTz_0jK0qk,3:00v0v_fHw4rZ1S1bbz_0qk0jK">
                <span class="result-price">$1,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:01" title="Mon 06 Sep 07:01:02 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7372999389.html" data-id="7372999389" class="result-title hdrlnk" id="postid_7372999389" >Shenandoah Duplex 2 bed + den/ 1 bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,850</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7372999779">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7372999779.html" class="result-image gallery" data-ids="3:00l0l_ckCq8k99cjpz_0jK0qk,3:00808_d8O0oouFo3Zz_0qk0jK,3:00i0i_gnREmJB0LnDz_0qk0jK,3:00H0H_776LVGZmbifz_0jK0qk,3:00k0k_cy2umrBzPnTz_0jK0qk">
                <span class="result-price">$1,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:00" title="Mon 06 Sep 07:00:58 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7372999779.html" data-id="7372999779" class="result-title hdrlnk" id="postid_7372999779" >Shenandoah Duplex 2 bed + den/ 1 bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,850</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373000782">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7373000782.html" class="result-image gallery" data-ids="3:00K0K_9mEn9Y7Zmqhz_0f50bk">
                <span class="result-price">$1,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:00" title="Mon 06 Sep 07:00:55 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7373000782.html" data-id="7373000782" class="result-title hdrlnk" id="postid_7373000782" >Shenandoah Duplex 2 bed + den/ 1 bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,850</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373001165">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7373001165.html" class="result-image gallery" data-ids="3:00K0K_9mEn9Y7Zmqhz_0f50bk">
                <span class="result-price">$1,850</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 19:00" title="Mon 06 Sep 07:00:50 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-shenandoah-duplex-bed-den-bath/7373001165.html" data-id="7373001165" class="result-title hdrlnk" id="postid_7373001165" >Shenandoah Duplex 2 bed + den/ 1 bath</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,850</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376616833" data-repost-of="6409220269">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-aventura-ocean-blvd-collins/7376616833.html" class="result-image gallery" data-ids="3:00S0S_iGN0vi3cOtwz_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:53" title="Mon 06 Sep 06:53:15 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-aventura-ocean-blvd-collins/7376616833.html" data-id="7376616833" class="result-title hdrlnk" id="postid_7376616833" >Aventura Ocean Blvd Collins Bayside Avenue Efficiency Studio 3132 rc2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376637614">

        <a href="https://miami.craigslist.org/mdc/apa/d/qualified-candidates-approved-quickly/7376637614.html" class="result-image gallery" data-ids="3:00H0H_1KFbslagTfjz_0CC0pf,3:00Y0Y_8PilgxBGhUkz_0lh0eg,3:00Y0Y_1DBWsSeL0n2z_07X05g,3:00g0g_khlt0wErooJz_0im0bK,3:00x0x_5U5fS9wdSzsz_0lw0l0,3:00Z0Z_aeto4wwgQNKz_04X03j,3:00K0K_eeKDLFrrzoQz_0dv097,3:00D0D_5Be3Ax0pJnGz_0nH0nj,3:00y0y_busjSQR5qcVz_0an078,3:00R0R_8V6ApTSsDSjz_0l50dL">
                <span class="result-price">$3,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:52" title="Mon 06 Sep 06:52:14 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/qualified-candidates-approved-quickly/7376637614.html" data-id="7376637614" class="result-title hdrlnk" id="postid_7376637614" >Qualified Candidates Approved Quickly!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,100</span>

                <span class="housing">
                    2br -
                    1090ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376636460">

        <a href="https://miami.craigslist.org/mdc/apa/d/beautiful-2b-2b-apartments-881-sqft/7376636460.html" class="result-image gallery" data-ids="3:00Y0Y_d0TZLYWkYWkz_0kv0fm,3:00O0O_c8NhttU8cv5z_0hB0dc,3:00202_iL6YHSsYNxtz_0eu0aS,3:00t0t_4QOGp8R3CMez_0nB0ly,3:00v0v_fv1vMk5SuPiz_0fl0bv,3:01010_3YAJkjQ7FIWz_0e20ax,3:00000_afmeTSYr86cz_0kb0f8,3:00b0b_57BkFo54paJz_06x04U">
                <span class="result-price">$2,600</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:49" title="Mon 06 Sep 06:49:25 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/beautiful-2b-2b-apartments-881-sqft/7376636460.html" data-id="7376636460" class="result-title hdrlnk" id="postid_7376636460" >Beautiful 2b/2b Apartments 881+ sqft</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,600</span>

                <span class="housing">
                    2br -
                    881ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376631417" data-repost-of="7373104240">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-furnished-studio-1300/7376631417.html" class="result-image gallery" data-ids="3:00p0p_hNG37xl9ja2z_09G04P,3:00l0l_3n6srFEIDHEz_08705B,3:01515_hWfAieaInhcz_0aZ062,3:00c0c_308Qd60Cougz_07X04M,3:01515_69mgcWllbxoz_03U02G">
                <span class="result-price">$1,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:46" title="Mon 06 Sep 06:46:38 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-furnished-studio-1300/7376631417.html" data-id="7376631417" class="result-title hdrlnk" id="postid_7376631417" >Beautiful Furnished Studio. $1300. Utilities included</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,300</span>

                <span class="housing">
                    500ft<sup>2</sup> -
                </span>

                <span class="result-hood"> (Miami miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376635255">

        <a href="https://miami.craigslist.org/mdc/apa/d/move-in-october-pre-leasing-specials/7376635255.html" class="result-image gallery" data-ids="3:00a0a_8thhwzMu9oyz_07B05H,3:00H0H_9vLnPdbNQdJz_0fi0bt,3:00i0i_6ScDKC5uEIUz_0ej0aJ,3:00a0a_bDOa6UnHw1az_09n072,3:00l0l_gqDK3cQ2Ui7z_0j30ei,3:00M0M_dqjlrzbpDCz_07F05K,3:00f0f_8UGqoZb0gI3z_0by0dN,3:00b0b_kkmifJRVjehz_0cc098">
                <span class="result-price">$1,700</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:46" title="Mon 06 Sep 06:46:17 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/move-in-october-pre-leasing-specials/7376635255.html" data-id="7376635255" class="result-title hdrlnk" id="postid_7376635255" >Move-In October. Pre-Leasing Specials</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,700</span>

                <span class="housing">
                    465ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376634087">

        <a href="https://miami.craigslist.org/mdc/apa/d/1b-1b-apartments-available-now/7376634087.html" class="result-image gallery" data-ids="3:00t0t_gd1jMzyTpAAz_0qF0k0,3:00j0j_lhbj6KyVHcuz_0fi0bt,3:00d0d_5LolTylBzgAz_0gq0iS,3:00x0x_5CcfJ7hZSsqz_0im0dK,3:00g0g_ZoFAai1q2qz_0nV0hW,3:00909_80Zwhp6DtRCz_0oI0ix,3:00Q0Q_XIjW4DmyHyz_08X06I,3:00r0r_eaYP73BP3zhz_0b208h">
                <span class="result-price">$2,150</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:43" title="Mon 06 Sep 06:43:21 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/1b-1b-apartments-available-now/7376634087.html" data-id="7376634087" class="result-title hdrlnk" id="postid_7376634087" >1B/1B Apartments Available Now</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,150</span>

                <span class="housing">
                    1br -
                    698ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373900104">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-cozy-apartment-1/7373900104.html" class="result-image gallery" data-ids="3:00Q0Q_kRWstKTXmohz_0lX0h8,3:00P0P_b0yWekRAFkCz_0bb0hG,3:00c0c_d1BkvXmmTTkz_0c10i2">
                <span class="result-price">$1,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:42" title="Mon 06 Sep 06:42:30 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-cozy-apartment-1/7373900104.html" data-id="7373900104" class="result-title hdrlnk" id="postid_7373900104" >COZY APARTMENT 2/1!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (NORTH MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376632980">

        <a href="https://miami.craigslist.org/mdc/apa/d/2b-2b-3500-large-walk-in-closets/7376632980.html" class="result-image gallery" data-ids="3:00R0R_lUp73219Mlwz_0hL0bR,3:00x0x_kHozn1ob58jz_0ma0eN,3:01212_aMGE4cj13Hsz_0dP0kJ,3:00V0V_cVfORsJsCURz_07u050,3:01717_8wKOAUsTawPz_09O0eI,3:00707_jl9GMguLiAhz_0lA0ep,3:00404_cWvZQleB8dDz_0He0sR,3:00D0D_G1H6HfdynJz_0pR0hg,3:00s0s_8kUSPCAuTTbz_0kf0dw,3:00R0R_hqSsoC5WQfIz_08S05V,3:00E0E_6L9i7qXF5GNz_0bh07w">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:40" title="Mon 06 Sep 06:40:32 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/2b-2b-3500-large-walk-in-closets/7376632980.html" data-id="7376632980" class="result-title hdrlnk" id="postid_7376632980" >2b/2b $3500. Large Walk-In Closets!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                    1100ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376630565">

        <a href="https://miami.craigslist.org/mdc/apa/d/resort-inspired-swimming-pool-rapid/7376630565.html" class="result-image gallery" data-ids="3:00H0H_1g5LqxFLiQkz_0mG0f7,3:00X0X_cWkXARmOGuXz_0cD08q,3:00e0e_6w6L0fe9YUyz_0pb0gY,3:00O0O_6NFqnCrWaukz_08805q,3:00G0G_hmcZcC63HoJz_09h06c,3:00N0N_2zfyezPfy3Sz_0lR0eA,3:00v0v_afHNxO75sVWz_0o20g3,3:00202_iWoStd8mx4Cz_0AF0qh,3:00F0F_7TUMcEqis4Fz_0mN0fc">
                <span class="result-price">$2,300</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:38" title="Mon 06 Sep 06:38:36 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/resort-inspired-swimming-pool-rapid/7376630565.html" data-id="7376630565" class="result-title hdrlnk" id="postid_7376630565" >Resort Inspired Swimming Pool! Rapid Approval!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,300</span>

                <span class="housing">
                    1br -
                    709ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376631835">

        <a href="https://miami.craigslist.org/mdc/apa/d/2b-2b-3250-moving-quickly/7376631835.html" class="result-image gallery" data-ids="3:00s0s_fq2rxieYICaz_0r10hS,3:00h0h_9CqVbyX3N0Fz_0cd0c1,3:00D0D_8uHVZAqD2r4z_07R05j,3:00x0x_aTqlLXeMkf7z_0fU0ao,3:00b0b_8t80CConFl6z_0gv0b3,3:00Y0Y_jEPBfHB3WeCz_0dA093,3:01111_eJPrZdwhbDdz_07I07w,3:00202_7iLKdNOZwTGz_0my0er,3:00q0q_bO82KeSf4a0z_06Z04N,3:00N0N_4HxSkpGFNL1z_08S05N">
                <span class="result-price">$3,250</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:37" title="Mon 06 Sep 06:37:36 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/2b-2b-3250-moving-quickly/7376631835.html" data-id="7376631835" class="result-title hdrlnk" id="postid_7376631835" >2b/2b $3250 Moving Quickly!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,250</span>

                <span class="housing">
                    2br -
                    1090ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376628819">

        <a href="https://miami.craigslist.org/mdc/apa/d/priced-to-lease-dont-wait/7376628819.html" class="result-image gallery" data-ids="3:00w0w_vin7dOwjPVz_0pO0he,3:00d0d_6JxRtiExGV1z_0uY0kG,3:00h0h_6EN0XMef3WQz_0pO0he,3:00e0e_afRNIixpxBXz_0uf0ka,3:00202_qp81vg6XEhz_0uf0ka,3:00f0f_734Scs4sdraz_0hq0bC,3:00k0k_k7lisdHWMVPz_0gw0bf">
                <span class="result-price">$1,775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:37" title="Mon 06 Sep 06:37:34 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/priced-to-lease-dont-wait/7376628819.html" data-id="7376628819" class="result-title hdrlnk" id="postid_7376628819" >Priced To Lease. Don&#39;t Wait!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,775</span>

                <span class="housing">
                    572ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376631400">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-boutique-apartment/7376631400.html" class="result-image gallery" data-ids="3:00r0r_fOeIuZcL5p7z_0cU09G,3:00i0i_8FgIWlizz0Lz_0ew0jm,3:01313_5wWgS2aPKYvz_0cU09G,3:00303_c0feEFEd7m3z_0cU09G,3:00101_cyoWPbaBGG8z_0ew0jm,3:00j0j_jTbOOMpvdoyz_0cU09G,3:00v0v_4eXm0HJKJkkz_0ew0jm,3:00h0h_eKDPxxWCVVCz_0cU09G">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:36" title="Mon 06 Sep 06:36:35 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beautiful-boutique-apartment/7376631400.html" data-id="7376631400" class="result-title hdrlnk" id="postid_7376631400" >BEAUTIFUL BOUTIQUE APARTMENT BUILDING IN THE HEART OF BRICKELL 2/2°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (31 SE 6th Street #807 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376626728">

        <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-locationlocation-bed/7376626728.html" class="result-image gallery" data-ids="3:01717_jGs8TTurJmMz_0lI0gc,3:00202_dZdzAOmdJTbz_0kp0fQ,3:01414_4Lc2DJ368nAz_0kG0gi,3:00808_5dcoeqYqBVwz_0lw0fz,3:00o0o_g5wjiyxQoBkz_0aF0hu">
                <span class="result-price">$1,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:35" title="Mon 06 Sep 06:35:39 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-locationlocation-bed/7376626728.html" data-id="7376626728" class="result-title hdrlnk" id="postid_7376626728" >LOCATION,LOCATION 1 BED/1.5 BATH!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,650</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (NORTH MIAMI BEACH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373939941">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-spectaculargreat-price-and/7373939941.html" class="result-image gallery" data-ids="3:00r0r_4C6UFA84q9yz_0dU0bj,3:00s0s_9weeg0mN2dCz_0aG0ht,3:00a0a_Qsij5EZJmjz_0950f5">
                <span class="result-price">$1,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:35" title="Mon 06 Sep 06:35:20 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-spectaculargreat-price-and/7373939941.html" data-id="7373939941" class="result-title hdrlnk" id="postid_7373939941" >SPECTACULAR,GREAT PRICE AND LOCATION!!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7373894904">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-spectaculargreat-price/7373894904.html" class="result-image gallery" data-ids="3:00k0k_eFbaLDN6CIyz_0lF0f7,3:00C0C_lICEfvsw0R1z_0mm0fa">
                <span class="result-price">$1,750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:35" title="Mon 06 Sep 06:35:09 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-spectaculargreat-price/7373894904.html" data-id="7373894904" class="result-title hdrlnk" id="postid_7373894904" >SPECTACULAR,GREAT PRICE!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,750</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (MIAMI miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376626860">

        <a href="https://miami.craigslist.org/mdc/apa/d/shopping-restaurants-apartment-building/7376626860.html" class="result-image gallery" data-ids="3:00606_1NwrN3KcZpZz_0fG0fj,3:00g0g_99fYrcCVCh2z_0hO0bF,3:01414_jzxePCN0rVNz_0ii0bJ,3:00l0l_gdRIENpg6BNz_0hP0bX,3:00C0C_i9GNBarypq1z_0hX0bT,3:00z0z_7iP1cxD1Gqtz_0hJ0bZ,3:00n0n_4b3ljtroPdFz_0hP0cg,3:00303_6JT7nFKHF0kz_09G06s,3:00L0L_e3zRGWGmnuhz_0g00fL,3:00D0D_1tcSDS5wMFxz_0hS0bG">
                <span class="result-price">$3,100</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:31" title="Mon 06 Sep 06:31:56 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/shopping-restaurants-apartment-building/7376626860.html" data-id="7376626860" class="result-title hdrlnk" id="postid_7376626860" >Shopping &amp; Restaurants! Apartment Building Is Awesome!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,100</span>

                <span class="housing">
                    2br -
                    1090ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376626032">

        <a href="https://miami.craigslist.org/mdc/apa/d/1b-1b-priced-to-lease-quickly-washer/7376626032.html" class="result-image gallery" data-ids="3:00d0d_6JxRtiExGV1z_0uY0kG,3:00f0f_734Scs4sdraz_0hq0bC,3:00c0c_eCXrT4iYgMPz_0uY0kG,3:01717_ku0TaHjI8itz_0pO0iv,3:00202_qp81vg6XEhz_0uf0ka,3:00u0u_7FyN5MXRbrJz_0pO0ho,3:00e0e_afRNIixpxBXz_0uf0ka,3:00w0w_vin7dOwjPVz_0pO0he">
                <span class="result-price">$2,400</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:31" title="Mon 06 Sep 06:31:04 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/1b-1b-priced-to-lease-quickly-washer/7376626032.html" data-id="7376626032" class="result-title hdrlnk" id="postid_7376626032" >1b/1b Priced To Lease Quickly! Washer and Dryer In-Unit!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$2,400</span>

                <span class="housing">
                    1br -
                    800ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376628746">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-full-amenity-buildinggreat/7376628746.html" class="result-image gallery" data-ids="3:00O0O_2QO5odpFXNLz_0gg0cc,3:00q0q_dTmJgA2MO4Qz_08g06s,3:00D0D_5IMF783EhKcz_08g06s,3:00n0n_i7S5vjL2BSdz_08g06s,3:00G0G_hJ5xdgPEyyVz_0jm0jm,3:00R0R_2RE0j3Ohdn4z_0jm0jm,3:00A0A_ifczE2cmob3z_0pO0jm,3:00C0C_bm8uskDkBBCz_0gg0cc,3:00H0H_i5xz1lHHWkcz_08g06s,3:00t0t_3SRdhQ9Zpb4z_0gg0cc,3:00D0D_dUxPFQdTpdez_0cc0gg,3:01010_hLqWLy8KtIZz_0cc0gg">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:30" title="Mon 06 Sep 06:30:23 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-full-amenity-buildinggreat/7376628746.html" data-id="7376628746" class="result-title hdrlnk" id="postid_7376628746" >Full Amenity Building:Great Fitness Gym, Convenience Store°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (5161 Collins Av #817 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376627708">

        <a href="https://miami.craigslist.org/mdc/apa/d/2b-2b-3500-large-walk-in-closets/7376627708.html" class="result-image gallery" data-ids="3:00909_imG6w8Sjnm1z_0wg0lx,3:00y0y_1YG86KOQ4xyz_0wg0lx,3:00707_kUuBNvr0vJfz_0wg0lx,3:00V0V_5ZxiS6FlozOz_0jn0t2,3:00202_7lrzw6DUUq5z_0wg0lx,3:00x0x_gaaC0v0PBkIz_0wg0lx,3:00Y0Y_e3eVfJdvOUFz_0jn0t2,3:00Z0Z_2aYM9nQ6SWCz_0wg0lx,3:00w0w_6cw7kg7hGqxz_0wg0lx,3:00t0t_6P0Wbj7H0LKz_0wg0lx,3:00k0k_5Fj9wmBG7M9z_0wg0lx">
                <span class="result-price">$3,500</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:27" title="Mon 06 Sep 06:27:58 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/2b-2b-3500-large-walk-in-closets/7376627708.html" data-id="7376627708" class="result-title hdrlnk" id="postid_7376627708" >2b/2b $3500. Large Walk-In Closets!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$3,500</span>

                <span class="housing">
                    2br -
                    1100ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7374306184">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-beautiful-studio-miami-beach/7374306184.html" class="result-image gallery" data-ids="3:00b0b_lRiEoqnyXQIz_0dT0aC,3:00000_ksqwSdZ3V3Mz_0lU0hT,3:00x0x_lFZioKWO9dJz_0lJ0av">
                <span class="result-price">$1,650</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:26" title="Mon 06 Sep 06:26:46 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-beautiful-studio-miami-beach/7374306184.html" data-id="7374306184" class="result-title hdrlnk" id="postid_7374306184" >BEAUTIFUL STUDIO MIAMI BEACH!!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,650</span>


                <span class="result-hood"> (MIAMI BEACH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376624911">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-stunning-building-amazing-views/7376624911.html" class="result-image gallery" data-ids="3:00c0c_eCXrT4iYgMPz_0uY0kG,3:00f0f_734Scs4sdraz_0hq0bC,3:00h0h_6EN0XMef3WQz_0pO0he,3:00w0w_vin7dOwjPVz_0pO0he,3:00k0k_k7lisdHWMVPz_0gw0bf,3:00d0d_6JxRtiExGV1z_0uY0kG,3:00e0e_afRNIixpxBXz_0uf0ka,3:00202_qp81vg6XEhz_0uf0ka">
                <span class="result-price">$1,775</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:25" title="Mon 06 Sep 06:25:22 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-stunning-building-amazing-views/7376624911.html" data-id="7376624911" class="result-title hdrlnk" id="postid_7376624911" >Stunning Building w/ Amazing Views and Amenities</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,775</span>

                <span class="housing">
                    600ft<sup>2</sup> -
                </span>

                <span class="result-hood"> ( miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376626491">

        <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-alquilo-1-studio/7376626491.html" class="result-image gallery" data-ids="3:00j0j_kdFB8iuZPXjz_0t20CI,3:00S0S_8UlUKc6j8bpz_0t20CI,3:00Z0Z_brDs0K6nQvjz_0t20CI,3:01313_d7PiGnCzmq9z_0t20CI,3:00A0A_jfpZGCc7gb7z_0t20CI,3:00I0I_e2MZmKCpaZKz_0t20CI,3:00b0b_6noeOHPjyxZz_0t20CI,3:00R0R_91YiwiyO1l6z_0t20CI,3:00S0S_fnGz9eISlASz_0t20CI,3:00Z0Z_ljXj71V9r72z_0t20CI,3:00z0z_dNwHNBoX0MXz_0t20CI,3:01414_75d1ofOtB04z_0t20CI,3:01010_9ELuIsZvF5vz_0t20CI">
                <span class="result-price">$980</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:25" title="Mon 06 Sep 06:25:06 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/north-miami-beach-alquilo-1-studio/7376626491.html" data-id="7376626491" class="result-title hdrlnk" id="postid_7376626491" >ALQUILO 1/1 STUDIO AMOBLADO EN SUNNY ISLES BEACH</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$980</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (North Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376626113">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-great-location-must-see-the/7376626113.html" class="result-image gallery" data-ids="3:00V0V_1nbKfQNkVbYz_0cU09G,3:01616_3kgXq6LSZcsz_0cU09G,3:00t0t_4ZzPc6OpHD5z_0cU09G,3:00X0X_1smSl74fyfbz_0cU09G,3:00202_34kg59jRgY9z_0cU09G,3:00H0H_kBDh3NwqtYdz_0cU09G,3:00101_kwgUBn4VEJnz_0cU09G,3:00u0u_8ilvGGBrjdHz_0cU09G,3:01414_59Qpa8N6puhz_0cU09G,3:01717_hgcjnjDfI6zz_0cU09G,3:01616_jGotnYQwNlqz_0cU09G,3:00000_rJGQfVH75Sz_0cU09G">
                <span class="result-price">$4,000</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:24" title="Mon 06 Sep 06:24:15 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-great-location-must-see-the/7376626113.html" data-id="7376626113" class="result-title hdrlnk" id="postid_7376626113" >Great location, must see. The home in great condition, easy to show°°°</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$4,000</span>

                <span class="housing">
                    2br -
                </span>

                <span class="result-hood"> (5161 Collins Av #1201 miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376615031" data-repost-of="6409220269">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-barbecue-yard-for-kids-and-pets/7376615031.html" class="result-image gallery" data-ids="3:00S0S_iGN0vi3cOtwz_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:20" title="Mon 06 Sep 06:20:58 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-barbecue-yard-for-kids-and-pets/7376615031.html" data-id="7376615031" class="result-title hdrlnk" id="postid_7376615031" >Barbecue Yard for Kids and Pets Efficiency Studio Apartment 3132 rc2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Bayside Marketplace Biscayne Blvd miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7374316362">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-aventura-bed-15-bath/7374316362.html" class="result-image gallery" data-ids="3:00C0C_3jiVCqHm9Fqz_0c90hZ,3:00k0k_1m7cq6PF42Sz_0eF0hm,3:00a0a_kq5PRyLHJiWz_0eF0hM">
                <span class="result-price">$1,575</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:20" title="Mon 06 Sep 06:20:45 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-aventura-bed-15-bath/7374316362.html" data-id="7374316362" class="result-title hdrlnk" id="postid_7374316362" >AVENTURA 1 BED/1.5/BATH!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,575</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (AVENTURA miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7374301694">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-miami-beach-bed-bath/7374301694.html" class="result-image gallery" data-ids="3:01212_jA8kmrkpPLJz_0mw0hG,3:00p0p_7O5LFn1gCEAz_0g00hr,3:00909_jG9VAG6JuDzz_0eK0fP,3:00d0d_d0n4hnL45Axz_0fs0ht">
                <span class="result-price">$1,800</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:20" title="Mon 06 Sep 06:20:35 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-miami-beach-bed-bath/7374301694.html" data-id="7374301694" class="result-title hdrlnk" id="postid_7374301694" >MIAMI BEACH 1/BED 1/BATH!!</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$1,800</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (MIAMI BEACH miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>
         <li class="result-row" data-pid="7376615958" data-repost-of="6409220269">

        <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-collins-avenue-miami-beach/7376615958.html" class="result-image gallery" data-ids="3:00S0S_iGN0vi3cOtwz_09u0c6">
                <span class="result-price">$750</span>
        </a>

    <div class="result-info">
        <span class="icon icon-star" role="button">
            <span class="screen-reader-text">favorite this post</span>
        </span>

            <time class="result-date" datetime="2021-09-06 18:20" title="Mon 06 Sep 06:20:11 PM">Sep  6</time>


        <h3 class="result-heading">
            <a href="https://miami.craigslist.org/mdc/apa/d/miami-beach-collins-avenue-miami-beach/7376615958.html" data-id="7376615958" class="result-title hdrlnk" id="postid_7376615958" >Collins Avenue Miami Beach Efficiency Studio Apartment 3140 rc2</a>
        </h3>

        <span class="result-meta">
                <span class="result-price">$750</span>

                <span class="housing">
                    1br -
                </span>

                <span class="result-hood"> (Collins Avenue Miami Beach miami / dade county )</span>

                <span class="result-tags">
                    <span class="pictag">pic</span>
                </span>

                <span class="banish icon icon-trash" role="button">
                    <span class="screen-reader-text">hide this posting</span>
                </span>

            <span class="unbanish icon icon-trash red" role="button" aria-hidden="true"></span>
            <a href="#" class="restore-link">
                <span class="restore-narrow-text">restore</span>
                <span class="restore-wide-text">restore this posting</span>
            </a>

        </span>
    </div>
</li>

                    
                    
                </ul>
            </div>

            <div class="search-legend bottom">
                <div class="search-view">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="search-sort">
                    <span class="buttongroup"><a class="backtotop button" href="#page-top">^ back to top</a></span>
                </div>
                <div class="paginator buttongroup firstpage">
    <span class="resulttotal">
        <span class="for-map">
        showing <span class="displaycountShow">...</span> postings
        <span class="zoom-out-for-more" style="display: none">
            -
            <a href="">
                zoom out for all <span class="total">3000</span>
            </a>
        </span>

        </span>
    </span>
    <span class="buttons">
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button first" title="first page">&lt;&lt;</a>
        <span class="button first" title="first page">&lt;&lt;</span>
        <a href="/d/apartments-housing-for-rent/search/mdc/apa?hasPic=1" class="button prev" title="previous page">&lt; prev</a>
        <span class="button prev" title="previous page">&lt; prev</span>

        <span class="button pagenum">
            <span class="range">
                <span class="rangeFrom">1</span>
                -
                <span class="rangeTo">120</span>
            </span>
            /
            <span class="totalcount">3000</span>
        </span>

        <a href="/d/apartments-housing-for-rent/search/mdc/apa?s=120&amp;hasPic=1" class="button next" title="next page">next &gt; </a>
        <span class="button next" title="next page"> next &gt; </span>
    </span>
</div>

            </div>

            <section class="blurbs">
                
            </section>

            <div id="floater">
                <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                <img class="payload" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
            </div>
        </form>

<aside class="tsb">
    <ul>
        <li><a href="https://www.craigslist.org/about/FHA">fair housing</a>
        <li><a href="https://www.craigslist.org/about/scams">avoiding scams</a>
    </ul>
</aside>

<div class="slidemessage">
    <span class="fave">
        <span class="star"></span>
        favorited
    </span>
    <span class="unfave">
        <span class="star"></span>
        no longer favorited
    </span>
    <span class="hide">
        <span class="trash"></span>
        hidden
    </span>
    <span class="unhide">
        <span class="trash"></span>
        no longer hidden
    </span>
</div>

<footer>
    <ul class="clfooter">
        <li>&copy; 2021 <span class="desktop">craigslist</span><span class="mobile">CL</span></li>
        <li><a href="https://www.craigslist.org/about/help/">help</a></li>
        <li><a href="https://www.craigslist.org/about/scams">safety</a></li>
        <li class="desktop"><a href="https://www.craigslist.org/about/privacy.policy">privacy</a><sup class="neu">new</sup></li>
        <li class="desktop"><a href="https://forums.craigslist.org/?forumID=8">feedback</a></li>
        <li><a href="https://www.craigslist.org/about/terms.of.use">terms</a></li>
        <li><a href="https://www.craigslist.org/about/">about</a></li>
        <li class="fsel desktop linklike" data-mode="mobile">mobile</li>
        <li class="fsel mobile linklike" data-mode="regular">desktop</li>
    </ul>
</footer>
    </section>

<template id="gallerycarousel">
    <div class="slider-info"></div><div class="slider-back arrow">&lt;</div><div class="slider-forward arrow">&gt;</div>
</template>

<script type="text/template" id="clustertemplate">
    <li class="posting {visited}" data-pid="{PostingID}">
        <img src="{ImageThumb}">
        <div class="housing_bubble_banner">
            <span class="{hasPrice}price">{currencySymbol}{price}</span>
            <span class="bedrooms">{BedroomsContent}</span>
            <span class="postingtitle"><a>{PostingTitle}</a></span>
            <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                <span class="banish">
                    <span class="icon icon-trash" role="button"></span>
                    <span class="screen-reader-text">hide this posting</span>
                </span>
                <span class="unbanish">
                    <span class="icon icon-trash red" role="button"></span>
                    unhide
                </span>
            </span>
        </div>
    </li>
</script>
<script type="text/template" id="postingtemplate">
    <div class="viewcontainer pics loading">
        <div class="backtolist">
            &laquo; back to posting list
        </div>
        <div class="title">
            <span class="icon icon-star" data-pid="{PostingID}" role="button">
                <span class="screen-reader-text">favorite this post</span>
            </span>
            <span class="postingtitle">
                <a href="{PostingURL}" target="_blank">{PostingTitle}</a>
            </span>
            <div>
                <span class="{hasPrice}price">{currencySymbol}{price}</span>
                <span class="bedrooms">{BedroomsContent}</span>
                <span class="js-only map-banish-unbanish" data-pid="{PostingID}">
                    <span class="banish">
                        <span class="icon icon-trash" role="button"></span>
                        <span class="screen-reader-text">hide this posting</span>
                    </span>
                    <span class="unbanish">
                        <span class="icon icon-trash red" role="button"></span>
                        <span class="screen-reader-text">unhide</span>
                        unhide
                    </span>
                </span>
            </div>
        </div>
        <hr style="clear:both">
        <div class="picscontainer gallery">
            <span class="slider-back arrow">&lt;</span><span class="slider-info"></span><span class="slider-forward arrow">&gt;</span>
            <div class="swipe">
                <div class="swipe-wrap">
                    <img class="loading" src="//www.craigslist.org/images/animated-spinny.gif" alt="">
                </div>
            </div>
        </div>
        <div class="infocontainer"></div>
        <hr style="clear:both">
        <div class="timecontainer"></div>
        <a class="viewpostinglink" href="{PostingURL}" target="_blank">view posting</a>
        <div class="contenttoggle">
            <a class="moreinfo">more info</a>
            <a class="showpics">show images</a>
        </div>
    </div>
</script>
<script type="text/template" id="popuptemplate">
    <div id="mapbubble" class="posting">
        <ul id="clusterbubble"></ul>
        <div id="postbubble"></div>
    </div>
</script>


</body>
</html>

  recorded_at: Tue, 07 Sep 2021 04:05:43 GMT
recorded_with: VCR 6.0.0
